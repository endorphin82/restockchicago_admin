{"version":3,"sources":["components/Categories/queries/__generated__/CategoriesAll.tsx","actions/types.ts","components/Categories/mutations/__generated__/DeleteCascadeCategoryWithProductsById.tsx","actions/index.ts","components/CategoriesTable/index.tsx","components/Categories/mutations/__generated__/AddCategory.tsx","components/Products/queries/__generated__/ProductsAll.tsx","components/CategoryAddForm/index.tsx","components/Categories/mutations/__generated__/UpdateCategory.tsx","components/CategoryEditForm/index.tsx","components/Categories/index.tsx","utils/utils.ts","components/ProductsTable/ProductsTableAntd.tsx","components/Products/mutations/__generated__/UpdateProduct.tsx","components/Products/queries/__generated__/ProductsByCategoryId.tsx","components/ProductsTable/index.tsx","components/ProductEditForm/index.tsx","components/Products/mutations/__generated__/AddProduct.tsx","components/ProductAddForm/index.tsx","components/Products/index.tsx","components/RecycleBinIcon/index.tsx","components/Products/query.ts","components/Products/mutations/__generated__/DeleteProduct.tsx","components/RecycleBinProductsTable/index.tsx","components/Products/mutations/__generated__/ClearRecycleBin.tsx","components/RecycleBin/index.tsx","components/Categories/queries/__generated__/CategoryById.tsx","components/TabsContainer/index.tsx","App.tsx","serviceWorker.js","store/apollo-client.ts","reducer/edit-prod-modal.ts","reducer/add-prod-modal.ts","reducer/edit-cat-modal.ts","reducer/add-cat-modal.ts","reducer/edit-product.ts","reducer/edit-category.ts","reducer/index.ts","store/index.ts","index.tsx"],"names":["CategoriesAllDocument","gql","useCategoriesAll","baseOptions","ApolloReactHooks","REACT_APP_RECYCLE_BIN_ID","String","process","REACT_APP_NO_IMAGE_AVAILABLE","DeleteCascadeCategoryWithProductsByIdDocument","editProduct","product","type","payload","clearEditProduct","setIsOpenEditProductModal","isOpen","setIsOpenAddProductModal","setIsOpenEditCategoryModal","setIsOpenAddCategoryModal","styleIconInTable","width","height","marginRight","connect","editCategory","category","cat_loading","loading","cat_error","error","cat_data","data","refetchQueries","query","deleteCascadeCategoryWithProductsById","useState","isVisualDeleteModal","setIsVisualDeleteModal","categoryDeleted","setCategoryDeleted","categoriesAll","categoriesAllWithoutRecycleBin","filter","id","columns","title","dataIndex","key","render","icons","length","map","icon","alt","src","style","image","onClick","cat","find","handleEdit","float","handleDelete","danger","dataSource","rowKey","visible","Boolean","onOk","variables","then","mess","console","log","onCancel","name","AddCategoryDocument","ProductsAllDocument","useProductsAll","formItemLayout","labelCol","xs","span","sm","wrapperCol","formItemLayoutWithOutLabel","offset","state","isOpenAddCategoryModal","add_cat_modal","update","cache","addCategory","readQuery","writeQuery","concat","values","setValues","footer","onFinish","valuefromformlist","images","m","catch","e","Item","label","rules","required","message","onChange","target","value","placeholder","List","fields","add","remove","field","index","validateTrigger","whitespace","noStyle","className","htmlType","UpdateCategoryDocument","isOpenEditCategoryModal","edit_cat_modal","edited_category","edit_category","clearEditCategory","Form","useForm","formEditCategory","updateCategory","useEffect","setFieldsValue","resetFields","form","shape","position","bottom","right","color","PlusOutlined","fontSize","priceStringToIntCent","str","Math","round","parseFloat","replace","priceToDollars","price","Number","toLocaleString","currency","styleImagesInTable","ProductsTableAntd","handleEditProp","handleDeleteProp","productsAllWithoutRecycleBinProp","UpdateProductDocument","useUpdateProduct","ProductsByCategoryIdDocument","useProductsByCategoryId","categoryId","updateProduct","productDeleted","setProductDeleted","productsAll","productsAllWithoutRecycleBin","prod","handleOk","isOpenEditProductModal","edit_product_modal","edited_product","edit_product","formEditProduct","handleChange","Option","firstActiveValue","AddProductDocument","isOpenAddProductModal","add_product_modal","addProduct","RecycleBinIcon","categoryById","productsByCategoryId","productsByCategoryIdQuery","DeleteProductDocument","recycle_bin_prod_loading","recycle_bin_prod_error","recycle_bin_prod_data","isVisualRestoreModal","setIsVisualRestoreModal","deleteProduct","ClearRecycleBinDocument","RecycleBin","clearRecycleBin","display","CategoryByIdDocument","TabPane","Tabs","callback","TabsContainer","prod_loading","prod_error","prod_data","recycle_bin_loading","recycle_bin_error","recycle_bin_data","recycle_bin_cat_loading","recycle_bin_cat_error","recycle_bin_cat_data","defaultActiveKey","tab","App","href","rel","window","location","hostname","match","InMemoryCache","client","ApolloClient","uri","initialState","rootReducer","combineReducers","action","composeEnhancers","composeWithDevTools","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db29e38b.chunk.js","sourcesContent":["import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type CategoriesAllVariables = {};\n\n\nexport type CategoriesAll = (\n  { __typename: 'Query' }\n  & { categoriesAll?: Types.Maybe<Array<Types.Maybe<(\n    { __typename: 'Category' }\n    & Pick<Types.Category, 'id' | 'name' | 'icons' | 'images'>\n  )>>> }\n);\n\n\nexport const CategoriesAllDocument = gql`\n    query CategoriesAll {\n  categoriesAll {\n    id\n    name\n    icons\n    images\n  }\n}\n    `;\n\n/**\n * __useCategoriesAll__\n *\n * To run a query within a React component, call `useCategoriesAll` and pass it any options that fit your needs.\n * When your component renders, `useCategoriesAll` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCategoriesAll({\n *   variables: {\n *   },\n * });\n */\nexport function useCategoriesAll(baseOptions?: ApolloReactHooks.QueryHookOptions<CategoriesAll, CategoriesAllVariables>) {\n        return ApolloReactHooks.useQuery<CategoriesAll, CategoriesAllVariables>(CategoriesAllDocument, baseOptions);\n      }\nexport function useCategoriesAllLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CategoriesAll, CategoriesAllVariables>) {\n          return ApolloReactHooks.useLazyQuery<CategoriesAll, CategoriesAllVariables>(CategoriesAllDocument, baseOptions);\n        }\nexport type CategoriesAllHookResult = ReturnType<typeof useCategoriesAll>;\nexport type CategoriesAllLazyQueryHookResult = ReturnType<typeof useCategoriesAllLazyQuery>;\nexport type CategoriesAllQueryResult = ApolloReactCommon.QueryResult<CategoriesAll, CategoriesAllVariables>;","import { Product } from \"../__generated__apollo__/types-query\"\n\nexport const IS_OPEN_ADD_PRODUCT_MODAL = \"IS_OPEN_ADD_PRODUCT_MODAL\"\nexport const IS_OPEN_EDIT_PRODUCT_MODAL = \"IS_OPEN_EDIT_PRODUCT_MODAL\"\nexport const IS_OPEN_EDIT_CATEGORY_MODAL = \"IS_OPEN_EDIT_CATEGORY_MODAL\"\nexport const IS_OPEN_ADD_CATEGORY_MODAL = \"IS_OPEN_ADD_CATEGORY_MODAL\"\nexport const EDIT_PRODUCT = \"EDIT_PRODUCT\"\nexport const EDIT_CATEGORY = \"EDIT_CATEGORY\"\nexport const CLEAR_EDIT_PRODUCT = \"CLEAR_EDIT_PRODUCT\"\nexport const CLEAR_EDIT_CATEGORY = \"CLEAR_EDIT_CATEGORY\"\nexport const REACT_APP_RECYCLE_BIN_ID = String(process.env.REACT_APP_RECYCLE_BIN_ID)\nexport const REACT_APP_NO_IMAGE_AVAILABLE = String(process.env.REACT_APP_NO_IMAGE_AVAILABLE)\n\n// export interface FieldData {\n//   name: number;\n//   key: number;\n//   fieldKey: number;\n// }\n// export interface FormListProps {\n//   name: string | number | (string | number)[];\n//   children: (fields: FieldData[], operation: Operation) => React.ReactNode;\n// }\n// export interface Operation {\n//   add: (defaultValue?: StoreValue) => void;\n//   remove: (index: number) => void;\n//   move: (from: number, to: number) => void;\n// }\n\n\nexport interface AddProductModalState {\n  isOpen: Boolean\n}\n\nexport interface mstpAddProductModalState {\n  isOpenAddProductModal: Boolean\n}\n\n// export interface Product {\n//   id?: String\n//   name?: String\n//   categoryId?: String\n//   price?: Number\n//   images?: String[]\n//   icon?: String\n// }\n\n// export interface ProductCat {\n//   id?: String\n//   name?: String\n//   category?: {\n//     id?: String\n//     name?: String\n//     icons?: String[]\n//   }\n//   price?: Number\n//   images?: String[]\n//   icon?: String\n// }\n\nexport interface Category {\n  id?: String\n  name?: String\n  icons?: String[]\n  images?: String[]\n}\n\nexport interface ICategory {\n  category: Category\n}\n\nexport interface CategoryRequireIcons {\n  id?: String\n  name?: String\n  icons: String[]\n}\n\n\nexport interface setIsOpenAddProductModalAction {\n  type: typeof IS_OPEN_ADD_PRODUCT_MODAL\n  payload: Boolean\n}\n\nexport interface EditProductModalState {\n  isOpen: Boolean\n}\n\nexport interface setIsOpenAddCategoryModalAction {\n  type: typeof IS_OPEN_ADD_CATEGORY_MODAL\n  payload: Boolean\n}\nexport interface setIsOpenEditCategoryModalAction {\n  type: typeof IS_OPEN_EDIT_CATEGORY_MODAL\n  payload: Boolean\n}\n\nexport interface AddCategoryModalState {\n  isOpen: Boolean\n}\n\nexport interface EditCategoryModalState {\n  isOpen: Boolean\n}\n\nexport interface setIsOpenEditProductModalAction {\n  type: typeof IS_OPEN_EDIT_PRODUCT_MODAL\n  payload: Boolean\n}\n\nexport interface EditProductState {\n  product?: Product | {}\n}\n\nexport interface EditCategoryState {\n  category?: Category | {}\n}\n\nexport interface mstpEditProductState {\n  edited_product?: Product | {}\n}\n\nexport interface editProductAction {\n  type: typeof EDIT_PRODUCT | typeof CLEAR_EDIT_PRODUCT\n  payload?: Product | {}\n}\n\nexport interface editCategoryAction {\n  type: typeof EDIT_CATEGORY | typeof CLEAR_EDIT_CATEGORY\n  payload?: Product | {}\n}\n","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type DeleteCascadeCategoryWithProductsByIdVariables = {\n  id: Types.Scalars['ID'];\n};\n\n\nexport type DeleteCascadeCategoryWithProductsById = (\n  { __typename: 'Mutation' }\n  & { deleteCascadeCategoryWithProductsById?: Types.Maybe<{ __typename: 'Category' }> }\n);\n\n\nexport const DeleteCascadeCategoryWithProductsByIdDocument = gql`\n    mutation DeleteCascadeCategoryWithProductsById($id: ID!) {\n  deleteCascadeCategoryWithProductsById(id: $id) {\n    __typename\n  }\n}\n    `;\nexport type DeleteCascadeCategoryWithProductsByIdMutationFn = ApolloReactCommon.MutationFunction<DeleteCascadeCategoryWithProductsById, DeleteCascadeCategoryWithProductsByIdVariables>;\n\n/**\n * __useDeleteCascadeCategoryWithProductsById__\n *\n * To run a mutation, you first call `useDeleteCascadeCategoryWithProductsById` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteCascadeCategoryWithProductsById` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteCascadeCategoryWithProductsById, { data, loading, error }] = useDeleteCascadeCategoryWithProductsById({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteCascadeCategoryWithProductsById(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteCascadeCategoryWithProductsById, DeleteCascadeCategoryWithProductsByIdVariables>) {\n        return ApolloReactHooks.useMutation<DeleteCascadeCategoryWithProductsById, DeleteCascadeCategoryWithProductsByIdVariables>(DeleteCascadeCategoryWithProductsByIdDocument, baseOptions);\n      }\nexport type DeleteCascadeCategoryWithProductsByIdHookResult = ReturnType<typeof useDeleteCascadeCategoryWithProductsById>;\nexport type DeleteCascadeCategoryWithProductsByIdMutationResult = ApolloReactCommon.MutationResult<DeleteCascadeCategoryWithProductsById>;\nexport type DeleteCascadeCategoryWithProductsByIdMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteCascadeCategoryWithProductsById, DeleteCascadeCategoryWithProductsByIdVariables>;","import {\n  Category,\n  CLEAR_EDIT_CATEGORY,\n  CLEAR_EDIT_PRODUCT,\n  EDIT_CATEGORY,\n  EDIT_PRODUCT,\n  editCategoryAction,\n  editProductAction,\n  IS_OPEN_ADD_CATEGORY_MODAL,\n  IS_OPEN_ADD_PRODUCT_MODAL,\n  IS_OPEN_EDIT_CATEGORY_MODAL,\n  IS_OPEN_EDIT_PRODUCT_MODAL,\n  setIsOpenAddCategoryModalAction,\n  setIsOpenAddProductModalAction,\n  setIsOpenEditCategoryModalAction,\n  setIsOpenEditProductModalAction\n} from \"./types\"\nimport { Product } from \"../__generated__apollo__/types-query\"\n\nexport const editProduct = (product: Product): editProductAction => ({\n  type: EDIT_PRODUCT,\n  payload: product\n})\n\nexport const clearEditProduct = () => ({\n  type: CLEAR_EDIT_PRODUCT\n})\n\nexport const editCategory = (category: Category): editCategoryAction => ({\n  type: EDIT_CATEGORY,\n  payload: category\n})\n\nexport const clearEditCategory = () => ({\n  type: CLEAR_EDIT_CATEGORY\n})\n\nexport const setIsOpenEditProductModal = (isOpen: Boolean): setIsOpenEditProductModalAction => ({\n  type: IS_OPEN_EDIT_PRODUCT_MODAL,\n  payload: isOpen\n})\n\nexport const setIsOpenAddProductModal = (isOpen: Boolean): setIsOpenAddProductModalAction => ({\n  type: IS_OPEN_ADD_PRODUCT_MODAL,\n  payload: isOpen\n})\n\nexport const setIsOpenEditCategoryModal = (isOpen: Boolean): setIsOpenEditCategoryModalAction => ({\n  type: IS_OPEN_EDIT_CATEGORY_MODAL,\n  payload: isOpen\n})\n\nexport const setIsOpenAddCategoryModal = (isOpen: Boolean): setIsOpenAddCategoryModalAction => ({\n  type: IS_OPEN_ADD_CATEGORY_MODAL,\n  payload: isOpen\n})\n","import React, { useState } from \"react\"\nimport { Button, Modal, Table, Tooltip } from \"antd\"\nimport { CategoriesAllDocument, useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\nimport { Category } from \"../../__generated__/types\"\nimport { useDeleteCascadeCategoryWithProductsById } from \"../Categories/mutations/__generated__/DeleteCascadeCategoryWithProductsById\"\nimport { ProductsAllDocument } from \"../Products/queries/__generated__/ProductsAll\"\nimport DeleteOutlined from \"@ant-design/icons/lib/icons/DeleteOutlined\"\nimport { editCategory } from \"../../actions\"\nimport { setIsOpenEditCategoryModal } from \"../../actions\"\nimport { Product } from \"../../__generated__apollo__/types-query\"\nimport { connect } from \"react-redux\"\n\nconst styleIconInTable = { width: \"20px\", height: \"100%\", marginRight: \"10px\" }\n\nexport interface PropsCategoryTable {\n  editCategory: (product: Product | undefined) => void\n  setIsOpenEditCategoryModal: (isOpen: Boolean | undefined) => void\n}\n\nconst CategoriesTable: React.FC<PropsCategoryTable> = ({ editCategory, setIsOpenEditCategoryModal }) => {\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const [deleteCascadeCategoryWithProductsById, {}] = useDeleteCascadeCategoryWithProductsById({\n      refetchQueries: [{\n        query: CategoriesAllDocument\n      }]\n    }\n  )\n  const [isVisualDeleteModal, setIsVisualDeleteModal] = useState<Boolean>(false)\n  const [categoryDeleted, setCategoryDeleted] = useState<Category | any>({})\n  if (cat_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (cat_error || !cat_data) {\n    return (<div>Error...</div>)\n  }\n  const { categoriesAll } = cat_data\n\n  // @ts-ignore\n  const categoriesAllWithoutRecycleBin = categoriesAll?.filter((category: Category) => {\n    return category.id !== REACT_APP_RECYCLE_BIN_ID\n  })\n\n  const handleEdit = (id: String): void => {\n    const cat = categoriesAllWithoutRecycleBin?.find((cat: Category) => cat.id === id)\n    editCategory(cat)\n    setIsOpenEditCategoryModal(true)\n  }\n\n  const handleDelete = (id: String): void => {\n    setIsVisualDeleteModal(true)\n    setCategoryDeleted(categoriesAllWithoutRecycleBin.find((cat: Category) => cat.id === id))\n  }\n\n  const handleOk = (id: String) => {\n    deleteCascadeCategoryWithProductsById({\n      variables: {\n        id: String(id)\n      }\n    }).then(mess => console.log(\"deleteCascadeCategoryWithProductsById response:\", mess))\n    setIsVisualDeleteModal(false)\n  }\n\n  const handleCancel = () => {\n    setIsVisualDeleteModal(false)\n  }\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\"\n    },\n    {\n      title: \"ID\",\n      dataIndex: \"id\",\n      key: \"id\"\n    },\n    {\n      title: \"Icons\",\n      dataIndex: \"icons\",\n      key: \"icons\",\n      render: (icons: String[]) => {\n        return (icons.length !== 0)\n          ? <div>\n            {\n              icons\n                .map(icon => <img\n                  key={String(icon)} alt=\"img\"\n                  src={String(icon)}\n                  style={styleIconInTable}/>\n                )\n            }\n          </div>\n          : <span>no icons</span>\n      }\n    },\n    {\n      title: \"Images\",\n      dataIndex: \"images\",\n      key: \"images\",\n      render: (icons: String[]) => {\n        return (icons.length !== 0)\n          ? <div>\n            {\n              icons\n                .map(image => <img\n                  key={String(image)} alt=\"img\"\n                  src={String(image)}\n                  style={styleIconInTable}/>\n                )\n            }\n          </div>\n          : <span>no images</span>\n      }\n    },\n    {\n      title: \"Actions\",\n      dataIndex: \"id\",\n      key: \"id\",\n      render: (id: String) => <>\n        <Tooltip title=\"Edit this category\">\n          <Button onClick={() => handleEdit(id)}\n                  type=\"dashed\">\n            Edit\n          </Button>\n        </Tooltip>\n        <Tooltip\n          title=\"Delete Category With All Products\">\n          <Button style={{ float: \"right\" }}\n                  onClick={() => handleDelete(id)}\n                  type=\"dashed\"\n                  danger\n                  icon={<DeleteOutlined/>}>\n          </Button>\n        </Tooltip>\n      </>\n    }\n  ]\n\n  return (\n    <>\n      <Table dataSource={categoriesAllWithoutRecycleBin} columns={columns} rowKey=\"id\"/>\n      <Modal\n        title=\"Delete Category With All Products WITHOUT recovery!?\"\n        visible={Boolean(isVisualDeleteModal)}\n        onOk={() => handleOk(categoryDeleted.id)}\n        onCancel={handleCancel}\n      >\n        <p>{categoryDeleted.name}</p>\n      </Modal>\n    </>\n  )\n}\n\nexport default connect<typeof CategoriesTable>(null, {\n  editCategory, setIsOpenEditCategoryModal\n})(CategoriesTable)","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type AddCategoryVariables = {\n  name: Types.Scalars['String'];\n  images?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  icons?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n};\n\n\nexport type AddCategory = (\n  { __typename: 'Mutation' }\n  & { addCategory?: Types.Maybe<(\n    { __typename: 'Category' }\n    & Pick<Types.Category, 'id' | 'name' | 'images' | 'icons'>\n  )> }\n);\n\n\nexport const AddCategoryDocument = gql`\n    mutation AddCategory($name: String!, $images: [String], $icons: [String]) {\n  addCategory(name: $name, images: $images, icons: $icons) {\n    id\n    name\n    images\n    icons\n  }\n}\n    `;\nexport type AddCategoryMutationFn = ApolloReactCommon.MutationFunction<AddCategory, AddCategoryVariables>;\n\n/**\n * __useAddCategory__\n *\n * To run a mutation, you first call `useAddCategory` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddCategory` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addCategory, { data, loading, error }] = useAddCategory({\n *   variables: {\n *      name: // value for 'name'\n *      images: // value for 'images'\n *      icons: // value for 'icons'\n *   },\n * });\n */\nexport function useAddCategory(baseOptions?: ApolloReactHooks.MutationHookOptions<AddCategory, AddCategoryVariables>) {\n        return ApolloReactHooks.useMutation<AddCategory, AddCategoryVariables>(AddCategoryDocument, baseOptions);\n      }\nexport type AddCategoryHookResult = ReturnType<typeof useAddCategory>;\nexport type AddCategoryMutationResult = ApolloReactCommon.MutationResult<AddCategory>;\nexport type AddCategoryMutationOptions = ApolloReactCommon.BaseMutationOptions<AddCategory, AddCategoryVariables>;","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type ProductsAllVariables = {};\n\n\nexport type ProductsAll = (\n  { __typename: 'Query' }\n  & { productsAll?: Types.Maybe<Array<Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon'>\n    & { category?: Types.Maybe<(\n      { __typename: 'Category' }\n      & Pick<Types.Category, 'id' | 'name' | 'icons'>\n    )> }\n  )>>> }\n);\n\n\nexport const ProductsAllDocument = gql`\n    query ProductsAll {\n  productsAll {\n    id\n    name\n    price\n    images\n    icon\n    category {\n      id\n      name\n      icons\n    }\n  }\n}\n    `;\n\n/**\n * __useProductsAll__\n *\n * To run a query within a React component, call `useProductsAll` and pass it any options that fit your needs.\n * When your component renders, `useProductsAll` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProductsAll({\n *   variables: {\n *   },\n * });\n */\nexport function useProductsAll(baseOptions?: ApolloReactHooks.QueryHookOptions<ProductsAll, ProductsAllVariables>) {\n        return ApolloReactHooks.useQuery<ProductsAll, ProductsAllVariables>(ProductsAllDocument, baseOptions);\n      }\nexport function useProductsAllLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProductsAll, ProductsAllVariables>) {\n          return ApolloReactHooks.useLazyQuery<ProductsAll, ProductsAllVariables>(ProductsAllDocument, baseOptions);\n        }\nexport type ProductsAllHookResult = ReturnType<typeof useProductsAll>;\nexport type ProductsAllLazyQueryHookResult = ReturnType<typeof useProductsAllLazyQuery>;\nexport type ProductsAllQueryResult = ApolloReactCommon.QueryResult<ProductsAll, ProductsAllVariables>;","import React, { useState } from \"react\"\nimport { connect } from \"react-redux\"\nimport { RootState } from \"../../reducer\"\nimport { setIsOpenAddCategoryModal } from \"../../actions\"\nimport { useAddCategory } from \"../Categories/mutations/__generated__/AddCategory\"\nimport { IProductsAll } from \"../Products/types\"\nimport { ProductsAllDocument } from \"../Products/queries/__generated__/ProductsAll\"\nimport { CategoriesAllDocument, useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { ICategoriesAll } from \"../Categories/types\"\nimport { ProductCatId } from \"../../__generated__apollo__/types-query\"\nimport { Category } from \"../../__generated__/types\"\nimport { Modal, Form, Input, Button } from \"antd\"\nimport MinusCircleOutlined from \"@ant-design/icons/lib/icons/MinusCircleOutlined\"\nimport PlusOutlined from \"@ant-design/icons/lib/icons/PlusOutlined\"\n\ntype PropsCategoryAddForm = {\n  setIsOpenAddCategoryModal: (isOpen: Boolean) => void\n  isOpenAddCategoryModal: Boolean\n}\nconst CategoryAddForm: React.FC<PropsCategoryAddForm> = ({ setIsOpenAddCategoryModal, isOpenAddCategoryModal }) => {\n  const [addCategory, { data: daa_cat_data }] = useAddCategory(\n    {\n      // TODO:\n      // @ts-ignore\n      update(cache, { data: { addCategory } }) {\n        const { categoriesAll } = cache.readQuery<ICategoriesAll>({ query: ProductsAllDocument })!.categoriesAll\n        cache.writeQuery({\n          query: CategoriesAllDocument,\n          data: { categoriesAll: categoriesAll?.concat([addCategory]) }\n        })\n      },\n      refetchQueries: [{\n        query: CategoriesAllDocument\n      }]\n    }\n  )\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const [values, setValues] = useState<Category | any>({})\n\n  const onFinish = (valuefromformlist: Category) => {\n    const { name } = values\n    const { icons, images } = valuefromformlist\n\n    addCategory({\n      variables: {\n        name,\n        icons,\n        images\n      }\n    }).then(m => console.log(\"addCategory:\", m))\n      .catch(e => console.log(\"addCategoryERROR:\", e))\n\n    setIsOpenAddCategoryModal(false)\n  }\n  const handleCancel = () => {\n    setIsOpenAddCategoryModal(false)\n  }\n\n  const handleChange = (e: { target: HTMLInputElement }) => {\n    const { name, value } = e.target\n    console.log(\"target\", e.target)\n    setValues({ ...values, [name]: value })\n  }\n\n\n  return (\n    <Modal\n      title=\"Category information\"\n      visible={Boolean(isOpenAddCategoryModal)}\n      footer={false}\n      onCancel={handleCancel}\n    >\n      <Form\n        name=\"category\" {...formItemLayoutWithOutLabel}\n        // @ts-ignore\n        onFinish={onFinish}>\n        <Form.Item\n          label=\"Name category\"\n          rules={[{ required: true, message: \"Name category is required\" }]}\n        >\n          <Input\n            name=\"name\"\n            onChange={handleChange} placeholder=\"name category\"\n            style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n\n        <Form.List name=\"icons\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    label={index === 0 ? \"icons\" : \"\"}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      {...field}\n                      validateTrigger={[\"onChange\", \"onBlur\"]}\n                      rules={[\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"Please input icon url or delete this field.\"\n                        }\n                      ]}\n                      noStyle\n                    >\n                      <Input\n                        style={{ width: \"90%\", marginRight: 8 }}/>\n                    </Form.Item>\n\n                    {(fields.length >= 1) ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => {\n                          remove(field.name)\n                        }}\n                      />\n                    ) : <span/>}\n                  </Form.Item>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => {\n                      add()\n                    }}\n                    style={{ width: \"80%\" }}\n                  >\n                    <PlusOutlined/> Add icon url\n                  </Button>\n                </Form.Item>\n              </div>\n            )\n          }}\n        </Form.List>\n\n        <Form.List name=\"images\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    label={index === 0 ? \"Images\" : \"\"}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      {...field}\n                      validateTrigger={[\"onChange\", \"onBlur\"]}\n                      rules={[\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"Please input image url or delete this field.\"\n                        }\n                      ]}\n                      noStyle\n                    >\n                      <Input\n                        style={{ width: \"90%\", marginRight: 8 }}/>\n                    </Form.Item>\n\n                    {(fields.length >= 1) ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => {\n                          remove(field.name)\n                        }}\n                      />\n                    ) : <span/>}\n                  </Form.Item>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => {\n                      add()\n                    }}\n                    style={{ width: \"80%\" }}\n                  >\n                    <PlusOutlined/> Add image url\n                  </Button>\n                </Form.Item>\n              </div>\n            )\n          }}\n        </Form.List>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    </Modal>\n  )\n}\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 4 }\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 20 }\n  }\n}\n\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: { span: 24, offset: 0 },\n    sm: { span: 20, offset: 4 }\n  }\n}\n\ninterface StateProps {\n  isOpenAddCategoryModal: Boolean\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  isOpenAddCategoryModal: state.add_cat_modal.isOpen\n})\n\nexport default connect<typeof CategoryAddForm>(\n  // TODO:\n// @ts-ignore\n  mapStateToProps,\n  { setIsOpenAddCategoryModal }\n)(CategoryAddForm)","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type UpdateCategoryVariables = {\n  id: Types.Scalars['ID'];\n  name: Types.Scalars['String'];\n  images?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  icons?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n};\n\n\nexport type UpdateCategory = (\n  { __typename: 'Mutation' }\n  & { updateCategory?: Types.Maybe<(\n    { __typename: 'Category' }\n    & Pick<Types.Category, 'id' | 'images' | 'icons'>\n  )> }\n);\n\n\nexport const UpdateCategoryDocument = gql`\n    mutation UpdateCategory($id: ID!, $name: String!, $images: [String], $icons: [String]) {\n  updateCategory(id: $id, name: $name, images: $images, icons: $icons) {\n    id\n    images\n    icons\n  }\n}\n    `;\nexport type UpdateCategoryMutationFn = ApolloReactCommon.MutationFunction<UpdateCategory, UpdateCategoryVariables>;\n\n/**\n * __useUpdateCategory__\n *\n * To run a mutation, you first call `useUpdateCategory` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateCategory` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateCategory, { data, loading, error }] = useUpdateCategory({\n *   variables: {\n *      id: // value for 'id'\n *      name: // value for 'name'\n *      images: // value for 'images'\n *      icons: // value for 'icons'\n *   },\n * });\n */\nexport function useUpdateCategory(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateCategory, UpdateCategoryVariables>) {\n        return ApolloReactHooks.useMutation<UpdateCategory, UpdateCategoryVariables>(UpdateCategoryDocument, baseOptions);\n      }\nexport type UpdateCategoryHookResult = ReturnType<typeof useUpdateCategory>;\nexport type UpdateCategoryMutationResult = ApolloReactCommon.MutationResult<UpdateCategory>;\nexport type UpdateCategoryMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateCategory, UpdateCategoryVariables>;","import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\nimport { RootState } from \"../../reducer\"\nimport { clearEditCategory, clearEditProduct, setIsOpenEditCategoryModal } from \"../../actions\"\nimport { Button, Form, Input, Modal } from \"antd\"\nimport { useUpdateCategory } from \"../Categories/mutations/__generated__/UpdateCategory\"\nimport { ProductCatId } from \"../../__generated__apollo__/types-query\"\nimport MinusCircleOutlined from \"@ant-design/icons/lib/icons/MinusCircleOutlined\"\nimport PlusOutlined from \"@ant-design/icons/lib/icons/PlusOutlined\"\nimport { priceStringToIntCent } from \"../../utils/utils\"\nimport { Category } from \"../../__generated__/types\"\nimport { CategoriesAllDocument } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { ProductsAllDocument } from \"../Products/queries/__generated__/ProductsAll\"\n\ntype PropsCategoryEditForm = {\n  setIsOpenEditCategoryModal: (isOpen: Boolean) => void\n  isOpenEditCategoryModal: Boolean\n  edited_category: Category\n}\nconst CategoryEditForm: React.FC<PropsCategoryEditForm> = ({ edited_category, setIsOpenEditCategoryModal, isOpenEditCategoryModal }) => {\n  const [formEditCategory] = Form.useForm()\n  const [updateCategory, {}] = useUpdateCategory({\n    refetchQueries: [\n      {\n        query: CategoriesAllDocument\n      },\n      {\n        query: ProductsAllDocument\n      }\n    ]\n  })\n  const [values, setValues] = useState<Category | any>({})\n  useEffect(() => {\n    setValues(edited_category)\n  }, [edited_category])\n  useEffect(() => {\n    formEditCategory.setFieldsValue({\n      \"name\": edited_category.name,\n      \"icons\": edited_category.icons,\n      \"images\": edited_category.images\n    })\n    return () => {\n      formEditCategory.resetFields()\n    }\n  }, [edited_category])\n\n  const onFinish = (valuefromformlist: Category) => {\n    const { name, images, icons } = valuefromformlist\n    const id = String(values?.id)\n\n    updateCategory({\n      variables: {\n        id, name, images, icons\n      }\n    }).then(m => console.log(\"updateProductMESSAGE:\", m))\n      .catch(e => console.log(\"updateProductERROR:\", e))\n\n    setIsOpenEditCategoryModal(false)\n  }\n  const handleCancel = () => {\n    setIsOpenEditCategoryModal(false)\n    // clearEditCategory()\n  }\n  const handleChange = (e: { target: HTMLInputElement }) => {\n    const { name, value } = e.target\n    setValues({ ...values, [name]: value })\n  }\n  return (\n    <Modal\n      title={`Category information id: ${values.id}`}\n      visible={Boolean(isOpenEditCategoryModal)}\n      footer={false}\n      onCancel={handleCancel}\n    >\n      <Form\n        form={formEditCategory}\n        name=\"category\" {...formItemLayoutWithOutLabel}\n        // TODO:\n        // @ts-ignore\n        onFinish={onFinish}>\n        <Form.Item\n          label=\"Name category\"\n          name=\"name\"\n          // TODO:\n          // @ts-ignore\n          value={String(values?.name)}\n          rules={[{ required: true, message: \"Name category is required\" }]}\n        >\n          <Input\n            onChange={handleChange} placeholder=\"name category\"\n            style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n        <Form.List name=\"icons\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    label={index === 0 ? \"icons\" : \"\"}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      {...field}\n                      validateTrigger={[\"onChange\", \"onBlur\"]}\n                      rules={[\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"Please input icons url or delete this field.\"\n                        }\n                      ]}\n                      noStyle\n                    >\n                      <Input value={values.icons[index]} placeholder=\"icon url\"\n                             style={{ width: \"90%\", marginRight: 8 }}/>\n                    </Form.Item>\n                    {fields.length > 1 ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => {\n                          remove(field.name)\n                        }}\n                      />\n                    ) : <span/>}\n                  </Form.Item>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => {\n                      add()\n                    }}\n                    style={{ width: \"80%\" }}\n                  >\n                    <PlusOutlined/> Add icon url\n                  </Button>\n                </Form.Item>\n              </div>\n            )\n          }}\n        </Form.List>\n        <Form.List name=\"images\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    label={index === 0 ? \"Images\" : \"\"}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      {...field}\n                      validateTrigger={[\"onChange\", \"onBlur\"]}\n                      rules={[\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"Please input image url or delete this field.\"\n                        }\n                      ]}\n                      noStyle\n                    >\n                      <Input value={values.images[index]} placeholder=\"image url\"\n                             style={{ width: \"90%\", marginRight: 8 }}/>\n                    </Form.Item>\n                    {fields.length > 1 ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => {\n                          remove(field.name)\n                        }}\n                      />\n                    ) : <span/>}\n                  </Form.Item>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => {\n                      add()\n                    }}\n                    style={{ width: \"80%\" }}\n                  >\n                    <PlusOutlined/> Add image url\n                  </Button>\n                </Form.Item>\n              </div>\n            )\n          }}\n        </Form.List>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    </Modal>\n  )\n}\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 4 }\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 20 }\n  }\n}\n\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: { span: 24, offset: 0 },\n    sm: { span: 20, offset: 4 }\n  }\n}\n\ninterface StateProps {\n  isOpenEditCategoryModal: Boolean\n  edited_category?: Category | {}\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  isOpenEditCategoryModal: state.edit_cat_modal.isOpen,\n  edited_category: state.edit_category.category\n})\n\nexport default connect<typeof CategoryEditForm>(\n  // TODO:\n// @ts-ignore\n  mapStateToProps,\n  { setIsOpenEditCategoryModal, clearEditCategory }\n)(CategoryEditForm)","import React from \"react\"\nimport { Button, Tooltip } from \"antd\"\nimport { PlusOutlined } from \"@ant-design/icons\"\nimport CategoriesTable from \"../CategoriesTable\"\nimport { connect } from \"react-redux\"\nimport { setIsOpenAddCategoryModal } from \"../../actions\"\nimport CategoryAddForm from \"../CategoryAddForm\"\nimport ProductEditForm from \"../ProductEditForm\"\nimport CategoryEditForm from \"../CategoryEditForm\"\n\nexport interface PropsCategories {\n  setIsOpenAddCategoryModal: (isOpen: Boolean) => void\n}\n\nconst Categories: React.FC<PropsCategories> = ({ setIsOpenAddCategoryModal }) => {\n  const onClickHandler = () => {\n    setIsOpenAddCategoryModal(true)\n  }\n\n  return (\n    <>\n      <h1>Categories</h1>\n      <CategoriesTable/>\n      <CategoryEditForm/>\n      <CategoryAddForm/>\n      <Tooltip title=\"Add Category\">\n        <Button\n          onClick={onClickHandler}\n          type=\"dashed\" shape=\"circle\"\n          style={{ position: \"fixed\", bottom: \"50px\", right: \"50px\", color: \"#08c\" }}\n        ><PlusOutlined\n          style={{ fontSize: \"22px\", color: \"#08c\" }}\n        /></Button>\n      </Tooltip>\n    </>\n  )\n}\n\nexport default connect<typeof Categories>(null, { setIsOpenAddCategoryModal })(Categories)","export const priceStringToIntCent = (str: string) => {\n  return Math.round(100 * parseFloat(str.replace(/[$,]/g, '')));\n}\nexport const priceToDollars = (price: any) => {\n  return Number(price / 100)\n    .toLocaleString(\"en-US\", { style: \"currency\", currency: \"USD\" })\n}\n\nexport function toArray<T>(candidate?: T | T[] | false): T[] {\n  if (candidate === undefined || candidate === false) return [];\n\n  return Array.isArray(candidate) ? candidate : [candidate];\n}\n","import React from \"react\"\nimport { Category, CategoryRequireIcons } from \"../../actions/types\"\nimport { priceToDollars } from \"../../utils/utils\"\nimport { Button, Table, Tooltip } from \"antd\"\nimport DeleteOutlined from \"@ant-design/icons/lib/icons/DeleteOutlined\"\nimport { IproductsByCategoryId } from \"../../__generated__apollo__/types-query\"\n\nconst styleImagesInTable = { width: \"50px\", height: \"100%\", marginRight: \"10px\" }\nconst styleIconInTable = { width: \"20px\", height: \"100%\", marginRight: \"10px\" }\n\ninterface PropsProductsTableAntd {\n  handleEditProp: (id: String) => void\n  handleDeleteProp: (id: String) => void\n  productsAllWithoutRecycleBinProp: IproductsByCategoryId\n}\n\nconst ProductsTableAntd: React.FC<PropsProductsTableAntd> = ({ handleEditProp, handleDeleteProp, productsAllWithoutRecycleBinProp }) => {\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\"\n    },\n    {\n      title: \"ID\",\n      dataIndex: \"id\",\n      key: \"id\"\n    },\n    {\n      title: \"Price\",\n      dataIndex: \"price\",\n      key: \"price\",\n      render: (price: Number) => {\n        return priceToDollars(price)\n      }\n    },\n    {\n      title: \"Category\",\n      dataIndex: \"category\",\n      key: \"category\",\n      render: (category: CategoryRequireIcons) => {\n        const { name, icons, id } = category\n        return (\n          <div>\n            <span>{name} </span>\n            {\n              (icons?.length !== 0)\n                ? <img\n                  key={String(icons[0])}\n                  alt=\"img\"\n                  src={String(icons[0])} style={styleIconInTable}/> : \"\"\n            }\n            <span> {id} </span>\n          </div>)\n      }\n    },\n    {\n      title: \"Images\",\n      dataIndex: \"images\",\n      key: \"images\",\n      render: (images: String[]) => {\n        return (images)\n          ? <div>\n            {\n              images\n                .map((image, index) => <img\n                  key={String(`${image}+${index}`)}\n                  alt=\"img\"\n                  src={String(image)}\n                  style={styleImagesInTable}/>\n                )\n            }\n          </div>\n          : <span>no  images</span>\n      }\n    },\n    {\n      title: \"Actions\",\n      dataIndex: \"id\",\n      key: \"id\",\n      render: (id: String) => <>\n        <Tooltip title=\"Edit this product\">\n          <Button onClick={() => handleEditProp(id)}\n                  type=\"dashed\">\n            Edit\n          </Button>\n        </Tooltip>\n        <Tooltip\n          title=\"Move to recycle bin\">\n          <Button style={{ float: \"right\" }}\n                  onClick={() => handleDeleteProp(id)}\n                  type=\"dashed\"\n                  danger\n                  icon={<DeleteOutlined/>}>\n          </Button>\n        </Tooltip>\n      </>\n    }\n  ]\n  return (\n    <>\n      <Table\n        // TODO:\n        // @ts-ignore\n        dataSource={productsAllWithoutRecycleBinProp}\n        columns={columns}\n        rowKey=\"id\"/>\n    </>\n  )\n}\n\nexport default ProductsTableAntd","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type UpdateProductVariables = {\n  id: Types.Scalars['ID'];\n  name: Types.Scalars['String'];\n  price: Types.Scalars['Float'];\n  categoryId: Types.Scalars['ID'];\n  images?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  icon?: Types.Maybe<Types.Scalars['String']>;\n};\n\n\nexport type UpdateProduct = (\n  { __typename: 'Mutation' }\n  & { updateProduct?: Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon'>\n    & { category?: Types.Maybe<(\n      { __typename: 'Category' }\n      & Pick<Types.Category, 'id' | 'name' | 'icons'>\n    )> }\n  )> }\n);\n\n\nexport const UpdateProductDocument = gql`\n    mutation UpdateProduct($id: ID!, $name: String!, $price: Float!, $categoryId: ID!, $images: [String], $icon: String) {\n  updateProduct(id: $id, name: $name, price: $price, categoryId: $categoryId, images: $images, icon: $icon) {\n    id\n    name\n    price\n    images\n    icon\n    category {\n      id\n      name\n      icons\n    }\n  }\n}\n    `;\nexport type UpdateProductMutationFn = ApolloReactCommon.MutationFunction<UpdateProduct, UpdateProductVariables>;\n\n/**\n * __useUpdateProduct__\n *\n * To run a mutation, you first call `useUpdateProduct` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProduct` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProduct, { data, loading, error }] = useUpdateProduct({\n *   variables: {\n *      id: // value for 'id'\n *      name: // value for 'name'\n *      price: // value for 'price'\n *      categoryId: // value for 'categoryId'\n *      images: // value for 'images'\n *      icon: // value for 'icon'\n *   },\n * });\n */\nexport function useUpdateProduct(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateProduct, UpdateProductVariables>) {\n        return ApolloReactHooks.useMutation<UpdateProduct, UpdateProductVariables>(UpdateProductDocument, baseOptions);\n      }\nexport type UpdateProductHookResult = ReturnType<typeof useUpdateProduct>;\nexport type UpdateProductMutationResult = ApolloReactCommon.MutationResult<UpdateProduct>;\nexport type UpdateProductMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateProduct, UpdateProductVariables>;","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type ProductsByCategoryIdVariables = {\n  categoryId: Types.Scalars['ID'];\n};\n\n\nexport type ProductsByCategoryId = (\n  { __typename: 'Query' }\n  & { productsByCategoryId?: Types.Maybe<Array<Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon'>\n    & { category?: Types.Maybe<(\n      { __typename: 'Category' }\n      & Pick<Types.Category, 'id' | 'name' | 'icons'>\n    )> }\n  )>>> }\n);\n\n\nexport const ProductsByCategoryIdDocument = gql`\n    query ProductsByCategoryId($categoryId: ID!) {\n  productsByCategoryId(categoryId: $categoryId) {\n    id\n    name\n    price\n    images\n    icon\n    category {\n      id\n      name\n      icons\n    }\n  }\n}\n    `;\n\n/**\n * __useProductsByCategoryId__\n *\n * To run a query within a React component, call `useProductsByCategoryId` and pass it any options that fit your needs.\n * When your component renders, `useProductsByCategoryId` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProductsByCategoryId({\n *   variables: {\n *      categoryId: // value for 'categoryId'\n *   },\n * });\n */\nexport function useProductsByCategoryId(baseOptions?: ApolloReactHooks.QueryHookOptions<ProductsByCategoryId, ProductsByCategoryIdVariables>) {\n        return ApolloReactHooks.useQuery<ProductsByCategoryId, ProductsByCategoryIdVariables>(ProductsByCategoryIdDocument, baseOptions);\n      }\nexport function useProductsByCategoryIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProductsByCategoryId, ProductsByCategoryIdVariables>) {\n          return ApolloReactHooks.useLazyQuery<ProductsByCategoryId, ProductsByCategoryIdVariables>(ProductsByCategoryIdDocument, baseOptions);\n        }\nexport type ProductsByCategoryIdHookResult = ReturnType<typeof useProductsByCategoryId>;\nexport type ProductsByCategoryIdLazyQueryHookResult = ReturnType<typeof useProductsByCategoryIdLazyQuery>;\nexport type ProductsByCategoryIdQueryResult = ApolloReactCommon.QueryResult<ProductsByCategoryId, ProductsByCategoryIdVariables>;","import React, { useState } from \"react\"\nimport { Modal } from \"antd\"\nimport { connect } from \"react-redux\"\nimport { editProduct, setIsOpenEditProductModal } from \"../../actions\"\nimport { Product, ProductCatId } from \"../../__generated__apollo__/types-query\"\nimport { PropsProductsTable } from \"../Products/types\"\n\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\n\nimport ProductsTableAntd from \"./ProductsTableAntd\"\nimport { useProductsAll } from \"../Products/queries/__generated__/ProductsAll\"\nimport { useUpdateProduct } from \"../Products/mutations/__generated__/UpdateProduct\"\nimport { ProductsByCategoryIdDocument } from \"../Products/queries/__generated__/ProductsByCategoryId\"\n\nconst ProductsTable: React.FC<PropsProductsTable> = ({ editProduct, setIsOpenEditProductModal }) => {\n  const { loading, error, data } = useProductsAll()\n  const [updateProduct, {}] = useUpdateProduct(\n    {\n      refetchQueries: [{\n        query: ProductsByCategoryIdDocument,\n        variables: {\n          categoryId: REACT_APP_RECYCLE_BIN_ID\n        }\n      }]\n    }\n  )\n  const [isVisualDeleteModal, setIsVisualDeleteModal] = useState<Boolean>(false)\n  const [productDeleted, setProductDeleted] = useState<Product | any>({})\n  console.log(\"productDeleted\", productDeleted)\n  if (loading) {\n    return (<div>Loading...</div>)\n  }\n  if (error || !data) {\n    return (<div>Error...</div>)\n  }\n  const { productsAll } = data\n  // TODO:\n  // @ts-ignore\n  const productsAllWithoutRecycleBin = productsAll?.filter((prod: Product) => {\n    return prod?.category?.id !== REACT_APP_RECYCLE_BIN_ID\n  })\n\n  const handleEdit = (id: String): void => {\n    const prod = productsAllWithoutRecycleBin?.find((prod: Product) => prod.id === id)\n    editProduct(prod)\n    setIsOpenEditProductModal(true)\n  }\n\n  const handleDelete = (id: String): void => {\n    setIsVisualDeleteModal(true)\n    setProductDeleted(productsAllWithoutRecycleBin.find((prod: Product) => prod.id === id))\n  }\n\n  const handleOk = (productDeleted: ProductCatId | any): void => {\n    const { id, name, price, images, icon } = productDeleted\n    const categoryId = REACT_APP_RECYCLE_BIN_ID\n\n    updateProduct({\n      variables: {\n        id, name, price, categoryId, images, icon\n      }\n    }).then(m => console.log(\"updateProductMESSAGE:\", m))\n      .catch((e: Error) => console.log(\"updateProductERROR:\", e))\n\n    setIsVisualDeleteModal(false)\n  }\n\n  const handleCancel = () => {\n    setIsVisualDeleteModal(false)\n  }\n\n  return (\n    <>\n      <ProductsTableAntd productsAllWithoutRecycleBinProp={productsAllWithoutRecycleBin}\n                         handleEditProp={handleEdit}\n                         handleDeleteProp={handleDelete}/>\n      <Modal\n        title=\"Delete product in recycle bin?\"\n        visible={Boolean(isVisualDeleteModal)}\n        onOk={() => handleOk(productDeleted)}\n        onCancel={handleCancel}\n      >\n        <p>{productDeleted.id}</p>\n      </Modal>\n    </>\n  )\n}\n\nexport default connect<typeof ProductsTable>(null, {\n  setIsOpenEditProductModal,\n  editProduct\n})(ProductsTable)","import React, { useEffect, useState } from \"react\"\nimport { Button, Form, Input, Modal, Select } from \"antd\"\nimport PlusOutlined from \"@ant-design/icons/lib/icons/PlusOutlined\"\nimport MinusCircleOutlined from \"@ant-design/icons/lib/icons/MinusCircleOutlined\"\nimport { connect } from \"react-redux\"\nimport { clearEditProduct, setIsOpenEditProductModal } from \"../../actions\"\nimport { priceStringToIntCent } from \"../../utils/utils\"\nimport { Product, ProductCatId } from \"../../__generated__apollo__/types-query\"\nimport { RootState } from \"../../reducer\"\nimport { useUpdateProduct } from \"../Products/mutations/__generated__/UpdateProduct\"\nimport { useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\n\ninterface PropsProductEditForm {\n  edited_product: Product\n  clearEditProduct: () => void\n  setIsOpenEditProductModal: (isOpen: Boolean) => void\n  isOpenEditProductModal: Boolean\n}\n\nconst ProductEditForm: React.FC<PropsProductEditForm> = ({ clearEditProduct, edited_product, isOpenEditProductModal, setIsOpenEditProductModal }) => {\n  const [formEditProduct] = Form.useForm()\n  const [updateProduct, {}] = useUpdateProduct()\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const [values, setValues] = useState<ProductCatId | any>({})\n  useEffect(() => {\n    setValues(edited_product)\n  }, [edited_product])\n  useEffect(() => {\n    formEditProduct.setFieldsValue({\n      \"name\": edited_product.name,\n      \"price\": edited_product.price,\n      \"images\": edited_product.images,\n      \"icon\": edited_product.icon\n    })\n    return () => {\n      formEditProduct.resetFields()\n    }\n  }, [edited_product])\n\n  const onFinish = (valuefromformlist: ProductCatId) => {\n    const { name, categoryId, images, icon } = valuefromformlist\n    const id = String(values?.id)\n    const price = priceStringToIntCent(String(valuefromformlist.price))\n\n    updateProduct({\n      variables: {\n        id, name, price, categoryId: String(categoryId), images, icon\n      }\n    }).then(m => console.log(\"updateProductMESSAGE:\", m))\n      .catch(e => console.log(\"updateProductERROR:\", e))\n    setIsOpenEditProductModal(false)\n  }\n  const handleCancel = () => {\n    setIsOpenEditProductModal(false)\n    clearEditProduct()\n  }\n  const handleChange = (e: { target: HTMLInputElement }) => {\n    const { name, value } = e.target\n    setValues({ ...values, [name]: value })\n  }\n  if (cat_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (cat_error || !cat_data) {\n    return (<div>Error...</div>)\n  }\n  const { categoriesAll } = cat_data\n  const categoriesAllWithoutRecycleBin = categoriesAll?.filter((category) => {\n    return category?.id !== REACT_APP_RECYCLE_BIN_ID\n  })\n\n  return (\n    <Modal\n      title={`Product information id: ${values.id}`}\n      visible={Boolean(isOpenEditProductModal)}\n      footer={false}\n      onCancel={handleCancel}\n      // forceRender={true}\n      // destroyOnClose={false}\n    >\n\n      <Form\n        form={formEditProduct}\n        name=\"product\" {...formItemLayoutWithOutLabel}\n        // TODO:\n        // @ts-ignore\n        onFinish={onFinish}>\n\n        <Form.Item\n          label=\"Name product\"\n          name=\"name\"\n          // TODO:\n          // @ts-ignore\n          value={String(values?.name)}\n          rules={[{ required: true, message: \"Name product is required\" }]}\n        >\n          <Input\n\n            onChange={handleChange} placeholder=\"name product\"\n            style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n        <Form.Item\n          label=\"Price\"\n          name=\"price\"\n          // noStyle\n          rules={[{ required: true, message: \"Price is required\" }]}\n        >\n          <Input type=\"number\" placeholder=\"Price $\" style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n\n        <Form.Item\n          label=\"Category\"\n          name=\"categoryId\"\n          // TODO:\n          // @ts-ignore\n          onChange={handleChange}\n          rules={[{ required: true, message: \"Category is required\" }]}\n        >\n          <Select\n            placeholder=\"Select category\">\n            {categoriesAllWithoutRecycleBin?.map((category) =>\n              <Select.Option\n                key={String(category?.id)}\n                firstActiveValue=\"nike\"\n                value={String(category?.id)}\n              >{String(category?.name)}\n              </Select.Option>\n            )\n            }\n          </Select>\n        </Form.Item>\n\n        <Form.List name=\"images\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    label={index === 0 ? \"Images\" : \"\"}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      {...field}\n                      validateTrigger={[\"onChange\", \"onBlur\"]}\n                      rules={[\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"Please input image url or delete this field.\"\n                        }\n                      ]}\n                      noStyle\n                    >\n                      <Input value={values.images[index]} placeholder=\"image url\"\n                             style={{ width: \"90%\", marginRight: 8 }}/>\n                    </Form.Item>\n                    {fields.length > 1 ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => {\n                          remove(field.name)\n                        }}\n                      />\n                    ) : <span/>}\n                  </Form.Item>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => {\n                      add()\n                    }}\n                    style={{ width: \"80%\" }}\n                  >\n                    <PlusOutlined/> Add image url\n                  </Button>\n                </Form.Item>\n              </div>\n            )\n          }}\n        </Form.List>\n        <Form.Item\n          label=\"Icon\"\n          name=\"icon\"\n          // noStyle\n        >\n          <Input onChange={handleChange} placeholder=\"icon url\" style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    </Modal>\n  )\n}\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 4 }\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 20 }\n  }\n}\n\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: { span: 24, offset: 0 },\n    sm: { span: 20, offset: 4 }\n  }\n}\n\ninterface StateProps {\n  isOpenEditProductModal: Boolean\n  edited_product?: Product | {}\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  isOpenEditProductModal: state.edit_product_modal.isOpen,\n  edited_product: state.edit_product.product\n})\n\nexport default connect<typeof ProductEditForm>(\n  // TODO:\n// @ts-ignore\n  mapStateToProps,\n  { setIsOpenEditProductModal, clearEditProduct }\n)(ProductEditForm)","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type AddProductVariables = {\n  name: Types.Scalars['String'];\n  price: Types.Scalars['Float'];\n  categoryId: Types.Scalars['ID'];\n  images?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  icon?: Types.Maybe<Types.Scalars['String']>;\n};\n\n\nexport type AddProduct = (\n  { __typename: 'Mutation' }\n  & { addProduct?: Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon'>\n    & { category?: Types.Maybe<(\n      { __typename: 'Category' }\n      & Pick<Types.Category, 'id' | 'name' | 'icons'>\n    )> }\n  )> }\n);\n\n\nexport const AddProductDocument = gql`\n    mutation AddProduct($name: String!, $price: Float!, $categoryId: ID!, $images: [String], $icon: String) {\n  addProduct(name: $name, price: $price, categoryId: $categoryId, images: $images, icon: $icon) {\n    id\n    name\n    price\n    images\n    icon\n    category {\n      id\n      name\n      icons\n    }\n  }\n}\n    `;\nexport type AddProductMutationFn = ApolloReactCommon.MutationFunction<AddProduct, AddProductVariables>;\n\n/**\n * __useAddProduct__\n *\n * To run a mutation, you first call `useAddProduct` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProduct` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProduct, { data, loading, error }] = useAddProduct({\n *   variables: {\n *      name: // value for 'name'\n *      price: // value for 'price'\n *      categoryId: // value for 'categoryId'\n *      images: // value for 'images'\n *      icon: // value for 'icon'\n *   },\n * });\n */\nexport function useAddProduct(baseOptions?: ApolloReactHooks.MutationHookOptions<AddProduct, AddProductVariables>) {\n        return ApolloReactHooks.useMutation<AddProduct, AddProductVariables>(AddProductDocument, baseOptions);\n      }\nexport type AddProductHookResult = ReturnType<typeof useAddProduct>;\nexport type AddProductMutationResult = ApolloReactCommon.MutationResult<AddProduct>;\nexport type AddProductMutationOptions = ApolloReactCommon.BaseMutationOptions<AddProduct, AddProductVariables>;","import React, { useState } from \"react\"\nimport { Button, Form, Input, Modal, Select } from \"antd\"\nimport PlusOutlined from \"@ant-design/icons/lib/icons/PlusOutlined\"\nimport MinusCircleOutlined from \"@ant-design/icons/lib/icons/MinusCircleOutlined\"\nimport { connect } from \"react-redux\"\nimport { setIsOpenAddProductModal } from \"../../actions\"\nimport { priceStringToIntCent } from \"../../utils/utils\"\nimport {\n  REACT_APP_NO_IMAGE_AVAILABLE, REACT_APP_RECYCLE_BIN_ID\n} from \"../../actions/types\"\nimport { RootState } from \"../../reducer\"\nimport { IProductsAll } from \"../Products/types\"\nimport { useAddProduct } from \"../Products/mutations/__generated__/AddProduct\"\nimport { ProductsAllDocument } from \"../Products/queries/__generated__/ProductsAll\"\nimport { ProductCatId } from \"../../__generated__apollo__/types-query\"\nimport { useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\n\ntype PropsProductAddForm = {\n  setIsOpenAddProductModal: (isOpen: Boolean) => void\n  isOpenAddProductModal: Boolean\n}\n\nconst ProductAddForm: React.FC<PropsProductAddForm> = ({ isOpenAddProductModal, setIsOpenAddProductModal }) => {\n  const [addProduct, {data: add_product_data}] = useAddProduct(\n    {\n      // TODO:\n      // @ts-ignore\n      update(cache, { data: { addProduct } }) {\n        const { productsAll } = cache.readQuery<IProductsAll>({ query: ProductsAllDocument })!.productsAll\n        cache.writeQuery({\n          query: ProductsAllDocument,\n          data: { productsAll: productsAll?.concat([addProduct]) }\n        })\n      },\n      refetchQueries: [{\n        query: ProductsAllDocument\n      }]\n    }\n  )\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const [values, setValues] = useState<ProductCatId | any>({})\n  console.log(\"values+++\", values)\n\n  const onFinish = (valuefromformlist: ProductCatId) => {\n    console.log(\"Received values of form:\", values)\n\n    const { name, categoryId, icon } = values\n    const price = priceStringToIntCent(values.price)\n    console.log(\"onFinish\")\n    addProduct({\n      variables: {\n        name,\n        price,\n        categoryId,\n        images: !valuefromformlist.images ? [REACT_APP_NO_IMAGE_AVAILABLE] : valuefromformlist.images,\n        icon\n      }\n    }).then(m => console.log(\"addProduct:\", m))\n      .catch(e => console.log(\"addProductERROR:\", e))\n\n    setIsOpenAddProductModal(false)\n  }\n\n  const handleCancel = () => {\n    setIsOpenAddProductModal(false)\n  }\n\n  const handleChange = (e: { target: HTMLInputElement }) => {\n    const { name, value } = e.target\n    console.log(\"target\", e.target)\n    setValues({ ...values, [name]: value })\n  }\n\n  const handleChangeSelect = (value: string) => {\n    setValues({ ...values, \"categoryId\": value })\n  }\n\n  if (cat_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (cat_error || !cat_data) {\n    return (<div>Error...</div>)\n  }\n  const { categoriesAll } = cat_data\n  const categoriesAllWithoutRecycleBin = categoriesAll?.filter((category) => {\n    return category?.id !== REACT_APP_RECYCLE_BIN_ID\n  })\n  console.log(\"isOpenAddProductModal\", isOpenAddProductModal)\n\n  return (\n    <Modal\n      title=\"Product information\"\n      visible={Boolean(isOpenAddProductModal)}\n      footer={false}\n      onCancel={handleCancel}\n      // forceRender={true}\n      // destroyOnClose={true}\n      // okButtonProps={{htmlType: \"submit\" }}\n      // cancelButtonProps={{ htmlType: \"submit\" }}\n    >\n      <Form\n        // onChange={handleChange}\n        name=\"product\" {...formItemLayoutWithOutLabel}\n        // @ts-ignore\n        onFinish={onFinish}>\n        <Form.Item\n          label=\"Name product\"\n          rules={[{ required: true, message: \"Name product is required\" }]}\n        >\n          <Input\n            name=\"name\"\n            onChange={handleChange} placeholder=\"name product\"\n            style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n        <Form.Item\n          label=\"Price\"\n          rules={[{ required: true, message: \"Price is required\" }]}\n        >\n          <Input\n            name=\"price\"\n            onChange={handleChange}\n            type=\"number\" placeholder=\"Price $\" style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n\n        <Form.Item\n          label=\"Category\"\n          name=\"categoryId\"\n          // noStyle\n          rules={[{ required: true, message: \"Category is required\" }]}\n        >\n          <Select\n            onChange={handleChangeSelect}\n            placeholder=\"Select category\">\n            {categoriesAllWithoutRecycleBin?.map((category) =>\n              <Select.Option\n                key={String(category?.id)}\n                value={String(category?.id)}\n                onChange={handleChange}\n              >{String(category?.name)}\n              </Select.Option>\n            )\n            }\n          </Select>\n        </Form.Item>\n\n        <Form.List name=\"images\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    label={index === 0 ? \"Images\" : \"\"}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      {...field}\n                      validateTrigger={[\"onChange\", \"onBlur\"]}\n                      rules={[\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"Please input image url or delete this field.\"\n                        }\n                      ]}\n                      noStyle\n                    >\n                      <Input\n                        style={{ width: \"90%\", marginRight: 8 }}/>\n                    </Form.Item>\n\n                    {(fields.length >= 1) ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => {\n                          remove(field.name)\n                        }}\n                      />\n                    ) : <span/>}\n                  </Form.Item>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => {\n                      add()\n                    }}\n                    style={{ width: \"80%\" }}\n                  >\n                    <PlusOutlined/> Add image url\n                  </Button>\n                </Form.Item>\n              </div>\n            )\n          }}\n        </Form.List>\n        <Form.Item\n          label=\"Icon\"\n          name=\"icon\"\n          // noStyle\n        >\n          <Input onChange={handleChange} placeholder=\"icon url\" style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form>\n\n    </Modal>\n  )\n}\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 4 }\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 20 }\n  }\n}\n\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: { span: 24, offset: 0 },\n    sm: { span: 20, offset: 4 }\n  }\n}\n\ninterface StateProps {\n  isOpenAddProductModal: Boolean\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  isOpenAddProductModal: state.add_product_modal.isOpen\n})\n\nexport default connect<typeof ProductAddForm>(\n  // TODO:\n// @ts-ignore\n  mapStateToProps,\n  { setIsOpenAddProductModal }\n)(ProductAddForm)","import React from \"react\"\nimport { Button, Tooltip } from \"antd\"\nimport { PlusOutlined } from \"@ant-design/icons\"\nimport ProductsTable from \"../ProductsTable\"\nimport ProductEditForm from \"../ProductEditForm\"\nimport ProductAddForm from \"../ProductAddForm\"\nimport { connect } from \"react-redux\"\nimport { clearEditProduct, setIsOpenAddProductModal } from \"../../actions\"\n\ninterface PropsProducts {\n  clearEditProduct: () => void\n  setIsOpenAddProductModal: (isOpen: Boolean) => void\n}\n\nconst Products: React.FC<PropsProducts> = ({ setIsOpenAddProductModal, clearEditProduct }) => {\n\n  const onClickHandler = () => {\n    clearEditProduct()\n    setIsOpenAddProductModal(true)\n  }\n\n  return (\n    <>\n      <h1>Products</h1>\n      <ProductsTable/>\n      <ProductEditForm/>\n      <ProductAddForm/>\n      <Tooltip title=\"Add Product\">\n        <Button onClick={onClickHandler} type=\"dashed\" shape=\"circle\"\n                style={{ position: \"fixed\", bottom: \"50px\", right: \"50px\", color: \"#08c\" }}\n        ><PlusOutlined\n          style={{ fontSize: \"22px\", color: \"#08c\" }}\n        /></Button>\n      </Tooltip>\n    </>\n  )\n}\n\nexport default connect<typeof Products>(null, { setIsOpenAddProductModal, clearEditProduct })(Products)","import React from \"react\"\nimport { CategoryRequireIcons } from \"../../actions/types\"\nimport { Product } from \"../../__generated__/types\"\n\ninterface PropsRecycleBinIcon {\n  categoryById: CategoryRequireIcons\n  productsByCategoryId: Product[]\n}\n\nconst RecycleBinIcon: React.FC<PropsRecycleBinIcon> = ({ categoryById, productsByCategoryId }): any => {\n  if (productsByCategoryId.length === 0) {\n    return <img src={String(categoryById.icons[0])} width={15} alt=\"recycle bin\"/>\n  } else if (productsByCategoryId.length > 0) {\n    return <img src={String(categoryById.icons[3])} width={15} alt=\"recycle bin\"/>\n  }\n}\n\nexport default RecycleBinIcon","import { gql } from \"apollo-boost\"\n\nexport const productsAllQuery = gql`\n    query productsAll{\n        productsAll{\n            id\n            name\n            price\n            images\n            icon\n            category{\n                id\n                name\n                icons\n            }\n        }\n    }\n`\nexport const productsByCategoryIdQuery = gql`\n    query productsByCategoryId($categoryId: ID!){\n        productsByCategoryId(categoryId: $categoryId){\n            id\n            name\n            price\n            images\n            icon\n            category{\n                id\n                name\n                icons\n            }\n        }\n    }\n`\n\n","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type DeleteProductVariables = {\n  id: Types.Scalars['ID'];\n};\n\n\nexport type DeleteProduct = (\n  { __typename: 'Mutation' }\n  & { deleteProduct?: Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon'>\n    & { category?: Types.Maybe<(\n      { __typename: 'Category' }\n      & Pick<Types.Category, 'id' | 'name' | 'icons'>\n    )> }\n  )> }\n);\n\n\nexport const DeleteProductDocument = gql`\n    mutation DeleteProduct($id: ID!) {\n  deleteProduct(id: $id) {\n    id\n    name\n    price\n    images\n    icon\n    category {\n      id\n      name\n      icons\n    }\n  }\n}\n    `;\nexport type DeleteProductMutationFn = ApolloReactCommon.MutationFunction<DeleteProduct, DeleteProductVariables>;\n\n/**\n * __useDeleteProduct__\n *\n * To run a mutation, you first call `useDeleteProduct` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProduct` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProduct, { data, loading, error }] = useDeleteProduct({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteProduct(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteProduct, DeleteProductVariables>) {\n        return ApolloReactHooks.useMutation<DeleteProduct, DeleteProductVariables>(DeleteProductDocument, baseOptions);\n      }\nexport type DeleteProductHookResult = ReturnType<typeof useDeleteProduct>;\nexport type DeleteProductMutationResult = ApolloReactCommon.MutationResult<DeleteProduct>;\nexport type DeleteProductMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteProduct, DeleteProductVariables>;","import React, { useState } from \"react\"\nimport { Button, Form, Modal, Select, Table, Tooltip } from \"antd\"\nimport { productsByCategoryIdQuery } from \"../Products/query\"\nimport { connect } from \"react-redux\"\nimport { clearEditProduct, editProduct } from \"../../actions\"\nimport { priceToDollars } from \"../../utils/utils\"\nimport { PropsUpdateProduct } from \"../Products/types\"\nimport {\n  Product,\n  ProductCatId\n} from \"../../__generated__apollo__/types-query\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\nimport { RootState } from \"../../reducer\"\nimport { useProductsByCategoryId } from \"../Products/queries/__generated__/ProductsByCategoryId\"\nimport { useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { useDeleteProduct } from \"../Products/mutations/__generated__/DeleteProduct\"\nimport { useUpdateProduct } from \"../Products/mutations/__generated__/UpdateProduct\"\nimport { MutationAddProductArgs } from \"../../__generated__/types\"\n\nconst styleImagesInTable = { width: \"50px\", height: \"100%\", marginRight: \"10px\" }\n\ninterface PropsRecycleBinProductsTable {\n  clearEditProduct: () => void\n  editProduct: (product: MutationAddProductArgs) => void\n  edited_product: MutationAddProductArgs\n}\n\nconst RecycleBinProductsTable: React.FC<PropsRecycleBinProductsTable> = ({\n                                                                           clearEditProduct,\n                                                                           editProduct,\n                                                                           edited_product\n                                                                         }) => {\n  const { loading: recycle_bin_prod_loading, error: recycle_bin_prod_error, data: recycle_bin_prod_data } = useProductsByCategoryId({\n    variables: {\n      categoryId: REACT_APP_RECYCLE_BIN_ID\n    }\n  })\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const [values, setValues] = useState({})\n  const [isVisualDeleteModal, setIsVisualDeleteModal] = useState(false)\n  const [isVisualRestoreModal, setIsVisualRestoreModal] = useState(false)\n  const [productDeleted, setProductDeleted] = useState<Product | any>({})\n  const [deleteProduct, {}] = useDeleteProduct({\n      refetchQueries: [{\n        query: productsByCategoryIdQuery,\n        variables: {\n          categoryId: REACT_APP_RECYCLE_BIN_ID\n        }\n      }]\n    }\n  )\n  const [updateProduct, {}] = useUpdateProduct({\n      refetchQueries: [{\n        query: productsByCategoryIdQuery,\n        variables: {\n          categoryId: REACT_APP_RECYCLE_BIN_ID\n        }\n      }]\n    }\n  )\n  if (cat_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (cat_error || !cat_data) {\n    return (<div>Error...</div>)\n  }\n  const { categoriesAll } = cat_data\n\n  const categoriesAllWithoutRecycleBin = categoriesAll?.filter((category) => {\n    return category?.id !== REACT_APP_RECYCLE_BIN_ID\n  })\n  console.log(\"productDeleted\", productDeleted)\n\n  if (recycle_bin_prod_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (recycle_bin_prod_error || !recycle_bin_prod_data) {\n    return (<div>Error...</div>)\n  }\n  const { productsByCategoryId } = recycle_bin_prod_data\n\n  console.log(\"productsByCategoryId\", recycle_bin_prod_data?.productsByCategoryId)\n  const onFinish = (valuefromformlist: ProductCatId) => {\n    console.log(\"Received values of form:\", values)\n\n    const { categoryId } = valuefromformlist\n\n    const { name, images, price, icon } = edited_product\n    // TODO:\n    // @ts-ignore\n    const id = String(edited_product.id)\n\n    console.log(\"onFinish\", valuefromformlist)\n    // TODO:\n    // @ts-ignore\n    updateProduct<PropsUpdateProduct>({\n      variables: {\n        id, name, price, categoryId, images, icon\n      }\n    }).then((m: String) => {\n        console.log(\"updateProductMESSAGE:\", m)\n      }\n    )\n      .catch((e: Error) => console.log(\"updateProductERROR:\", e))\n\n    setIsVisualRestoreModal(false)\n  }\n  const handleEdit = (id: String) => {\n    // TODO:\n    // @ts-ignore\n    editProduct(productsByCategoryId?.find((prod: Product) => prod.id === id))\n    setIsVisualRestoreModal(true)\n  }\n  const handleCancelRestore = () => {\n    clearEditProduct()\n    setIsVisualRestoreModal(false)\n  }\n\n  const handleDelete = (id: String) => {\n    setIsVisualDeleteModal(true)\n    // @ts-ignore\n    setProductDeleted(productsByCategoryId?.find((prod: Product) => prod.id === id))\n  }\n\n  const handleOk = (id: String) => {\n    console.log(\"productDeleted.id\", productDeleted.id)\n    deleteProduct({\n      variables: {\n        id: String(id)\n      }\n    }).then(mess => console.log(\"deleteProduct response:\", mess))\n    setIsVisualDeleteModal(false)\n  }\n\n  const handleCancel = () => {\n    setIsVisualDeleteModal(false)\n  }\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target\n    setValues({ ...values, [name]: value })\n  }\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\"\n    },\n    {\n      title: \"ID\",\n      dataIndex: \"id\",\n      key: \"id\"\n    },\n    {\n      title: \"Price\",\n      dataIndex: \"price\",\n      key: \"price\",\n      render: (price: Number) => {\n        return priceToDollars(price)\n      }\n    },\n    {\n      title: \"Images\",\n      dataIndex: \"images\",\n      key: \"images\",\n      render: (images: String[]) => {\n        return (images)\n          ? <div>\n            {\n              images\n                .map(image => <img\n                  key={String(image)}\n                  alt=\"img\"\n                  src={String(image)}\n                  style={styleImagesInTable}/>\n                )\n            }\n          </div>\n          : <span>no images</span>\n      }\n    },\n    {\n      title: \"Actions\",\n      dataIndex: \"id\",\n      key: \"id\",\n      render: (id: String) => <>\n        <Tooltip title=\"Recovery this product in any category\">\n          <Button onClick={() => handleEdit(id)} type=\"dashed\">\n            Recovery in category\n          </Button>\n        </Tooltip>\n        <Tooltip title=\"Delete forever\">\n          <Button onClick={() => handleDelete(id)} type=\"dashed\" danger>\n            Delete\n          </Button>\n        </Tooltip>\n      </>\n    }\n  ]\n\n  return (\n    <>\n      <Table\n        // TODO:\n        // @ts-ignore\n        dataSource={productsByCategoryId} columns={columns} rowKey=\"id\"/>\n      <Modal\n        title=\"Delete product?\"\n        visible={isVisualDeleteModal}\n        onOk={() => handleOk(productDeleted.id)}\n        onCancel={handleCancel}\n      >\n        <p>{productDeleted.name}</p>\n      </Modal>\n\n      <Modal\n        footer={false}\n        title=\"Restore in category?\"\n        visible={isVisualRestoreModal}\n        onCancel={handleCancelRestore}\n      >\n        <Form\n          name=\"restore\"\n          // TODO:\n          // @ts-ignore\n          onFinish={onFinish}>\n          <Form.Item\n            label=\"Category\"\n            name=\"categoryId\"\n            // TODO:\n            // @ts-ignore\n            onChange={handleChange}\n            rules={[{ required: true, message: \"Category is required\" }]}\n          >\n            <Select\n              placeholder=\"Select category\">\n              {categoriesAllWithoutRecycleBin?.map((category) =>\n                <Select.Option\n                  // TODO:\n                  // @ts-ignore\n                  key={category?.id}\n                >{category?.name}</Select.Option>\n              )\n              }\n            </Select>\n          </Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Restore\n          </Button>\n        </Form>\n      </Modal>\n    </>\n  )\n}\n\n\ninterface StateProps {\n  edited_product?: Product | {}\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  edited_product: state.edit_product.product\n})\n\nexport default connect<StateProps, typeof RecycleBinProductsTable>(\n  // TODO:\n  // @ts-ignore\n  mapStateToProps,\n  { editProduct, clearEditProduct })(RecycleBinProductsTable)\n","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type ClearRecycleBinVariables = {};\n\n\nexport type ClearRecycleBin = (\n  { __typename: 'Mutation' }\n  & { clearRecycleBin?: Types.Maybe<{ __typename: 'Product' }> }\n);\n\n\nexport const ClearRecycleBinDocument = gql`\n    mutation ClearRecycleBin {\n  clearRecycleBin {\n    __typename\n  }\n}\n    `;\nexport type ClearRecycleBinMutationFn = ApolloReactCommon.MutationFunction<ClearRecycleBin, ClearRecycleBinVariables>;\n\n/**\n * __useClearRecycleBin__\n *\n * To run a mutation, you first call `useClearRecycleBin` within a React component and pass it any options that fit your needs.\n * When your component renders, `useClearRecycleBin` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [clearRecycleBin, { data, loading, error }] = useClearRecycleBin({\n *   variables: {\n *   },\n * });\n */\nexport function useClearRecycleBin(baseOptions?: ApolloReactHooks.MutationHookOptions<ClearRecycleBin, ClearRecycleBinVariables>) {\n        return ApolloReactHooks.useMutation<ClearRecycleBin, ClearRecycleBinVariables>(ClearRecycleBinDocument, baseOptions);\n      }\nexport type ClearRecycleBinHookResult = ReturnType<typeof useClearRecycleBin>;\nexport type ClearRecycleBinMutationResult = ApolloReactCommon.MutationResult<ClearRecycleBin>;\nexport type ClearRecycleBinMutationOptions = ApolloReactCommon.BaseMutationOptions<ClearRecycleBin, ClearRecycleBinVariables>;","import React, { useState } from \"react\"\nimport RecycleBinProductsTable from \"../RecycleBinProductsTable\"\nimport { Button, Modal, Tooltip } from \"antd\"\nimport { DeleteOutlined } from \"@ant-design/icons\"\nimport { useClearRecycleBin } from \"../Products/mutations/__generated__/ClearRecycleBin\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\nimport { ProductsByCategoryIdDocument } from \"../Products/queries/__generated__/ProductsByCategoryId\"\n\nconst RecycleBin = () => {\n  const [isVisualDeleteModal, setIsVisualDeleteModal] = useState<Boolean>(false)\n  const [clearRecycleBin] = useClearRecycleBin(\n    {\n      refetchQueries: [{\n        query: ProductsByCategoryIdDocument,\n        variables: {\n          categoryId: REACT_APP_RECYCLE_BIN_ID\n        }\n      }]\n    }\n  )\n\n  const handleDelete = () => {\n    setIsVisualDeleteModal(true)\n  }\n  const handleOk = () => {\n    clearRecycleBin().then()\n    setIsVisualDeleteModal(false)\n  }\n\n  const handleCancel = () => {\n    setIsVisualDeleteModal(false)\n  }\n\n  return (\n    <>\n      <h1 style={{ display: \"inline-block\" }}>Recycle bin</h1>\n      <Tooltip title=\"Delete all products from recycle bin forever\">\n        <Button style={{ float: \"right\" }} onClick={handleDelete} type=\"dashed\" danger icon={<DeleteOutlined/>}>\n          Clear recycle bin\n        </Button>\n      </Tooltip>\n      <Modal\n        title=\"Clear recycle bin?\"\n        visible={Boolean(isVisualDeleteModal)}\n        onOk={handleOk}\n        onCancel={handleCancel}\n      >\n        <DeleteOutlined/>...\n      </Modal>\n      <RecycleBinProductsTable/>\n    </>\n  )\n}\n\nexport default RecycleBin","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type CategoryByIdVariables = {\n  id?: Types.Maybe<Types.Scalars['ID']>;\n};\n\n\nexport type CategoryById = (\n  { __typename: 'Query' }\n  & { categoryById?: Types.Maybe<(\n    { __typename: 'Category' }\n    & Pick<Types.Category, 'id' | 'name' | 'icons' | 'images'>\n  )> }\n);\n\n\nexport const CategoryByIdDocument = gql`\n    query CategoryById($id: ID) {\n  categoryById(id: $id) {\n    id\n    name\n    icons\n    images\n  }\n}\n    `;\n\n/**\n * __useCategoryById__\n *\n * To run a query within a React component, call `useCategoryById` and pass it any options that fit your needs.\n * When your component renders, `useCategoryById` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCategoryById({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useCategoryById(baseOptions?: ApolloReactHooks.QueryHookOptions<CategoryById, CategoryByIdVariables>) {\n        return ApolloReactHooks.useQuery<CategoryById, CategoryByIdVariables>(CategoryByIdDocument, baseOptions);\n      }\nexport function useCategoryByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CategoryById, CategoryByIdVariables>) {\n          return ApolloReactHooks.useLazyQuery<CategoryById, CategoryByIdVariables>(CategoryByIdDocument, baseOptions);\n        }\nexport type CategoryByIdHookResult = ReturnType<typeof useCategoryById>;\nexport type CategoryByIdLazyQueryHookResult = ReturnType<typeof useCategoryByIdLazyQuery>;\nexport type CategoryByIdQueryResult = ApolloReactCommon.QueryResult<CategoryById, CategoryByIdVariables>;","import React from \"react\"\nimport { Empty, Select, Tabs } from \"antd\"\nimport Categories from \"../Categories\"\nimport Products from \"../Products\"\nimport { Query } from \"react-apollo\"\nimport { useQuery } from \"@apollo/react-hooks\"\nimport { categoriesAllQuery, categoryByIdQuery } from \"../Categories/query\"\nimport { productsAllQuery, productsByCategoryIdQuery } from \"../Products/query\"\nimport AndroidOutlined from \"@ant-design/icons/lib/icons/AndroidOutlined\"\nimport RecycleBinIcon from \"../RecycleBinIcon\"\nimport RecycleBin from \"../RecycleBin\"\nimport { useProductsAll } from \"../Products/queries/__generated__/ProductsAll\"\nimport { useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { useProductsByCategoryId } from \"../Products/queries/__generated__/ProductsByCategoryId\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\nimport { useCategoryById } from \"../Categories/queries/__generated__/CategoryById\"\n\nconst { TabPane } = Tabs\n\nfunction callback(key: any) {\n  console.log(key)\n}\n\nconst TabsContainer: React.FC = () => {\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const { loading: prod_loading, error: prod_error, data: prod_data } = useProductsAll()\n  const { loading: recycle_bin_loading, error: recycle_bin_error, data: recycle_bin_data } = useProductsByCategoryId({\n    variables: {\n      categoryId: REACT_APP_RECYCLE_BIN_ID\n    }\n  })\n  const { loading: recycle_bin_prod_loading, error: recycle_bin_prod_error, data: recycle_bin_prod_data } = useProductsByCategoryId({\n    variables: {\n      categoryId: REACT_APP_RECYCLE_BIN_ID\n    }\n  })\n  const { loading: recycle_bin_cat_loading, error: recycle_bin_cat_error, data: recycle_bin_cat_data } = useCategoryById({\n    variables: {\n      id: REACT_APP_RECYCLE_BIN_ID\n    }\n  })\n  if (cat_loading || prod_loading || recycle_bin_prod_loading || recycle_bin_loading || recycle_bin_cat_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (cat_error || prod_error || recycle_bin_error || recycle_bin_prod_error || recycle_bin_cat_error || !cat_data || !prod_data || !recycle_bin_prod_data || !recycle_bin_cat_data || !recycle_bin_data) {\n    return (<div>Error.</div>)\n  }\n\n  const { productsByCategoryId } = recycle_bin_prod_data\n  const { categoryById } = recycle_bin_cat_data\n\n  return (\n    <Tabs defaultActiveKey=\"1\" onChange={callback}>\n      <Tabs.TabPane tab=\"Products\" key=\"1\">\n        <Products/>\n      </Tabs.TabPane>\n      <TabPane tab=\"Categories\" key=\"2\">\n        <Categories/>\n      </TabPane>\n      <TabPane tab={\n        <span>\n          <RecycleBinIcon\n            // TODO:\n            // @ts-ignore\n            categoryById={categoryById} productsByCategoryId={productsByCategoryId}/>\n          Recycle bin\n        </span>\n      } key=\"3\">\n        {(productsByCategoryId?.length === 0) ? <Empty/> : <RecycleBin/>}\n      </TabPane>\n\n    </Tabs>\n  )\n}\n\nexport default TabsContainer","import React from \"react\"\nimport TabsContainer from \"./components/TabsContainer\"\nimport \"antd/dist/antd.css\"\nimport \"./App.css\"\n\nconst App: React.FC = () => {\n  console.log(\"app.tsx\")\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          <code>APP</code>\n        </p>\n        <a\n          className=\"App-link\"\n          href={process.env.REACT_APP_BASE_URL}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          BASE_URL\n        </a>\n      </header>\n      <TabsContainer/>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ApolloClient from \"apollo-boost\"\nimport { InMemoryCache } from \"apollo-cache-inmemory\"\n\nconst cache = new InMemoryCache();\n\nexport const client = new ApolloClient({\n  cache,\n  uri: process.env.REACT_APP_BASE_URL,\n})\n","import { EditProductModalState, IS_OPEN_EDIT_PRODUCT_MODAL, setIsOpenEditProductModalAction } from \"../actions/types\"\n\nconst initialState: EditProductModalState = {\n  isOpen: false\n}\n\nexport default (state = initialState, action: setIsOpenEditProductModalAction): EditProductModalState => {\n  switch (action.type) {\n    case IS_OPEN_EDIT_PRODUCT_MODAL:\n      return {\n        ...state,\n        isOpen: action.payload\n      }\n    default:\n      return state\n  }\n}","import { AddProductModalState, setIsOpenAddProductModalAction, IS_OPEN_ADD_PRODUCT_MODAL } from \"../actions/types\"\n\nconst initialState: AddProductModalState = {\n  isOpen: false\n}\n\nexport default (state = initialState, action: setIsOpenAddProductModalAction): AddProductModalState => {\n  switch (action.type) {\n    case IS_OPEN_ADD_PRODUCT_MODAL:\n      return {\n        ...state,\n        isOpen: action.payload\n      }\n    default:\n      return state\n  }\n}","import { EditCategoryModalState, IS_OPEN_EDIT_CATEGORY_MODAL, setIsOpenEditCategoryModalAction } from \"../actions/types\"\n\nconst initialState: EditCategoryModalState = {\n  isOpen: false\n}\n\nexport default (state = initialState, action: setIsOpenEditCategoryModalAction): EditCategoryModalState => {\n  switch (action.type) {\n    case IS_OPEN_EDIT_CATEGORY_MODAL:\n      return {\n        ...state,\n        isOpen: action.payload\n      }\n    default:\n      return state\n  }\n}","import { AddCategoryModalState, IS_OPEN_ADD_CATEGORY_MODAL, setIsOpenAddCategoryModalAction } from \"../actions/types\"\n\nconst initialState: AddCategoryModalState = {\n  isOpen: false\n}\n\nexport default (state = initialState, action: setIsOpenAddCategoryModalAction): AddCategoryModalState => {\n  switch (action.type) {\n    case IS_OPEN_ADD_CATEGORY_MODAL:\n      return {\n        ...state,\n        isOpen: action.payload\n      }\n    default:\n      return state\n  }\n}","import { CLEAR_EDIT_PRODUCT, EDIT_PRODUCT, editProductAction, EditProductState } from \"../actions/types\"\n\nconst initialState: EditProductState = {\n  product: {}\n}\n\nexport default (state = initialState, action: editProductAction): EditProductState => {\n  switch (action.type) {\n    case EDIT_PRODUCT:\n      return {\n        ...state,\n        product: action.payload\n      }\n      case CLEAR_EDIT_PRODUCT:\n      return {\n        ...initialState\n      }\n    default:\n      return state\n  }\n}","import { CLEAR_EDIT_CATEGORY, EDIT_CATEGORY, editCategoryAction, EditCategoryState } from \"../actions/types\"\n\nconst initialState: EditCategoryState = {\n  category: {}\n}\n\nexport default (state = initialState, action: editCategoryAction): EditCategoryState => {\n  switch (action.type) {\n    case EDIT_CATEGORY:\n      return {\n        ...state,\n        category: action.payload\n      }\n      case CLEAR_EDIT_CATEGORY:\n      return {\n        ...initialState\n      }\n    default:\n      return state\n  }\n}","import { combineReducers } from \"redux\"\nimport edit_product_modal from \"./edit-prod-modal\"\nimport add_product_modal from \"./add-prod-modal\"\nimport edit_cat_modal from \"./edit-cat-modal\"\nimport add_cat_modal from \"./add-cat-modal\"\nimport edit_product from \"./edit-product\"\nimport edit_category from \"./edit-category\"\n\nexport const rootReducer = combineReducers({\n  add_cat_modal,\n  edit_cat_modal,\n  edit_product_modal,\n  add_product_modal,\n  edit_product,\n  edit_category\n})\n\nexport type RootState = ReturnType<typeof rootReducer>","import { createStore } from \"redux\";\nimport { rootReducer } from \"../reducer\"\nimport { composeWithDevTools } from \"redux-devtools-extension/logOnlyInProduction\"\n// const composeEnhancers =\n//   typeof window === \"object\" &&\n//   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n//     window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n//       // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n//     }) : compose;\n\nconst composeEnhancers = composeWithDevTools();\n\nconst store = createStore(rootReducer, {}, composeEnhancers);\n\nexport default store;","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport { ApolloProvider } from \"react-apollo\"\nimport { ApolloProvider as ApolloHooksProvider } from '@apollo/react-hooks'\n\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { client } from \"./store/apollo-client\"\nimport store from \"./store\"\n\nReactDOM.render(\n  <Provider store={store}>\n    <ApolloProvider client={client}>\n      <ApolloHooksProvider client={client}>\n      <App/>\n        </ApolloHooksProvider>\n    </ApolloProvider>\n  </Provider>, document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}