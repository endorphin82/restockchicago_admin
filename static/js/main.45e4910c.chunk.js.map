{"version":3,"sources":["actions/types.ts","actions/index.ts","utils/utils.ts","components/Products/mutations/__generated__/AddProduct.tsx","components/Products/queries/__generated__/ProductsAll.tsx","components/Categories/queries/__generated__/CategoriesAll.tsx","components/ProductAddForm/index.tsx","components/ProductsTable/ProductsTableAntd.tsx","components/Products/mutations/__generated__/UpdateProduct.tsx","components/Products/queries/__generated__/ProductsByCategoryId.tsx","components/ProductsTable/index.tsx","components/ProductEditForm/index.tsx","components/Products/index.tsx","components/Categories/queries/__generated__/CategoryById.tsx","components/Categories/mutations/__generated__/DeleteCascadeCategoryWithProductsById.tsx","components/CategoriesTable/index.tsx","components/Categories/mutations/__generated__/AddCategory.tsx","components/CategoryAddForm/index.tsx","components/Categories/mutations/__generated__/UpdateCategory.tsx","components/CategoryEditForm/index.tsx","components/Categories/index.tsx","components/RecycleBinIcon/index.tsx","components/Products/mutations/__generated__/DeleteProduct.tsx","components/RecycleBinProductsTable/index.tsx","components/Products/mutations/__generated__/ClearRecycleBin.tsx","components/RecycleBin/index.tsx","components/TabsContainer/index.tsx","App.tsx","serviceWorker.js","store/apollo-client.ts","reducer/edit-prod-modal.ts","reducer/add-prod-modal.ts","reducer/edit-cat-modal.ts","reducer/add-cat-modal.ts","reducer/edit-product.ts","reducer/edit-category.ts","reducer/index.ts","store/index.ts","index.tsx"],"names":["REACT_APP_RECYCLE_BIN_ID","String","process","REACT_APP_NO_IMAGE_AVAILABLE","REACT_APP_BASE_URL","editProduct","product","type","payload","clearEditProduct","setIsOpenEditProductModal","isOpen","setIsOpenAddProductModal","setIsOpenEditCategoryModal","setIsOpenAddCategoryModal","priceStringToIntCent","str","Math","round","parseFloat","replace","priceToDollars","price","Number","toLocaleString","style","currency","AddProductDocument","gql","ProductsAllDocument","useProductsAll","baseOptions","ApolloReactHooks","CategoriesAllDocument","useCategoriesAll","formItemLayout","labelCol","xs","span","sm","wrapperCol","formItemLayoutWithOutLabel","offset","connect","state","isOpenAddProductModal","add_product_modal","update","cache","addProduct","data","productsAll","readQuery","query","writeQuery","concat","refetchQueries","cat_loading","loading","cat_error","error","cat_data","useState","values","setValues","console","log","handleChange","e","target","name","value","categoriesAll","categoriesAllWithoutRecycleBin","filter","category","_id","title","visible","Boolean","footer","onCancel","onFinish","valuefromformlist","icon","variables","categories","images","then","m","catch","Item","label","rules","required","message","onChange","placeholder","width","marginRight","mode","map","Option","key","List","fields","add","remove","field","index","validateTrigger","whitespace","noStyle","length","className","onClick","htmlType","styleImagesInTable","height","ProductsTableAntd","handleEditProp","handleDeleteProp","productsAllWithoutRecycleBinProp","columns","dataIndex","render","tag","color","image","alt","src","id","float","danger","dataSource","rowKey","UpdateProductDocument","useUpdateProduct","ProductsByCategoryIdDocument","useProductsByCategoryId","updateProduct","isVisualDeleteModal","setIsVisualDeleteModal","productDeleted","setProductDeleted","productsAllWithoutRecycleBin","prod","includes","find","onOk","push","handleOk","isOpenEditProductModal","edit_product_modal","edited_product","edit_product","Form","useForm","formEditProduct","useEffect","setFieldsValue","resetFields","form","defaultValue","shape","position","bottom","right","PlusOutlined","fontSize","CategoryByIdDocument","DeleteCascadeCategoryWithProductsByIdDocument","styleIconInTable","editCategory","deleteCascadeCategoryWithProductsById","categoryDeleted","setCategoryDeleted","parent","icons","cat","handleEdit","handleDelete","mess","AddCategoryDocument","isOpenAddCategoryModal","add_cat_modal","addCategory","UpdateCategoryDocument","isOpenEditCategoryModal","edit_cat_modal","edited_category","edit_category","clearEditCategory","formEditCategory","updateCategory","RecycleBinIcon","categoryById","productsByCategoryId","DeleteProductDocument","recycle_bin_prod_loading","recycle_bin_prod_error","recycle_bin_prod_data","isVisualRestoreModal","setIsVisualRestoreModal","deleteProduct","categoriesWithoutRecyclebin","productWithoutRecycleBin","valuefromform","ClearRecycleBinDocument","RecycleBin","clearRecycleBin","display","TabPane","Tabs","callback","TabsContainer","prod_loading","prod_error","prod_data","recycle_bin_cat_loading","recycle_bin_cat_error","recycle_bin_cat_data","defaultActiveKey","tab","App","href","rel","window","location","hostname","match","InMemoryCache","client","ApolloClient","uri","initialState","rootReducer","combineReducers","action","composeEnhancers","composeWithDevTools","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45e4910c.chunk.js","sourcesContent":["import { Product, Category } from \"../__generated__/types\"\n\nexport const IS_OPEN_ADD_PRODUCT_MODAL = \"IS_OPEN_ADD_PRODUCT_MODAL\"\nexport const IS_OPEN_EDIT_PRODUCT_MODAL = \"IS_OPEN_EDIT_PRODUCT_MODAL\"\nexport const IS_OPEN_EDIT_CATEGORY_MODAL = \"IS_OPEN_EDIT_CATEGORY_MODAL\"\nexport const IS_OPEN_ADD_CATEGORY_MODAL = \"IS_OPEN_ADD_CATEGORY_MODAL\"\nexport const EDIT_PRODUCT = \"EDIT_PRODUCT\"\nexport const EDIT_CATEGORY = \"EDIT_CATEGORY\"\nexport const CLEAR_EDIT_PRODUCT = \"CLEAR_EDIT_PRODUCT\"\nexport const CLEAR_EDIT_CATEGORY = \"CLEAR_EDIT_CATEGORY\"\nexport const REACT_APP_RECYCLE_BIN_ID = String(process.env.REACT_APP_RECYCLE_BIN_ID)\n// export const REACT_APP_WITHOUT_CATEGORY_ID= String(process.env.REACT_APP_WITHOUT_CATEGORY_ID)\nexport const REACT_APP_NO_IMAGE_AVAILABLE = String(process.env.REACT_APP_NO_IMAGE_AVAILABLE)\nexport const REACT_APP_BASE_URL = String(process.env.REACT_APP_BASE_URL)\n\n// export interface FieldData {\n//   name: number;\n//   key: number;\n//   fieldKey: number;\n// }\n// export interface FormListProps {\n//   name: string | number | (string | number)[];\n//   children: (fields: FieldData[], operation: Operation) => React.ReactNode;\n// }\n// export interface Operation {\n//   add: (defaultValue?: StoreValue) => void;\n//   remove: (index: number) => void;\n//   move: (from: number, to: number) => void;\n// }\n\nexport interface AddProductModalState {\n  isOpen: Boolean\n}\n\nexport interface mstpAddProductModalState {\n  isOpenAddProductModal: Boolean\n}\n\nexport interface CategoryRequireIcons {\n  id?: String\n  name?: String\n  icons: String[]\n}\n\nexport interface setIsOpenAddProductModalAction {\n  type: typeof IS_OPEN_ADD_PRODUCT_MODAL\n  payload: Boolean\n}\n\nexport interface EditProductModalState {\n  isOpen: Boolean\n}\n\nexport interface setIsOpenAddCategoryModalAction {\n  type: typeof IS_OPEN_ADD_CATEGORY_MODAL\n  payload: Boolean\n}\nexport interface setIsOpenEditCategoryModalAction {\n  type: typeof IS_OPEN_EDIT_CATEGORY_MODAL\n  payload: Boolean\n}\n\nexport interface AddCategoryModalState {\n  isOpen: Boolean\n}\n\nexport interface EditCategoryModalState {\n  isOpen: Boolean\n}\n\nexport interface setIsOpenEditProductModalAction {\n  type: typeof IS_OPEN_EDIT_PRODUCT_MODAL\n  payload: Boolean\n}\n\nexport interface EditProductState {\n  product?: Product | {}\n}\n\nexport interface EditCategoryState {\n  category?: Category | {}\n}\n\nexport interface editProductAction {\n  type: typeof EDIT_PRODUCT | typeof CLEAR_EDIT_PRODUCT\n  payload?: Product | {}\n}\n\nexport interface editCategoryAction {\n  type: typeof EDIT_CATEGORY | typeof CLEAR_EDIT_CATEGORY\n  payload?: Product | {}\n}\n","import {\n  CLEAR_EDIT_CATEGORY,\n  CLEAR_EDIT_PRODUCT,\n  EDIT_CATEGORY,\n  EDIT_PRODUCT,\n  editCategoryAction,\n  editProductAction,\n  IS_OPEN_ADD_CATEGORY_MODAL,\n  IS_OPEN_ADD_PRODUCT_MODAL,\n  IS_OPEN_EDIT_CATEGORY_MODAL,\n  IS_OPEN_EDIT_PRODUCT_MODAL,\n  setIsOpenAddCategoryModalAction,\n  setIsOpenAddProductModalAction,\n  setIsOpenEditCategoryModalAction,\n  setIsOpenEditProductModalAction\n} from \"./types\"\nimport { Category, Product } from \"../__generated__/types\"\n\nexport const editProduct = (product: Product): editProductAction => ({\n  type: EDIT_PRODUCT,\n  payload: product\n})\n\nexport const clearEditProduct = () => ({\n  type: CLEAR_EDIT_PRODUCT\n})\n\nexport const editCategory = (category: Category): editCategoryAction => ({\n  type: EDIT_CATEGORY,\n  payload: category\n})\n\nexport const clearEditCategory = () => ({\n  type: CLEAR_EDIT_CATEGORY\n})\n\nexport const setIsOpenEditProductModal = (isOpen: Boolean): setIsOpenEditProductModalAction => ({\n  type: IS_OPEN_EDIT_PRODUCT_MODAL,\n  payload: isOpen\n})\n\nexport const setIsOpenAddProductModal = (isOpen: Boolean): setIsOpenAddProductModalAction => ({\n  type: IS_OPEN_ADD_PRODUCT_MODAL,\n  payload: isOpen\n})\n\nexport const setIsOpenEditCategoryModal = (isOpen: Boolean): setIsOpenEditCategoryModalAction => ({\n  type: IS_OPEN_EDIT_CATEGORY_MODAL,\n  payload: isOpen\n})\n\nexport const setIsOpenAddCategoryModal = (isOpen: Boolean): setIsOpenAddCategoryModalAction => ({\n  type: IS_OPEN_ADD_CATEGORY_MODAL,\n  payload: isOpen\n})\n","export const priceStringToIntCent = (str: string) => {\n  return Math.round(100 * parseFloat(str.replace(/[$,]/g, '')));\n}\nexport const priceToDollars = (price: any) => {\n  return Number(price / 100)\n    .toLocaleString(\"en-US\", { style: \"currency\", currency: \"USD\" })\n}\n\nexport function toArray<T>(candidate?: T | T[] | false): T[] {\n  if (candidate === undefined || candidate === false) return [];\n\n  return Array.isArray(candidate) ? candidate : [candidate];\n}\n","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type AddProductVariables = {\n  name: Types.Scalars['String'];\n  price: Types.Scalars['Float'];\n  categories?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  images?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  icon?: Types.Maybe<Types.Scalars['String']>;\n};\n\n\nexport type AddProduct = (\n  { __typename: 'Mutation' }\n  & { addProduct?: Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon' | 'categories'>\n  )> }\n);\n\n\nexport const AddProductDocument = gql`\n    mutation AddProduct($name: String!, $price: Float!, $categories: [String], $images: [String], $icon: String) {\n  addProduct(name: $name, price: $price, categories: $categories, images: $images, icon: $icon) {\n    id\n    name\n    price\n    images\n    icon\n    categories\n  }\n}\n    `;\nexport type AddProductMutationFn = ApolloReactCommon.MutationFunction<AddProduct, AddProductVariables>;\n\n/**\n * __useAddProduct__\n *\n * To run a mutation, you first call `useAddProduct` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProduct` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProduct, { data, loading, error }] = useAddProduct({\n *   variables: {\n *      name: // value for 'name'\n *      price: // value for 'price'\n *      categories: // value for 'categories'\n *      images: // value for 'images'\n *      icon: // value for 'icon'\n *   },\n * });\n */\nexport function useAddProduct(baseOptions?: ApolloReactHooks.MutationHookOptions<AddProduct, AddProductVariables>) {\n        return ApolloReactHooks.useMutation<AddProduct, AddProductVariables>(AddProductDocument, baseOptions);\n      }\nexport type AddProductHookResult = ReturnType<typeof useAddProduct>;\nexport type AddProductMutationResult = ApolloReactCommon.MutationResult<AddProduct>;\nexport type AddProductMutationOptions = ApolloReactCommon.BaseMutationOptions<AddProduct, AddProductVariables>;","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type ProductsAllVariables = {};\n\n\nexport type ProductsAll = (\n  { __typename: 'Query' }\n  & { productsAll?: Types.Maybe<Array<Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon' | 'categories'>\n  )>>> }\n);\n\n\nexport const ProductsAllDocument = gql`\n    query ProductsAll {\n  productsAll {\n    id\n    name\n    price\n    images\n    icon\n    categories\n  }\n}\n    `;\n\n/**\n * __useProductsAll__\n *\n * To run a query within a React component, call `useProductsAll` and pass it any options that fit your needs.\n * When your component renders, `useProductsAll` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProductsAll({\n *   variables: {\n *   },\n * });\n */\nexport function useProductsAll(baseOptions?: ApolloReactHooks.QueryHookOptions<ProductsAll, ProductsAllVariables>) {\n        return ApolloReactHooks.useQuery<ProductsAll, ProductsAllVariables>(ProductsAllDocument, baseOptions);\n      }\nexport function useProductsAllLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProductsAll, ProductsAllVariables>) {\n          return ApolloReactHooks.useLazyQuery<ProductsAll, ProductsAllVariables>(ProductsAllDocument, baseOptions);\n        }\nexport type ProductsAllHookResult = ReturnType<typeof useProductsAll>;\nexport type ProductsAllLazyQueryHookResult = ReturnType<typeof useProductsAllLazyQuery>;\nexport type ProductsAllQueryResult = ApolloReactCommon.QueryResult<ProductsAll, ProductsAllVariables>;","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type CategoriesAllVariables = {};\n\n\nexport type CategoriesAll = (\n  { __typename: 'Query' }\n  & { categoriesAll?: Types.Maybe<Array<Types.Maybe<(\n    { __typename: 'Category' }\n    & Pick<Types.Category, '_id' | 'name' | 'icons' | 'images' | 'parent'>\n  )>>> }\n);\n\n\nexport const CategoriesAllDocument = gql`\n    query CategoriesAll {\n  categoriesAll {\n    _id\n    name\n    icons\n    images\n    parent\n  }\n}\n    `;\n\n/**\n * __useCategoriesAll__\n *\n * To run a query within a React component, call `useCategoriesAll` and pass it any options that fit your needs.\n * When your component renders, `useCategoriesAll` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCategoriesAll({\n *   variables: {\n *   },\n * });\n */\nexport function useCategoriesAll(baseOptions?: ApolloReactHooks.QueryHookOptions<CategoriesAll, CategoriesAllVariables>) {\n        return ApolloReactHooks.useQuery<CategoriesAll, CategoriesAllVariables>(CategoriesAllDocument, baseOptions);\n      }\nexport function useCategoriesAllLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CategoriesAll, CategoriesAllVariables>) {\n          return ApolloReactHooks.useLazyQuery<CategoriesAll, CategoriesAllVariables>(CategoriesAllDocument, baseOptions);\n        }\nexport type CategoriesAllHookResult = ReturnType<typeof useCategoriesAll>;\nexport type CategoriesAllLazyQueryHookResult = ReturnType<typeof useCategoriesAllLazyQuery>;\nexport type CategoriesAllQueryResult = ApolloReactCommon.QueryResult<CategoriesAll, CategoriesAllVariables>;","import React, { useState } from \"react\"\nimport { connect } from \"react-redux\"\nimport { Button, Form, Input, Modal, Select } from \"antd\"\nimport PlusOutlined from \"@ant-design/icons/lib/icons/PlusOutlined\"\nimport MinusCircleOutlined from \"@ant-design/icons/lib/icons/MinusCircleOutlined\"\nimport { setIsOpenAddProductModal } from \"../../actions\"\nimport { priceStringToIntCent } from \"../../utils/utils\"\nimport {\n  REACT_APP_NO_IMAGE_AVAILABLE, REACT_APP_RECYCLE_BIN_ID\n} from \"../../actions/types\"\nimport { RootState } from \"../../reducer\"\nimport { IProductsAll } from \"../Products/types\"\nimport { useAddProduct } from \"../Products/mutations/__generated__/AddProduct\"\nimport { ProductsAllDocument } from \"../Products/queries/__generated__/ProductsAll\"\nimport { useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { Product } from \"../../__generated__/types\"\n\ntype PropsProductAddForm = {\n  setIsOpenAddProductModal: (isOpen: Boolean) => void\n  isOpenAddProductModal: Boolean\n}\n\nconst ProductAddForm: React.FC<PropsProductAddForm> = ({ isOpenAddProductModal, setIsOpenAddProductModal }) => {\n  const [addProduct, {data: add_product_data}] = useAddProduct(\n    {\n      // TODO:\n      // @ts-ignore\n      update(cache, { data: { addProduct } }) {\n        const { productsAll } = cache.readQuery<IProductsAll>({ query: ProductsAllDocument })!.productsAll\n        cache.writeQuery({\n          query: ProductsAllDocument,\n          data: { productsAll: productsAll?.concat([addProduct]) }\n        })\n      },\n      refetchQueries: [{\n        query: ProductsAllDocument\n      }]\n    }\n  )\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const [values, setValues] = useState<Product | any>({})\n  console.log(\"values+++\", values)\n\n  const onFinish = (valuefromformlist: Product) => {\n    console.log(\"Received values of form:\", values)\n\n    const { name, icon } = values\n    const price = priceStringToIntCent(values.price)\n    console.log(\"onFinish\")\n    addProduct({\n      variables: {\n        name,\n        price,\n        categories: valuefromformlist.categories,\n        images: !valuefromformlist.images ? [REACT_APP_NO_IMAGE_AVAILABLE] : valuefromformlist.images,\n        icon\n      }\n    }).then(m => console.log(\"addProduct:\", m))\n      .catch(e => console.log(\"addProductERROR:\", e))\n\n    setIsOpenAddProductModal(false)\n  }\n\n  const handleCancel = () => {\n    setIsOpenAddProductModal(false)\n  }\n\n  const handleChange = (e: { target: HTMLInputElement }) => {\n    const { name, value } = e.target\n    console.log(\"target\", e.target)\n    setValues({ ...values, [name]: value })\n  }\n\n  const handleChangeSelect = (value: string) => {\n    setValues({ ...values, \"categoryId\": value })\n  }\n\n  if (cat_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (cat_error || !cat_data) {\n    return (<div>Error...</div>)\n  }\n  const { categoriesAll } = cat_data\n  const categoriesAllWithoutRecycleBin = categoriesAll?.filter((category) => {\n    return category?._id !== REACT_APP_RECYCLE_BIN_ID\n  })\n  console.log(\"isOpenAddProductModal\", isOpenAddProductModal)\n\n  return (\n    <Modal\n      title=\"Product information\"\n      visible={Boolean(isOpenAddProductModal)}\n      footer={false}\n      onCancel={handleCancel}\n      // forceRender={true}\n      // destroyOnClose={true}\n      // okButtonProps={{htmlType: \"submit\" }}\n      // cancelButtonProps={{ htmlType: \"submit\" }}\n    >\n      <Form\n        // onChange={handleChange}\n        name=\"product\" {...formItemLayoutWithOutLabel}\n        // @ts-ignore\n        onFinish={onFinish}>\n        <Form.Item\n          label=\"Name product\"\n          rules={[{ required: true, message: \"Name product is required\" }]}\n        >\n          <Input\n            name=\"name\"\n            onChange={handleChange} placeholder=\"name product\"\n            style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n        <Form.Item\n          label=\"Price\"\n          rules={[{ required: true, message: \"Price is required\" }]}\n        >\n          <Input\n            name=\"price\"\n            onChange={handleChange}\n            type=\"number\" placeholder=\"Price $\" style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n\n        <Form.Item\n          label=\"Category\"\n          name=\"categories\"\n          // noStyle\n          rules={[{ required: true, message: \"Category is required\" }]}\n        >\n          <Select\n            onChange={handleChangeSelect}\n            mode=\"multiple\"\n            placeholder=\"Select category\">\n            {categoriesAllWithoutRecycleBin?.map((category) =>\n              <Select.Option\n                key={String(category?._id)}\n                value={String(category?._id)}\n                onChange={handleChange}\n                // defaultValue={[]}\n              >{String(category?._id)}\n              </Select.Option>\n            )\n            }\n          </Select>\n        </Form.Item>\n\n        <Form.List name=\"images\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    label={index === 0 ? \"Images\" : \"\"}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      {...field}\n                      validateTrigger={[\"onChange\", \"onBlur\"]}\n                      rules={[\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"Please input image url or delete this field.\"\n                        }\n                      ]}\n                      noStyle\n                    >\n                      <Input\n                        style={{ width: \"90%\", marginRight: 8 }}/>\n                    </Form.Item>\n\n                    {(fields.length >= 1) ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => {\n                          remove(field.name)\n                        }}\n                      />\n                    ) : <span/>}\n                  </Form.Item>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => {\n                      add()\n                    }}\n                    style={{ width: \"80%\" }}\n                  >\n                    <PlusOutlined/> Add image url\n                  </Button>\n                </Form.Item>\n              </div>\n            )\n          }}\n        </Form.List>\n        <Form.Item\n          label=\"Icon\"\n          name=\"icon\"\n          // noStyle\n        >\n          <Input onChange={handleChange} placeholder=\"icon url\" style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form>\n\n    </Modal>\n  )\n}\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 4 }\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 20 }\n  }\n}\n\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: { span: 24, offset: 0 },\n    sm: { span: 20, offset: 4 }\n  }\n}\n\ninterface StateProps {\n  isOpenAddProductModal: Boolean\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  isOpenAddProductModal: state.add_product_modal.isOpen\n})\n\nexport default connect<typeof ProductAddForm>(\n  // TODO:\n// @ts-ignore\n  mapStateToProps,\n  { setIsOpenAddProductModal }\n)(ProductAddForm)","import React from \"react\"\nimport { priceToDollars } from \"../../utils/utils\"\nimport { Button, Table, Tooltip, Tag } from \"antd\"\nimport DeleteOutlined from \"@ant-design/icons/lib/icons/DeleteOutlined\"\nimport { ProductsAll } from \"../Products/queries/__generated__/ProductsAll\"\n\nconst styleImagesInTable = { width: \"50px\", height: \"100%\", marginRight: \"10px\" }\nconst styleIconInTable = { width: \"20px\", height: \"100%\", marginRight: \"10px\" }\n\ninterface PropsProductsTableAntd {\n  handleEditProp: (id: String) => void\n  handleDeleteProp: (id: String) => void\n  productsAllWithoutRecycleBinProp: ProductsAll\n}\n\nconst ProductsTableAntd: React.FC<PropsProductsTableAntd> = ({ handleEditProp, handleDeleteProp, productsAllWithoutRecycleBinProp }) => {\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\"\n    },\n    {\n      title: \"ID\",\n      dataIndex: \"id\",\n      key: \"id\"\n    },\n    {\n      title: \"Price\",\n      dataIndex: \"price\",\n      key: \"price\",\n      render: (price: Number) => {\n        return priceToDollars(price)\n      }\n    },\n    {\n      title: \"Categories\",\n      dataIndex: \"categories\",\n      key: \"categories\",\n      render: (categories: String[]) => (\n        <span>\n          {categories.map(tag => (\n            <Tag color=\"blue\" key={String(tag)}>\n            {tag}\n            </Tag>\n          ))}\n        </span>\n        )\n    },\n    {\n      title: \"Images\",\n      dataIndex: \"images\",\n      key: \"images\",\n      render: (images: String[]) => {\n        return (images)\n          ? <div>\n            {\n              images\n                .map((image, index) => <img\n                  key={String(`${image}+${index}`)}\n                  alt=\"img\"\n                  src={String(image)}\n                  style={styleImagesInTable}/>\n                )\n            }\n          </div>\n          : <span>no  images</span>\n      }\n    },\n    {\n      title: \"Actions\",\n      dataIndex: \"id\",\n      key: \"id\",\n      render: (id: String) => <>\n        <Tooltip title=\"Edit this product\">\n          <Button onClick={() => handleEditProp(id)}\n                  type=\"dashed\">\n            Edit\n          </Button>\n        </Tooltip>\n        <Tooltip\n          title=\"Move to recycle bin\">\n          <Button style={{ float: \"right\" }}\n                  onClick={() => handleDeleteProp(id)}\n                  type=\"dashed\"\n                  danger\n                  icon={<DeleteOutlined/>}>\n          </Button>\n        </Tooltip>\n      </>\n    }\n  ]\n  return (\n    <>\n      <Table\n        // TODO:\n        // @ts-ignore\n        dataSource={productsAllWithoutRecycleBinProp}\n        columns={columns}\n        rowKey=\"id\"/>\n    </>\n  )\n}\n\nexport default ProductsTableAntd","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type UpdateProductVariables = {\n  id: Types.Scalars['ID'];\n  name: Types.Scalars['String'];\n  price: Types.Scalars['Float'];\n  categories?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  images?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  icon?: Types.Maybe<Types.Scalars['String']>;\n};\n\n\nexport type UpdateProduct = (\n  { __typename: 'Mutation' }\n  & { updateProduct?: Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon' | 'categories'>\n  )> }\n);\n\n\nexport const UpdateProductDocument = gql`\n    mutation UpdateProduct($id: ID!, $name: String!, $price: Float!, $categories: [String], $images: [String], $icon: String) {\n  updateProduct(id: $id, name: $name, price: $price, categories: $categories, images: $images, icon: $icon) {\n    id\n    name\n    price\n    images\n    icon\n    categories\n  }\n}\n    `;\nexport type UpdateProductMutationFn = ApolloReactCommon.MutationFunction<UpdateProduct, UpdateProductVariables>;\n\n/**\n * __useUpdateProduct__\n *\n * To run a mutation, you first call `useUpdateProduct` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProduct` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProduct, { data, loading, error }] = useUpdateProduct({\n *   variables: {\n *      id: // value for 'id'\n *      name: // value for 'name'\n *      price: // value for 'price'\n *      categories: // value for 'categories'\n *      images: // value for 'images'\n *      icon: // value for 'icon'\n *   },\n * });\n */\nexport function useUpdateProduct(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateProduct, UpdateProductVariables>) {\n        return ApolloReactHooks.useMutation<UpdateProduct, UpdateProductVariables>(UpdateProductDocument, baseOptions);\n      }\nexport type UpdateProductHookResult = ReturnType<typeof useUpdateProduct>;\nexport type UpdateProductMutationResult = ApolloReactCommon.MutationResult<UpdateProduct>;\nexport type UpdateProductMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateProduct, UpdateProductVariables>;","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type ProductsByCategoryIdVariables = {\n  id: Types.Scalars['String'];\n};\n\n\nexport type ProductsByCategoryId = (\n  { __typename: 'Query' }\n  & { productsByCategoryId?: Types.Maybe<Array<Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon' | 'categories'>\n  )>>> }\n);\n\n\nexport const ProductsByCategoryIdDocument = gql`\n    query ProductsByCategoryId($id: String!) {\n  productsByCategoryId(id: $id) {\n    id\n    name\n    price\n    images\n    icon\n    categories\n  }\n}\n    `;\n\n/**\n * __useProductsByCategoryId__\n *\n * To run a query within a React component, call `useProductsByCategoryId` and pass it any options that fit your needs.\n * When your component renders, `useProductsByCategoryId` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProductsByCategoryId({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useProductsByCategoryId(baseOptions?: ApolloReactHooks.QueryHookOptions<ProductsByCategoryId, ProductsByCategoryIdVariables>) {\n        return ApolloReactHooks.useQuery<ProductsByCategoryId, ProductsByCategoryIdVariables>(ProductsByCategoryIdDocument, baseOptions);\n      }\nexport function useProductsByCategoryIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProductsByCategoryId, ProductsByCategoryIdVariables>) {\n          return ApolloReactHooks.useLazyQuery<ProductsByCategoryId, ProductsByCategoryIdVariables>(ProductsByCategoryIdDocument, baseOptions);\n        }\nexport type ProductsByCategoryIdHookResult = ReturnType<typeof useProductsByCategoryId>;\nexport type ProductsByCategoryIdLazyQueryHookResult = ReturnType<typeof useProductsByCategoryIdLazyQuery>;\nexport type ProductsByCategoryIdQueryResult = ApolloReactCommon.QueryResult<ProductsByCategoryId, ProductsByCategoryIdVariables>;","import React, { useState } from \"react\"\nimport { Modal } from \"antd\"\nimport { connect } from \"react-redux\"\nimport { editProduct, setIsOpenEditProductModal } from \"../../actions\"\nimport { PropsProductsTable } from \"../Products/types\"\n\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\n\nimport ProductsTableAntd from \"./ProductsTableAntd\"\nimport { useProductsAll } from \"../Products/queries/__generated__/ProductsAll\"\nimport { useUpdateProduct } from \"../Products/mutations/__generated__/UpdateProduct\"\nimport { ProductsByCategoryIdDocument } from \"../Products/queries/__generated__/ProductsByCategoryId\"\nimport { Product } from \"../../__generated__/types\"\n\nconst ProductsTable: React.FC<PropsProductsTable> = ({ editProduct, setIsOpenEditProductModal }) => {\n  const { loading, error, data } = useProductsAll()\n  const [updateProduct, {}] = useUpdateProduct(\n    {\n      refetchQueries: [{\n        query: ProductsByCategoryIdDocument,\n        variables: {\n          id: REACT_APP_RECYCLE_BIN_ID\n        }\n      }]\n    }\n  )\n\n  const [isVisualDeleteModal, setIsVisualDeleteModal] = useState<Boolean>(false)\n  const [productDeleted, setProductDeleted] = useState<Product | any>({})\n  console.log(\"productDeleted\", productDeleted)\n  if (loading) {\n    return (<div>Loading...</div>)\n  }\n  if (error || !data) {\n    return (<div>Error...</div>)\n  }\n  const { productsAll } = data\n  // TODO:\n  // @ts-ignore\n  const productsAllWithoutRecycleBin = productsAll?.filter((prod: Product) => {\n    return !prod?.categories?.includes(REACT_APP_RECYCLE_BIN_ID)\n  })\n\n  const handleEdit = (id: String): void => {\n    const prod = productsAllWithoutRecycleBin?.find((prod: Product) => prod.id === id)\n    editProduct(prod)\n    setIsOpenEditProductModal(true)\n  }\n\n  const handleDelete = (id: String): void => {\n    setIsVisualDeleteModal(true)\n    setProductDeleted(productsAllWithoutRecycleBin.find((prod: Product) => prod.id === id))\n  }\n\n  const handleOk = (productDeleted: Product | any): void => {\n    const { id, name, price, categories, images, icon } = productDeleted\n\n    categories.push(REACT_APP_RECYCLE_BIN_ID)\n\n    updateProduct({\n      variables: {\n        id, name, price, categories, images, icon\n      }\n    }).then(m => console.log(\"updateProductMESSAGE:\", m))\n      .catch((e: Error) => console.log(\"updateProductERROR:\", e))\n\n    setIsVisualDeleteModal(false)\n  }\n\n  const handleCancel = () => {\n    setIsVisualDeleteModal(false)\n  }\n\n  return (\n    <>\n      <ProductsTableAntd productsAllWithoutRecycleBinProp={productsAllWithoutRecycleBin}\n                         handleEditProp={handleEdit}\n                         handleDeleteProp={handleDelete}/>\n      <Modal\n        title=\"Delete product in recycle bin?\"\n        visible={Boolean(isVisualDeleteModal)}\n        onOk={() => handleOk(productDeleted)}\n        onCancel={handleCancel}\n      >\n        <p>{productDeleted.id}</p>\n      </Modal>\n    </>\n  )\n}\n\nexport default connect<typeof ProductsTable>(null, {\n  setIsOpenEditProductModal,\n  editProduct\n})(ProductsTable)","import React, { useEffect, useState } from \"react\"\nimport { Button, Form, Input, Modal, Select } from \"antd\"\nimport PlusOutlined from \"@ant-design/icons/lib/icons/PlusOutlined\"\nimport MinusCircleOutlined from \"@ant-design/icons/lib/icons/MinusCircleOutlined\"\nimport { connect } from \"react-redux\"\nimport { clearEditProduct, setIsOpenEditProductModal } from \"../../actions\"\nimport { priceStringToIntCent } from \"../../utils/utils\"\nimport { RootState } from \"../../reducer\"\nimport { useUpdateProduct } from \"../Products/mutations/__generated__/UpdateProduct\"\nimport { useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\nimport { Product } from \"../../__generated__/types\"\n\ninterface PropsProductEditForm {\n  edited_product: Product\n  clearEditProduct: () => void\n  setIsOpenEditProductModal: (isOpen: Boolean) => void\n  isOpenEditProductModal: Boolean\n}\n\nconst ProductEditForm: React.FC<PropsProductEditForm> = ({ clearEditProduct, edited_product, isOpenEditProductModal, setIsOpenEditProductModal }) => {\n  const [formEditProduct] = Form.useForm()\n  const [updateProduct, {}] = useUpdateProduct()\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const [values, setValues] = useState<Product | any>({})\n  useEffect(() => {\n    setValues(edited_product)\n  }, [edited_product])\n  useEffect(() => {\n    formEditProduct.setFieldsValue({\n      \"name\": edited_product.name,\n      \"price\": edited_product.price,\n      \"images\": edited_product.images,\n      \"icon\": edited_product.icon,\n      \"categories\": edited_product.categories\n    })\n    return () => {\n      formEditProduct.resetFields()\n    }\n  }, [edited_product])\n\n  const onFinish = (valuefromformlist: Product) => {\n    const { name, categories, images, icon } = valuefromformlist\n    const id = String(values?.id)\n    const price = priceStringToIntCent(String(valuefromformlist.price))\n\n    updateProduct({\n      variables: {\n        id, name, price, categories, images, icon\n      }\n    }).then(m => console.log(\"updateProductMESSAGE:\", m))\n      .catch(e => console.log(\"updateProductERROR:\", e))\n    setIsOpenEditProductModal(false)\n  }\n  const handleCancel = () => {\n    setIsOpenEditProductModal(false)\n    clearEditProduct()\n  }\n  const handleChange = (e: { target: HTMLInputElement }) => {\n    const { name, value } = e.target\n    setValues({ ...values, [name]: value })\n  }\n  if (cat_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (cat_error || !cat_data) {\n    return (<div>Error...</div>)\n  }\n  const { categoriesAll } = cat_data\n  const categoriesAllWithoutRecycleBin = categoriesAll?.filter((category) => {\n    return category?._id !== REACT_APP_RECYCLE_BIN_ID\n  })\n\n  return (\n    <Modal\n      title={`Product information id: ${values.id}`}\n      visible={Boolean(isOpenEditProductModal)}\n      footer={false}\n      onCancel={handleCancel}\n      // forceRender={true}\n      // destroyOnClose={false}\n    >\n\n      <Form\n        form={formEditProduct}\n        name=\"product\" {...formItemLayoutWithOutLabel}\n        // TODO:\n        // @ts-ignore\n        onFinish={onFinish}>\n\n        <Form.Item\n          label=\"Name product\"\n          name=\"name\"\n          // TODO:\n          // @ts-ignore\n          value={String(values?.name)}\n          rules={[{ required: true, message: \"Name product is required\" }]}\n        >\n          <Input\n\n            onChange={handleChange} placeholder=\"name product\"\n            style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n        <Form.Item\n          label=\"Price\"\n          name=\"price\"\n          // noStyle\n          rules={[{ required: true, message: \"Price is required\" }]}\n        >\n          <Input type=\"number\" placeholder=\"Price $\" style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n\n        <Form.Item\n          label=\"Categories\"\n          name=\"categories\"\n          // TODO:\n          // @ts-ignore\n          onChange={handleChange}\n          rules={[{ required: true, message: \"Category is required\" }]}\n        >\n          <Select\n            mode=\"multiple\"\n            placeholder=\"Select category\">\n            {categoriesAllWithoutRecycleBin?.map((category) =>\n              <Select.Option\n                defaultValue={edited_product.categories}\n                key={String(category?._id)}\n                value={String(category?._id)}\n              >{String(category?.name)}\n              </Select.Option>\n            )\n            }\n          </Select>\n        </Form.Item>\n\n        <Form.List name=\"images\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    label={index === 0 ? \"Images\" : \"\"}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      {...field}\n                      validateTrigger={[\"onChange\", \"onBlur\"]}\n                      rules={[\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"Please input image url or delete this field.\"\n                        }\n                      ]}\n                      noStyle\n                    >\n                      <Input value={values.images[index]} placeholder=\"image url\"\n                             style={{ width: \"90%\", marginRight: 8 }}/>\n                    </Form.Item>\n                    {fields.length > 1 ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => {\n                          remove(field.name)\n                        }}\n                      />\n                    ) : <span/>}\n                  </Form.Item>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => {\n                      add()\n                    }}\n                    style={{ width: \"80%\" }}\n                  >\n                    <PlusOutlined/> Add image url\n                  </Button>\n                </Form.Item>\n              </div>\n            )\n          }}\n        </Form.List>\n        <Form.Item\n          label=\"Icon\"\n          name=\"icon\"\n          // noStyle\n        >\n          <Input onChange={handleChange} placeholder=\"icon url\" style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    </Modal>\n  )\n}\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 4 }\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 20 }\n  }\n}\n\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: { span: 24, offset: 0 },\n    sm: { span: 20, offset: 4 }\n  }\n}\n\ninterface StateProps {\n  isOpenEditProductModal: Boolean\n  edited_product?: Product | {}\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  isOpenEditProductModal: state.edit_product_modal.isOpen,\n  edited_product: state.edit_product.product\n})\n\nexport default connect<typeof ProductEditForm>(\n  // TODO:\n// @ts-ignore\n  mapStateToProps,\n  { setIsOpenEditProductModal, clearEditProduct }\n)(ProductEditForm)","import React from \"react\"\nimport { Button, Tooltip } from \"antd\"\nimport { PlusOutlined } from \"@ant-design/icons\"\nimport ProductAddForm from \"../ProductAddForm\"\nimport { connect } from \"react-redux\"\nimport { clearEditProduct, setIsOpenAddProductModal } from \"../../actions\"\nimport ProductsTable from \"../ProductsTable\"\nimport ProductEditForm from \"../ProductEditForm\"\n\ninterface PropsProducts {\n  clearEditProduct: () => void\n  setIsOpenAddProductModal: (isOpen: Boolean) => void\n}\n\nconst Products: React.FC<PropsProducts> = ({ setIsOpenAddProductModal, clearEditProduct }) => {\n\n  const onClickHandler = () => {\n    clearEditProduct()\n    setIsOpenAddProductModal(true)\n  }\n\n  return (\n    <>\n      <h1>Products</h1>\n      <ProductsTable/>\n      <ProductEditForm/>\n      <ProductAddForm/>\n      <Tooltip title=\"Add Product\">\n        <Button onClick={onClickHandler} type=\"dashed\" shape=\"circle\"\n                style={{ position: \"fixed\", bottom: \"50px\", right: \"50px\", color: \"#08c\" }}\n        ><PlusOutlined\n          style={{ fontSize: \"22px\", color: \"#08c\" }}\n        /></Button>\n      </Tooltip>\n    </>\n  )\n}\n\nexport default connect<typeof Products>(null, { setIsOpenAddProductModal, clearEditProduct })(Products)","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type CategoryByIdVariables = {\n  _id?: Types.Maybe<Types.Scalars['String']>;\n};\n\n\nexport type CategoryById = (\n  { __typename: 'Query' }\n  & { categoryById?: Types.Maybe<(\n    { __typename: 'Category' }\n    & Pick<Types.Category, '_id' | 'name' | 'icons' | 'images' | 'parent'>\n  )> }\n);\n\n\nexport const CategoryByIdDocument = gql`\n    query CategoryById($_id: String) {\n  categoryById(_id: $_id) {\n    _id\n    name\n    icons\n    images\n    parent\n  }\n}\n    `;\n\n/**\n * __useCategoryById__\n *\n * To run a query within a React component, call `useCategoryById` and pass it any options that fit your needs.\n * When your component renders, `useCategoryById` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCategoryById({\n *   variables: {\n *      _id: // value for '_id'\n *   },\n * });\n */\nexport function useCategoryById(baseOptions?: ApolloReactHooks.QueryHookOptions<CategoryById, CategoryByIdVariables>) {\n        return ApolloReactHooks.useQuery<CategoryById, CategoryByIdVariables>(CategoryByIdDocument, baseOptions);\n      }\nexport function useCategoryByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CategoryById, CategoryByIdVariables>) {\n          return ApolloReactHooks.useLazyQuery<CategoryById, CategoryByIdVariables>(CategoryByIdDocument, baseOptions);\n        }\nexport type CategoryByIdHookResult = ReturnType<typeof useCategoryById>;\nexport type CategoryByIdLazyQueryHookResult = ReturnType<typeof useCategoryByIdLazyQuery>;\nexport type CategoryByIdQueryResult = ApolloReactCommon.QueryResult<CategoryById, CategoryByIdVariables>;","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type DeleteCascadeCategoryWithProductsByIdVariables = {\n  _id: Types.Scalars['String'];\n};\n\n\nexport type DeleteCascadeCategoryWithProductsById = (\n  { __typename: 'Mutation' }\n  & { deleteCascadeCategoryWithProductsById?: Types.Maybe<{ __typename: 'Category' }> }\n);\n\n\nexport const DeleteCascadeCategoryWithProductsByIdDocument = gql`\n    mutation DeleteCascadeCategoryWithProductsById($_id: String!) {\n  deleteCascadeCategoryWithProductsById(_id: $_id) {\n    __typename\n  }\n}\n    `;\nexport type DeleteCascadeCategoryWithProductsByIdMutationFn = ApolloReactCommon.MutationFunction<DeleteCascadeCategoryWithProductsById, DeleteCascadeCategoryWithProductsByIdVariables>;\n\n/**\n * __useDeleteCascadeCategoryWithProductsById__\n *\n * To run a mutation, you first call `useDeleteCascadeCategoryWithProductsById` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteCascadeCategoryWithProductsById` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteCascadeCategoryWithProductsById, { data, loading, error }] = useDeleteCascadeCategoryWithProductsById({\n *   variables: {\n *      _id: // value for '_id'\n *   },\n * });\n */\nexport function useDeleteCascadeCategoryWithProductsById(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteCascadeCategoryWithProductsById, DeleteCascadeCategoryWithProductsByIdVariables>) {\n        return ApolloReactHooks.useMutation<DeleteCascadeCategoryWithProductsById, DeleteCascadeCategoryWithProductsByIdVariables>(DeleteCascadeCategoryWithProductsByIdDocument, baseOptions);\n      }\nexport type DeleteCascadeCategoryWithProductsByIdHookResult = ReturnType<typeof useDeleteCascadeCategoryWithProductsById>;\nexport type DeleteCascadeCategoryWithProductsByIdMutationResult = ApolloReactCommon.MutationResult<DeleteCascadeCategoryWithProductsById>;\nexport type DeleteCascadeCategoryWithProductsByIdMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteCascadeCategoryWithProductsById, DeleteCascadeCategoryWithProductsByIdVariables>;","import React, { useState } from \"react\"\nimport { Button, Modal, Table, Tooltip, Tag } from \"antd\"\nimport { CategoriesAllDocument, useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\nimport { Category, Product } from \"../../__generated__/types\"\nimport { useDeleteCascadeCategoryWithProductsById } from \"../Categories/mutations/__generated__/DeleteCascadeCategoryWithProductsById\"\nimport { ProductsAllDocument } from \"../Products/queries/__generated__/ProductsAll\"\nimport DeleteOutlined from \"@ant-design/icons/lib/icons/DeleteOutlined\"\nimport { editCategory } from \"../../actions\"\nimport { setIsOpenEditCategoryModal } from \"../../actions\"\nimport { connect } from \"react-redux\"\n\nconst styleIconInTable = { width: \"20px\", height: \"100%\", marginRight: \"10px\" }\n\nexport interface PropsCategoryTable {\n  editCategory: (product: Product | undefined) => void\n  setIsOpenEditCategoryModal: (isOpen: Boolean | undefined) => void\n}\n\nconst CategoriesTable: React.FC<PropsCategoryTable> = ({ editCategory, setIsOpenEditCategoryModal }) => {\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const [deleteCascadeCategoryWithProductsById, {}] = useDeleteCascadeCategoryWithProductsById({\n      refetchQueries: [{\n        query: CategoriesAllDocument\n      }]\n    }\n  )\n  const [isVisualDeleteModal, setIsVisualDeleteModal] = useState<Boolean>(false)\n  const [categoryDeleted, setCategoryDeleted] = useState<Category | any>({})\n  if (cat_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (cat_error || !cat_data) {\n    return (<div>Error...</div>)\n  }\n  const { categoriesAll } = cat_data\n\n  // @ts-ignore\n  const categoriesAllWithoutRecycleBin = categoriesAll?.filter((category: Category) => {\n    return category._id !== REACT_APP_RECYCLE_BIN_ID\n  })\n\n  const handleEdit = (_id: String): void => {\n    const cat = categoriesAllWithoutRecycleBin?.find((cat: Category) => cat._id === _id)\n    editCategory(cat)\n    setIsOpenEditCategoryModal(true)\n  }\n\n  const handleDelete = (_id: String): void => {\n    setIsVisualDeleteModal(true)\n    setCategoryDeleted(categoriesAllWithoutRecycleBin.find((cat: Category) => cat._id === _id))\n  }\n\n  const handleOk = (_id: String) => {\n    deleteCascadeCategoryWithProductsById({\n      variables: {\n        _id: String(_id)\n      }\n    }).then((mess: any) => console.log(\"deleteCascadeCategoryWithProductsById response:\", mess))\n    setIsVisualDeleteModal(false)\n  }\n\n  const handleCancel = () => {\n    setIsVisualDeleteModal(false)\n  }\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\"\n    },\n    {\n      title: \"ID\",\n      dataIndex: \"_id\",\n      key: \"_id\"\n    },\n    {\n      title: \"Parent\",\n      dataIndex: \"parent\",\n      key: \"parent\",\n      render: (parent: String) => {\n        return parent ?\n          <span>\n          <Tag color=\"green\" key={String(parent)}>{parent}</Tag>\n        </span> : null\n      }\n    },\n    {\n      title: \"Icons\",\n      dataIndex: \"icons\",\n      key: \"icons\",\n      render: (icons: String[]) => {\n        return (icons.length !== 0)\n          ? <div>\n            {\n              icons\n                .map(icon => <img\n                  key={String(icon)} alt=\"img\"\n                  src={String(icon)}\n                  style={styleIconInTable}/>\n                )\n            }\n          </div>\n          : <span>no icons</span>\n      }\n    },\n    {\n      title: \"Images\",\n      dataIndex: \"images\",\n      key: \"images\",\n      render: (icons: String[]) => {\n        return (icons.length !== 0)\n          ? <div>\n            {\n              icons\n                .map(image => <img\n                  key={String(image)} alt=\"img\"\n                  src={String(image)}\n                  style={styleIconInTable}/>\n                )\n            }\n          </div>\n          : <span>no images</span>\n      }\n    },\n    {\n      title: \"Actions\",\n      dataIndex: \"_id\",\n      key: \"_id\",\n      render: (_id: String) => <>\n        <Tooltip title=\"Edit this category\">\n          <Button onClick={() => handleEdit(_id)}\n                  type=\"dashed\">\n            Edit\n          </Button>\n        </Tooltip>\n        <Tooltip\n          title=\"Delete Category With All Products\">\n          <Button style={{ float: \"right\" }}\n                  onClick={() => handleDelete(String(_id))}\n                  type=\"dashed\"\n                  danger\n                  icon={<DeleteOutlined/>}>\n          </Button>\n        </Tooltip>\n      </>\n    }\n  ]\n\n  return (\n    <>\n      <Table dataSource={categoriesAllWithoutRecycleBin} columns={columns} rowKey=\"id\"/>\n      <Modal\n        title=\"Delete Category With All Products WITHOUT recovery!?\"\n        visible={Boolean(isVisualDeleteModal)}\n        onOk={() => handleOk(categoryDeleted._id)}\n        onCancel={handleCancel}\n      >\n        <p>{categoryDeleted.name}</p>\n      </Modal>\n    </>\n  )\n}\n\nexport default connect<typeof CategoriesTable>(null, {\n  editCategory, setIsOpenEditCategoryModal\n})(CategoriesTable)","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type AddCategoryVariables = {\n  _id: Types.Scalars['String'];\n  name: Types.Scalars['String'];\n  images?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  icons?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  parent?: Types.Maybe<Types.Scalars['String']>;\n};\n\n\nexport type AddCategory = (\n  { __typename: 'Mutation' }\n  & { addCategory?: Types.Maybe<(\n    { __typename: 'Category' }\n    & Pick<Types.Category, '_id' | 'name' | 'images' | 'icons' | 'parent'>\n  )> }\n);\n\n\nexport const AddCategoryDocument = gql`\n    mutation AddCategory($_id: String!, $name: String!, $images: [String], $icons: [String], $parent: String) {\n  addCategory(_id: $_id, name: $name, images: $images, icons: $icons, parent: $parent) {\n    _id\n    name\n    images\n    icons\n    parent\n  }\n}\n    `;\nexport type AddCategoryMutationFn = ApolloReactCommon.MutationFunction<AddCategory, AddCategoryVariables>;\n\n/**\n * __useAddCategory__\n *\n * To run a mutation, you first call `useAddCategory` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddCategory` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addCategory, { data, loading, error }] = useAddCategory({\n *   variables: {\n *      _id: // value for '_id'\n *      name: // value for 'name'\n *      images: // value for 'images'\n *      icons: // value for 'icons'\n *      parent: // value for 'parent'\n *   },\n * });\n */\nexport function useAddCategory(baseOptions?: ApolloReactHooks.MutationHookOptions<AddCategory, AddCategoryVariables>) {\n        return ApolloReactHooks.useMutation<AddCategory, AddCategoryVariables>(AddCategoryDocument, baseOptions);\n      }\nexport type AddCategoryHookResult = ReturnType<typeof useAddCategory>;\nexport type AddCategoryMutationResult = ApolloReactCommon.MutationResult<AddCategory>;\nexport type AddCategoryMutationOptions = ApolloReactCommon.BaseMutationOptions<AddCategory, AddCategoryVariables>;","import React, { useState } from \"react\"\nimport { connect } from \"react-redux\"\nimport { Modal, Form, Input, Button, Select } from \"antd\"\nimport PlusOutlined from \"@ant-design/icons/lib/icons/PlusOutlined\"\nimport MinusCircleOutlined from \"@ant-design/icons/lib/icons/MinusCircleOutlined\"\nimport { setIsOpenAddCategoryModal } from \"../../actions\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\nimport { RootState } from \"../../reducer\"\nimport { ICategoriesAll } from \"../Categories/types\"\nimport { useAddCategory } from \"../Categories/mutations/__generated__/AddCategory\"\nimport {\n  CategoriesAllDocument, useCategoriesAll\n} from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { Category } from \"../../__generated__/types\"\n\ntype PropsCategoryAddForm = {\n  setIsOpenAddCategoryModal: (isOpen: Boolean) => void\n  isOpenAddCategoryModal: Boolean\n}\n\nconst CategoryAddForm: React.FC<PropsCategoryAddForm> = (\n  {\n    setIsOpenAddCategoryModal,\n    isOpenAddCategoryModal\n  }) => {\n  const [addCategory, { data: daa_cat_data }] = useAddCategory(\n    {\n      // TODO:\n      // @ts-ignore\n      update(cache, { data: { addCategory } }) {\n        const { categoriesAll } = cache.readQuery<ICategoriesAll>({\n          query: CategoriesAllDocument\n        })!.categoriesAll\n        cache.writeQuery({\n          query: CategoriesAllDocument,\n          data: { categoriesAll: categoriesAll?.concat([addCategory]) }\n        })\n      },\n      refetchQueries: [{\n        query: CategoriesAllDocument\n      }]\n    }\n  )\n\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const [values, setValues] = useState<Category | any>({})\n\n  if (cat_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (cat_error || !cat_data) {\n    return (<div>Error...</div>)\n  }\n  const { categoriesAll } = cat_data\n\n  // @ts-ignore\n  const categoriesAllWithoutRecycleBin = categoriesAll?.filter((category: Category) => {\n    return category._id !== REACT_APP_RECYCLE_BIN_ID\n  })\n\n  const onFinish = (valuefromformlist: Category) => {\n    const { _id, icons, images, name } = values\n    // const _id = String(values._id)\n    // const name = String(valuefromformlist.name)\n    console.log(\"++++++++++++\",\n      valuefromformlist\n    )\n    console.log(\"+++V+++V++++++\",\n      values\n    )\n\n    addCategory({\n      variables: {\n        _id,\n        name,\n        icons,\n        images,\n        parent: valuefromformlist.parent\n      }\n    }).then(m => console.log(\"addCategoryMESSAGE:\", m))\n      .catch(e => console.log(\"addCategoryERROR:\", e))\n\n    setIsOpenAddCategoryModal(false)\n  }\n  const handleCancel = () => {\n    setIsOpenAddCategoryModal(false)\n  }\n\n  const handleChange = (e: { target: HTMLInputElement }) => {\n    const { name, value } = e.target\n    console.log(\"target\", e.target)\n    setValues({ ...values, [name]: value })\n  }\n\n  return (\n    <Modal\n      title=\"Category information\"\n      visible={Boolean(isOpenAddCategoryModal)}\n      footer={false}\n      onCancel={handleCancel}\n    >\n      <Form\n        name=\"category\" {...formItemLayoutWithOutLabel}\n        // @ts-ignore\n        onFinish={onFinish}>\n\n        <Form.Item\n          label=\"ID category\"\n          rules={[{ required: true, message: \"ID category is required\" }]}\n        >\n          <Input\n            name=\"_id\"\n            onChange={handleChange} placeholder=\"name category\"\n            style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n\n        <Form.Item\n          label=\"Name category\"\n          rules={[{ required: true, message: \"Name category is required\" }]}\n        >\n          <Input\n            name=\"name\"\n            onChange={handleChange} placeholder=\"name category\"\n            style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n\n        <Form.Item\n          label=\"Parent category\"\n          name=\"parent\"\n          // TODO:\n          // @ts-ignore\n          onChange={handleChange}\n        >\n          <Select\n            placeholder=\"Select category\">\n            {categoriesAllWithoutRecycleBin?.map((category: Category) =>\n              <Select.Option\n                key={String(category._id)}\n                value={String(category._id)}\n              >{category._id}\n              </Select.Option>\n            )\n            }\n          </Select>\n        </Form.Item>\n\n        <Form.List name=\"icons\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    label={index === 0 ? \"icons\" : \"\"}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      {...field}\n                      validateTrigger={[\"onChange\", \"onBlur\"]}\n                      rules={[\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"Please input icon url or delete this field.\"\n                        }\n                      ]}\n                      noStyle\n                    >\n                      <Input\n                        style={{ width: \"90%\", marginRight: 8 }}/>\n                    </Form.Item>\n\n                    {(fields.length >= 1) ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => {\n                          remove(field.name)\n                        }}\n                      />\n                    ) : <span/>}\n                  </Form.Item>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => {\n                      add()\n                    }}\n                    style={{ width: \"80%\" }}\n                  >\n                    <PlusOutlined/> Add icon url\n                  </Button>\n                </Form.Item>\n              </div>\n            )\n          }}\n        </Form.List>\n\n        <Form.List name=\"images\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    label={index === 0 ? \"Images\" : \"\"}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      {...field}\n                      validateTrigger={[\"onChange\", \"onBlur\"]}\n                      rules={[\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"Please input image url or delete this field.\"\n                        }\n                      ]}\n                      noStyle\n                    >\n                      <Input\n                        style={{ width: \"90%\", marginRight: 8 }}/>\n                    </Form.Item>\n\n                    {(fields.length >= 1) ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => {\n                          remove(field.name)\n                        }}\n                      />\n                    ) : <span/>}\n                  </Form.Item>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => {\n                      add()\n                    }}\n                    style={{ width: \"80%\" }}\n                  >\n                    <PlusOutlined/> Add image url\n                  </Button>\n                </Form.Item>\n              </div>\n            )\n          }}\n        </Form.List>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    </Modal>\n  )\n}\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 4 }\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 20 }\n  }\n}\n\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: { span: 24, offset: 0 },\n    sm: { span: 20, offset: 4 }\n  }\n}\n\ninterface StateProps {\n  isOpenAddCategoryModal: Boolean\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  isOpenAddCategoryModal: state.add_cat_modal.isOpen\n})\n\nexport default connect<typeof CategoryAddForm>(\n  // TODO:\n// @ts-ignore\n  mapStateToProps,\n  { setIsOpenAddCategoryModal }\n)(CategoryAddForm)","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type UpdateCategoryVariables = {\n  _id: Types.Scalars['String'];\n  name: Types.Scalars['String'];\n  images?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  icons?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  parent?: Types.Maybe<Types.Scalars['String']>;\n};\n\n\nexport type UpdateCategory = (\n  { __typename: 'Mutation' }\n  & { updateCategory?: Types.Maybe<(\n    { __typename: 'Category' }\n    & Pick<Types.Category, '_id' | 'name' | 'images' | 'icons' | 'parent'>\n  )> }\n);\n\n\nexport const UpdateCategoryDocument = gql`\n    mutation UpdateCategory($_id: String!, $name: String!, $images: [String], $icons: [String], $parent: String) {\n  updateCategory(_id: $_id, name: $name, images: $images, icons: $icons, parent: $parent) {\n    _id\n    name\n    images\n    icons\n    parent\n  }\n}\n    `;\nexport type UpdateCategoryMutationFn = ApolloReactCommon.MutationFunction<UpdateCategory, UpdateCategoryVariables>;\n\n/**\n * __useUpdateCategory__\n *\n * To run a mutation, you first call `useUpdateCategory` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateCategory` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateCategory, { data, loading, error }] = useUpdateCategory({\n *   variables: {\n *      _id: // value for '_id'\n *      name: // value for 'name'\n *      images: // value for 'images'\n *      icons: // value for 'icons'\n *      parent: // value for 'parent'\n *   },\n * });\n */\nexport function useUpdateCategory(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateCategory, UpdateCategoryVariables>) {\n        return ApolloReactHooks.useMutation<UpdateCategory, UpdateCategoryVariables>(UpdateCategoryDocument, baseOptions);\n      }\nexport type UpdateCategoryHookResult = ReturnType<typeof useUpdateCategory>;\nexport type UpdateCategoryMutationResult = ApolloReactCommon.MutationResult<UpdateCategory>;\nexport type UpdateCategoryMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateCategory, UpdateCategoryVariables>;","import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\nimport { RootState } from \"../../reducer\"\nimport { clearEditCategory, clearEditProduct, setIsOpenEditCategoryModal } from \"../../actions\"\nimport { Button, Form, Input, Modal, Select } from \"antd\"\nimport { useUpdateCategory } from \"../Categories/mutations/__generated__/UpdateCategory\"\nimport MinusCircleOutlined from \"@ant-design/icons/lib/icons/MinusCircleOutlined\"\nimport PlusOutlined from \"@ant-design/icons/lib/icons/PlusOutlined\"\nimport { priceStringToIntCent } from \"../../utils/utils\"\nimport { Category } from \"../../__generated__/types\"\nimport { CategoriesAllDocument, useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { ProductsAllDocument } from \"../Products/queries/__generated__/ProductsAll\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\n\ntype PropsCategoryEditForm = {\n  setIsOpenEditCategoryModal: (isOpen: Boolean) => void\n  isOpenEditCategoryModal: Boolean\n  edited_category: Category\n}\nconst CategoryEditForm: React.FC<PropsCategoryEditForm> = ({ edited_category, setIsOpenEditCategoryModal, isOpenEditCategoryModal }) => {\n  const [formEditCategory] = Form.useForm()\n  const [updateCategory, {}] = useUpdateCategory({\n    refetchQueries: [\n      {\n        query: CategoriesAllDocument\n      },\n      {\n        query: ProductsAllDocument\n      }\n    ]\n  })\n  const [values, setValues] = useState<Category | any>({})\n  useEffect(() => {\n    setValues(edited_category)\n  }, [edited_category])\n  useEffect(() => {\n    formEditCategory.setFieldsValue({\n      \"name\": edited_category.name,\n      \"icons\": edited_category.icons,\n      \"images\": edited_category.images,\n      \"parent\": edited_category.parent,\n      \"_id\": edited_category._id,\n    })\n    return () => {\n      formEditCategory.resetFields()\n    }\n  }, [edited_category])\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n\n  if (cat_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (cat_error || !cat_data) {\n    return (<div>Error...</div>)\n  }\n  const { categoriesAll } = cat_data\n\n  // @ts-ignore\n  const categoriesAllWithoutRecycleBin = categoriesAll?.filter((category: Category) => {\n    return category._id !== REACT_APP_RECYCLE_BIN_ID\n  })\n\n  const onFinish = (valuefromformlist: Category) => {\n    const { name, images, icons, parent } = valuefromformlist\n    const _id = String(values?._id)\n\n    updateCategory({\n      variables: {\n        _id, name, images, icons, parent\n      }\n    }).then(m => console.log(\"updateProductMESSAGE:\", m))\n      .catch(e => console.log(\"updateProductERROR:\", e))\n\n    setIsOpenEditCategoryModal(false)\n  }\n  const handleCancel = () => {\n    setIsOpenEditCategoryModal(false)\n    // clearEditCategory()\n  }\n  const handleChange = (e: { target: HTMLInputElement }) => {\n    const { name, value } = e.target\n    setValues({ ...values, [name]: value })\n  }\n\n  return (\n    <Modal\n      title={`Category information id: ${values._id}`}\n      visible={Boolean(isOpenEditCategoryModal)}\n      footer={false}\n      onCancel={handleCancel}\n    >\n      <Form\n        form={formEditCategory}\n        name=\"category\" {...formItemLayoutWithOutLabel}\n        // TODO:\n        // @ts-ignore\n        onFinish={onFinish}>\n\n        <Form.Item\n          label=\"ID category\"\n          name=\"_id\"\n          // TODO:\n          // @ts-ignore\n          value={String(values?._id)}\n          rules={[{ required: true, message: \"Name category is required\" }]}\n        >\n          <Input\n            onChange={handleChange} placeholder=\"name category\"\n            style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n\n        <Form.Item\n          label=\"Name category\"\n          name=\"name\"\n          // TODO:\n          // @ts-ignore\n          value={String(values?.name)}\n          rules={[{ required: true, message: \"Name category is required\" }]}\n        >\n          <Input\n            onChange={handleChange} placeholder=\"name category\"\n            style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n\n        <Form.Item\n          label=\"Parent category\"\n          name=\"parent\"\n          // TODO:\n          // @ts-ignore\n          onChange={handleChange}\n        >\n          <Select\n            defaultValue={values._id}\n            placeholder=\"Select category\">\n            {categoriesAllWithoutRecycleBin?.map((category: Category) =>\n              <Select.Option\n                key={String(category._id)}\n                value={String(category._id)}\n              >{category._id}\n              </Select.Option>\n            )\n            }\n          </Select>\n        </Form.Item>\n\n        <Form.List name=\"icons\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    label={index === 0 ? \"icons\" : \"\"}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      {...field}\n                      validateTrigger={[\"onChange\", \"onBlur\"]}\n                      rules={[\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"Please input icons url or delete this field.\"\n                        }\n                      ]}\n                      noStyle\n                    >\n                      <Input value={values.icons[index]} placeholder=\"icon url\"\n                             style={{ width: \"90%\", marginRight: 8 }}/>\n                    </Form.Item>\n                    {fields.length > 1 ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => {\n                          remove(field.name)\n                        }}\n                      />\n                    ) : <span/>}\n                  </Form.Item>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => {\n                      add()\n                    }}\n                    style={{ width: \"80%\" }}\n                  >\n                    <PlusOutlined/> Add icon url\n                  </Button>\n                </Form.Item>\n              </div>\n            )\n          }}\n        </Form.List>\n        <Form.List name=\"images\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    label={index === 0 ? \"Images\" : \"\"}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      {...field}\n                      validateTrigger={[\"onChange\", \"onBlur\"]}\n                      rules={[\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"Please input image url or delete this field.\"\n                        }\n                      ]}\n                      noStyle\n                    >\n                      <Input value={values.images[index]} placeholder=\"image url\"\n                             style={{ width: \"90%\", marginRight: 8 }}/>\n                    </Form.Item>\n                    {fields.length > 1 ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => {\n                          remove(field.name)\n                        }}\n                      />\n                    ) : <span/>}\n                  </Form.Item>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => {\n                      add()\n                    }}\n                    style={{ width: \"80%\" }}\n                  >\n                    <PlusOutlined/> Add image url\n                  </Button>\n                </Form.Item>\n              </div>\n            )\n          }}\n        </Form.List>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    </Modal>\n  )\n}\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 4 }\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 20 }\n  }\n}\n\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: { span: 24, offset: 0 },\n    sm: { span: 20, offset: 4 }\n  }\n}\n\ninterface StateProps {\n  isOpenEditCategoryModal: Boolean\n  edited_category?: Category | {}\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  isOpenEditCategoryModal: state.edit_cat_modal.isOpen,\n  edited_category: state.edit_category.category\n})\n\nexport default connect<typeof CategoryEditForm>(\n  // TODO:\n// @ts-ignore\n  mapStateToProps,\n  { setIsOpenEditCategoryModal, clearEditCategory }\n)(CategoryEditForm)","import React from \"react\"\nimport { Button, Tooltip } from \"antd\"\nimport { PlusOutlined } from \"@ant-design/icons\"\nimport { connect } from \"react-redux\"\nimport { setIsOpenAddCategoryModal } from \"../../actions\"\nimport CategoriesTable from \"../CategoriesTable\"\nimport CategoryAddForm from \"../CategoryAddForm\"\nimport CategoryEditForm from \"../CategoryEditForm\"\n\nexport interface PropsCategories {\n  setIsOpenAddCategoryModal: (isOpen: Boolean) => void\n}\n\nconst Categories: React.FC<PropsCategories> = ({ setIsOpenAddCategoryModal }) => {\n  const onClickHandler = () => {\n    setIsOpenAddCategoryModal(true)\n  }\n\n  return (\n    <>\n      <h1>Categories</h1>\n      <CategoriesTable/>\n      <CategoryEditForm/>\n      <CategoryAddForm/>\n      <Tooltip title=\"Add Category\">\n        <Button\n          onClick={onClickHandler}\n          type=\"dashed\" shape=\"circle\"\n          style={{ position: \"fixed\", bottom: \"50px\", right: \"50px\", color: \"#08c\" }}\n        ><PlusOutlined\n          style={{ fontSize: \"22px\", color: \"#08c\" }}\n        /></Button>\n      </Tooltip>\n    </>\n  )\n}\n\nexport default connect<typeof Categories>(null, { setIsOpenAddCategoryModal })(Categories)","import React from \"react\"\nimport { CategoryRequireIcons } from \"../../actions/types\"\nimport { Product } from \"../../__generated__/types\"\n\ninterface PropsRecycleBinIcon {\n  categoryById: CategoryRequireIcons\n  productsByCategoryId: Product[]\n}\n\nconst RecycleBinIcon: React.FC<PropsRecycleBinIcon> = ({ categoryById, productsByCategoryId }): any => {\n  if (productsByCategoryId.length === 0) {\n    return <img src={String(categoryById.icons[0])} width={15} alt=\"recycle bin\"/>\n  } else if (productsByCategoryId.length > 0) {\n    return <img src={String(categoryById.icons[3])} width={15} alt=\"recycle bin\"/>\n  }\n}\n\nexport default RecycleBinIcon","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type DeleteProductVariables = {\n  id: Types.Scalars['ID'];\n};\n\n\nexport type DeleteProduct = (\n  { __typename: 'Mutation' }\n  & { deleteProduct?: Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon' | 'categories'>\n  )> }\n);\n\n\nexport const DeleteProductDocument = gql`\n    mutation DeleteProduct($id: ID!) {\n  deleteProduct(id: $id) {\n    id\n    name\n    price\n    images\n    icon\n    categories\n  }\n}\n    `;\nexport type DeleteProductMutationFn = ApolloReactCommon.MutationFunction<DeleteProduct, DeleteProductVariables>;\n\n/**\n * __useDeleteProduct__\n *\n * To run a mutation, you first call `useDeleteProduct` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProduct` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProduct, { data, loading, error }] = useDeleteProduct({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteProduct(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteProduct, DeleteProductVariables>) {\n        return ApolloReactHooks.useMutation<DeleteProduct, DeleteProductVariables>(DeleteProductDocument, baseOptions);\n      }\nexport type DeleteProductHookResult = ReturnType<typeof useDeleteProduct>;\nexport type DeleteProductMutationResult = ApolloReactCommon.MutationResult<DeleteProduct>;\nexport type DeleteProductMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteProduct, DeleteProductVariables>;","import React, { useState } from \"react\"\nimport { Button, Form, Modal, Select, Table, Tag, Tooltip } from \"antd\"\nimport { connect } from \"react-redux\"\nimport { clearEditProduct, editProduct } from \"../../actions\"\nimport { priceToDollars } from \"../../utils/utils\"\nimport { PropsUpdateProduct } from \"../Products/types\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\nimport { RootState } from \"../../reducer\"\nimport {\n  ProductsByCategoryIdDocument,\n  useProductsByCategoryId\n} from \"../Products/queries/__generated__/ProductsByCategoryId\"\nimport { useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { useDeleteProduct } from \"../Products/mutations/__generated__/DeleteProduct\"\nimport { useUpdateProduct } from \"../Products/mutations/__generated__/UpdateProduct\"\nimport { Category, MutationAddProductArgs, Product } from \"../../__generated__/types\"\n\nconst styleImagesInTable = { width: \"50px\", height: \"100%\", marginRight: \"10px\" }\n\ninterface PropsRecycleBinProductsTable {\n  clearEditProduct: () => void\n  editProduct: (product: MutationAddProductArgs) => void\n  edited_product: MutationAddProductArgs\n}\n\nconst RecycleBinProductsTable: React.FC<PropsRecycleBinProductsTable> = (\n  {\n    clearEditProduct,\n    editProduct,\n    edited_product\n  }) => {\n  const { loading: recycle_bin_prod_loading, error: recycle_bin_prod_error, data: recycle_bin_prod_data } = useProductsByCategoryId(\n    {\n      variables: {\n        id: REACT_APP_RECYCLE_BIN_ID\n      }\n    })\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const [values, setValues] = useState({})\n  const [isVisualDeleteModal, setIsVisualDeleteModal] = useState(false)\n  const [isVisualRestoreModal, setIsVisualRestoreModal] = useState(false)\n  const [productDeleted, setProductDeleted] = useState<Product | any>({})\n  const [deleteProduct, {}] = useDeleteProduct({\n      refetchQueries: [{\n        query: ProductsByCategoryIdDocument,\n        variables: {\n          id: REACT_APP_RECYCLE_BIN_ID\n        }\n      }]\n    }\n  )\n  const [updateProduct, {}] = useUpdateProduct({\n      refetchQueries: [{\n        query: ProductsByCategoryIdDocument,\n        variables: {\n          id: REACT_APP_RECYCLE_BIN_ID\n        }\n      }]\n    }\n  )\n  if (cat_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (cat_error || !cat_data) {\n    return (<div>Error...</div>)\n  }\n  const { categoriesAll } = cat_data\n\n  const categoriesAllWithoutRecycleBin = categoriesAll?.filter((category) => {\n    return category?._id !== REACT_APP_RECYCLE_BIN_ID\n  })\n  console.log(\"productDeleted\", productDeleted)\n\n  if (recycle_bin_prod_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (recycle_bin_prod_error || !recycle_bin_prod_data) {\n    return (<div>Error...</div>)\n  }\n  const { productsByCategoryId } = recycle_bin_prod_data\n\n  console.log(\"productsByCategoryId\", recycle_bin_prod_data?.productsByCategoryId)\n\n  const onFinish = (valuefromform: any) => {\n\n    const categoriesWithoutRecyclebin = edited_product?.categories?.filter((category) => {\n      return category !== REACT_APP_RECYCLE_BIN_ID\n    })\n    const productWithoutRecycleBin = {\n      ...edited_product,\n      categories: [valuefromform?.category]\n    }\n\n    const { name, images, price, categories, icon } = productWithoutRecycleBin\n    // TODO:\n    // @ts-ignore\n    const id = String(edited_product.id)\n\n    console.log(\"onFinish\", edited_product)\n    // TODO:\n    // @ts-ignore\n    updateProduct<PropsUpdateProduct>({\n      variables: {\n        id, name, price, categories, images, icon\n      }\n    }).then((m: String) => {\n        console.log(\"updateProductMESSAGE:\", m)\n      }\n    )\n      .catch((e: Error) => console.log(\"updateProductERROR:\", e))\n\n    setIsVisualRestoreModal(false)\n  }\n  const handleEdit = (id: String) => {\n    // TODO:\n    // @ts-ignore\n    const edit_product = productsByCategoryId?.find((prod: Product) => prod.id === id)\n    if (edit_product.categories.length === 1) {\n      editProduct(edit_product)\n      setIsVisualRestoreModal(true)\n    } else {\n      const categoriesWithoutRecyclebin = edit_product.categories.filter((category: String) => {\n        return category !== REACT_APP_RECYCLE_BIN_ID\n      })\n      const productWithoutRecycleBin = {\n        ...edit_product,\n        categories: [...categoriesWithoutRecyclebin]\n      }\n      const {\n        id, name, price, categories, images, icon\n      } = productWithoutRecycleBin\n      console.log(\"productWithoutRecycleBin\", productWithoutRecycleBin)\n      // TODO:\n      // @ts-ignore\n      updateProduct<PropsUpdateProduct>({\n        variables: {\n          id, name, price, categories, images, icon\n        }\n      }).then((m: String) => {\n          console.log(\"updateProductMESSAGE:\", m)\n        }\n      )\n        .catch((e: Error) => console.log(\"updateProductERROR:\", e))\n    }\n  }\n  const handleCancelRestore = () => {\n    clearEditProduct()\n    setIsVisualRestoreModal(false)\n  }\n\n  const handleDelete = (id: String) => {\n    setIsVisualDeleteModal(true)\n    // TODO:\n    // @ts-ignore\n    setProductDeleted(productsByCategoryId?.find((prod: Product) => prod.id === id))\n  }\n\n  const handleOk = (id: String) => {\n    console.log(\"productDeleted.id\", productDeleted.id)\n    deleteProduct({\n      variables: {\n        id: String(id)\n      }\n    }).then(mess => console.log(\"deleteProduct response:\", mess))\n    setIsVisualDeleteModal(false)\n  }\n\n  const handleCancel = () => {\n    setIsVisualDeleteModal(false)\n  }\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target\n    setValues({ ...values, [name]: value })\n  }\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\"\n    },\n    {\n      title: \"ID\",\n      dataIndex: \"id\",\n      key: \"id\"\n    },\n    {\n      title: \"Price\",\n      dataIndex: \"price\",\n      key: \"price\",\n      render: (price: Number) => {\n        return priceToDollars(price)\n      }\n    },\n    {\n      title: \"Categories\",\n      dataIndex: \"categories\",\n      key: \"categories\",\n      render: (categories: String[]) => (\n        <span>\n          {categories.map(tag => (\n            tag !== REACT_APP_RECYCLE_BIN_ID ?\n              <Tag color=\"blue\" key={String(tag)}>\n                {tag}\n              </Tag>\n              :\n              <Tag color=\"red\" key={String(tag)}>\n                {tag}\n              </Tag>\n          ))}\n        </span>\n      )\n    },\n    {\n      title: \"Images\",\n      dataIndex: \"images\",\n      key: \"images\",\n      render: (images: String[]) => {\n        return (images)\n          ? <div>\n            {\n              images\n                .map(image => <img\n                  key={String(image)}\n                  alt=\"img\"\n                  src={String(image)}\n                  style={styleImagesInTable}/>\n                )\n            }\n          </div>\n          : <span>no images</span>\n      }\n    },\n    {\n      title: \"Actions\",\n      dataIndex: \"id\",\n      key: \"id\",\n      render: (id: String) => <>\n        <Tooltip title=\"Recovery this product in any category\">\n          <Button onClick={() => handleEdit(id)} type=\"dashed\">\n            Recovery in category\n          </Button>\n        </Tooltip>\n        <Tooltip title=\"Delete forever\">\n          <Button onClick={() => handleDelete(id)} type=\"dashed\" danger>\n            Delete\n          </Button>\n        </Tooltip>\n      </>\n    }\n  ]\n\n  return (\n    <>\n      <Table\n        // TODO:\n        // @ts-ignore\n        dataSource={productsByCategoryId} columns={columns} rowKey=\"id\"/>\n      <Modal\n        title=\"Delete product?\"\n        visible={isVisualDeleteModal}\n        onOk={() => handleOk(productDeleted.id)}\n        onCancel={handleCancel}\n      >\n        <p>{productDeleted.name}</p>\n      </Modal>\n\n      <Modal\n        footer={false}\n        title=\"Restore in category?\"\n        visible={isVisualRestoreModal}\n        onCancel={handleCancelRestore}\n      >\n        <Form\n          name=\"restore\"\n          // TODO:\n          // @ts-ignore\n          onFinish={onFinish}>\n          <Form.Item\n            label=\"Category\"\n            name=\"category\"\n            // TODO:\n            // @ts-ignore\n            onChange={handleChange}\n            rules={[{ required: true, message: \"Category is required\" }]}\n          >\n            <Select\n              placeholder=\"Select category\">\n              {categoriesAllWithoutRecycleBin?.map((category) =>\n                <Select.Option\n                  // TODO:\n                  // @ts-ignore\n                  key={category?._id}\n                >{category?.name}</Select.Option>\n              )\n              }\n            </Select>\n          </Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Restore\n          </Button>\n        </Form>\n      </Modal>\n    </>\n  )\n}\n\ninterface StateProps {\n  edited_product?: Product | {}\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  edited_product: state.edit_product.product\n})\n\nexport default connect<StateProps, typeof RecycleBinProductsTable>(\n  // TODO:\n  // @ts-ignore\n  mapStateToProps,\n  { editProduct, clearEditProduct })(RecycleBinProductsTable)\n","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type ClearRecycleBinVariables = {};\n\n\nexport type ClearRecycleBin = (\n  { __typename: 'Mutation' }\n  & { clearRecycleBin?: Types.Maybe<{ __typename: 'Product' }> }\n);\n\n\nexport const ClearRecycleBinDocument = gql`\n    mutation ClearRecycleBin {\n  clearRecycleBin {\n    __typename\n  }\n}\n    `;\nexport type ClearRecycleBinMutationFn = ApolloReactCommon.MutationFunction<ClearRecycleBin, ClearRecycleBinVariables>;\n\n/**\n * __useClearRecycleBin__\n *\n * To run a mutation, you first call `useClearRecycleBin` within a React component and pass it any options that fit your needs.\n * When your component renders, `useClearRecycleBin` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [clearRecycleBin, { data, loading, error }] = useClearRecycleBin({\n *   variables: {\n *   },\n * });\n */\nexport function useClearRecycleBin(baseOptions?: ApolloReactHooks.MutationHookOptions<ClearRecycleBin, ClearRecycleBinVariables>) {\n        return ApolloReactHooks.useMutation<ClearRecycleBin, ClearRecycleBinVariables>(ClearRecycleBinDocument, baseOptions);\n      }\nexport type ClearRecycleBinHookResult = ReturnType<typeof useClearRecycleBin>;\nexport type ClearRecycleBinMutationResult = ApolloReactCommon.MutationResult<ClearRecycleBin>;\nexport type ClearRecycleBinMutationOptions = ApolloReactCommon.BaseMutationOptions<ClearRecycleBin, ClearRecycleBinVariables>;","import React, { useState } from \"react\"\nimport RecycleBinProductsTable from \"../RecycleBinProductsTable\"\nimport { Button, Modal, Tooltip } from \"antd\"\nimport { DeleteOutlined } from \"@ant-design/icons\"\nimport { useClearRecycleBin } from \"../Products/mutations/__generated__/ClearRecycleBin\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\nimport { ProductsByCategoryIdDocument } from \"../Products/queries/__generated__/ProductsByCategoryId\"\n\nconst RecycleBin = () => {\n  const [isVisualDeleteModal, setIsVisualDeleteModal] = useState<Boolean>(false)\n  const [clearRecycleBin] = useClearRecycleBin(\n    {\n      refetchQueries: [{\n        query: ProductsByCategoryIdDocument,\n        variables: {\n          id: REACT_APP_RECYCLE_BIN_ID\n        }\n      }]\n    }\n  )\n\n  const handleDelete = () => {\n    setIsVisualDeleteModal(true)\n  }\n\n  const handleOk = () => {\n    clearRecycleBin().then()\n    setIsVisualDeleteModal(false)\n  }\n\n  const handleCancel = () => {\n    setIsVisualDeleteModal(false)\n  }\n\n  return (\n    <>\n      <h1 style={{ display: \"inline-block\" }}>Recycle bin</h1>\n      <Tooltip title=\"Delete all products from recycle bin forever\">\n        <Button style={{ float: \"right\" }} onClick={handleDelete} type=\"dashed\" danger icon={<DeleteOutlined/>}>\n          Clear recycle bin\n        </Button>\n      </Tooltip>\n      <Modal\n        title=\"Clear recycle bin?\"\n        visible={Boolean(isVisualDeleteModal)}\n        onOk={handleOk}\n        onCancel={handleCancel}\n      >\n        <DeleteOutlined/>...\n      </Modal>\n      <RecycleBinProductsTable/>\n    </>\n  )\n}\n\nexport default RecycleBin","import React from \"react\"\nimport { Empty, Tabs } from \"antd\"\nimport Products from \"../Products\"\nimport { useProductsAll } from \"../Products/queries/__generated__/ProductsAll\"\nimport { useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { useProductsByCategoryId } from \"../Products/queries/__generated__/ProductsByCategoryId\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\nimport { useCategoryById } from \"../Categories/queries/__generated__/CategoryById\"\nimport Categories from \"../Categories\"\nimport RecycleBinIcon from \"../RecycleBinIcon\"\nimport RecycleBin from \"../RecycleBin\"\n\nconst { TabPane } = Tabs\n\nfunction callback(key: any) {\n  console.log(key)\n}\n\nconst TabsContainer: React.FC = () => {\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const { loading: prod_loading, error: prod_error, data: prod_data } = useProductsAll()\n  const { loading: recycle_bin_prod_loading, error: recycle_bin_prod_error, data: recycle_bin_prod_data } = useProductsByCategoryId({\n    variables: {\n      id: REACT_APP_RECYCLE_BIN_ID\n    }\n  })\n  const { loading: recycle_bin_cat_loading, error: recycle_bin_cat_error, data: recycle_bin_cat_data } = useCategoryById({\n    variables: {\n      _id: REACT_APP_RECYCLE_BIN_ID\n    }\n  })\n  if (cat_loading || prod_loading || recycle_bin_prod_loading  || recycle_bin_cat_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (cat_error || prod_error  || recycle_bin_prod_error || recycle_bin_cat_error || !cat_data || !prod_data || !recycle_bin_prod_data || !recycle_bin_cat_data ) {\n    return (<div>Error.</div>)\n  }\n\n  const { productsByCategoryId } = recycle_bin_prod_data\n  const { categoryById } = recycle_bin_cat_data\n\n  return (\n    <Tabs defaultActiveKey=\"1\" onChange={callback}>\n      <Tabs.TabPane tab=\"Products\" key=\"1\">\n        <Products/>\n      </Tabs.TabPane>\n      <TabPane tab=\"Categories\" key=\"2\">\n        <Categories/>\n      </TabPane>\n      <TabPane tab={\n        <span>\n          <RecycleBinIcon\n            // TODO:\n            // @ts-ignore\n            categoryById={categoryById} productsByCategoryId={productsByCategoryId}/>\n          Recycle bin\n        </span>\n      } key=\"3\">\n        {(productsByCategoryId?.length === 0) ? <Empty/> : <RecycleBin/>}\n      </TabPane>\n\n    </Tabs>\n  )\n}\n\nexport default TabsContainer","import React from \"react\"\nimport TabsContainer from \"./components/TabsContainer\"\nimport \"antd/dist/antd.css\"\nimport \"./App.css\"\nimport {REACT_APP_BASE_URL} from \"./actions/types\"\n\nconst App: React.FC = () => {\n  console.log(\"app.tsx\")\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          <code>APP</code>\n        </p>\n        <a\n          className=\"App-link\"\n          href={REACT_APP_BASE_URL}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          BASE_URL\n        </a>\n      </header>\n      <TabsContainer/>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ApolloClient from \"apollo-boost\"\nimport { InMemoryCache } from \"apollo-cache-inmemory\"\n\nconst cache = new InMemoryCache();\n\nexport const client = new ApolloClient({\n  cache,\n  uri: process.env.REACT_APP_BASE_URL,\n})\n","import { EditProductModalState, IS_OPEN_EDIT_PRODUCT_MODAL, setIsOpenEditProductModalAction } from \"../actions/types\"\n\nconst initialState: EditProductModalState = {\n  isOpen: false\n}\n\nexport default (state = initialState, action: setIsOpenEditProductModalAction): EditProductModalState => {\n  switch (action.type) {\n    case IS_OPEN_EDIT_PRODUCT_MODAL:\n      return {\n        ...state,\n        isOpen: action.payload\n      }\n    default:\n      return state\n  }\n}","import { AddProductModalState, setIsOpenAddProductModalAction, IS_OPEN_ADD_PRODUCT_MODAL } from \"../actions/types\"\n\nconst initialState: AddProductModalState = {\n  isOpen: false\n}\n\nexport default (state = initialState, action: setIsOpenAddProductModalAction): AddProductModalState => {\n  switch (action.type) {\n    case IS_OPEN_ADD_PRODUCT_MODAL:\n      return {\n        ...state,\n        isOpen: action.payload\n      }\n    default:\n      return state\n  }\n}","import { EditCategoryModalState, IS_OPEN_EDIT_CATEGORY_MODAL, setIsOpenEditCategoryModalAction } from \"../actions/types\"\n\nconst initialState: EditCategoryModalState = {\n  isOpen: false\n}\n\nexport default (state = initialState, action: setIsOpenEditCategoryModalAction): EditCategoryModalState => {\n  switch (action.type) {\n    case IS_OPEN_EDIT_CATEGORY_MODAL:\n      return {\n        ...state,\n        isOpen: action.payload\n      }\n    default:\n      return state\n  }\n}","import { AddCategoryModalState, IS_OPEN_ADD_CATEGORY_MODAL, setIsOpenAddCategoryModalAction } from \"../actions/types\"\n\nconst initialState: AddCategoryModalState = {\n  isOpen: false\n}\n\nexport default (state = initialState, action: setIsOpenAddCategoryModalAction): AddCategoryModalState => {\n  switch (action.type) {\n    case IS_OPEN_ADD_CATEGORY_MODAL:\n      return {\n        ...state,\n        isOpen: action.payload\n      }\n    default:\n      return state\n  }\n}","import { CLEAR_EDIT_PRODUCT, EDIT_PRODUCT, editProductAction, EditProductState } from \"../actions/types\"\n\nconst initialState: EditProductState = {\n  product: {}\n}\n\nexport default (state = initialState, action: editProductAction): EditProductState => {\n  switch (action.type) {\n    case EDIT_PRODUCT:\n      return {\n        ...state,\n        product: action.payload\n      }\n      case CLEAR_EDIT_PRODUCT:\n      return {\n        ...initialState\n      }\n    default:\n      return state\n  }\n}","import { CLEAR_EDIT_CATEGORY, EDIT_CATEGORY, editCategoryAction, EditCategoryState } from \"../actions/types\"\n\nconst initialState: EditCategoryState = {\n  category: {}\n}\n\nexport default (state = initialState, action: editCategoryAction): EditCategoryState => {\n  switch (action.type) {\n    case EDIT_CATEGORY:\n      return {\n        ...state,\n        category: action.payload\n      }\n      case CLEAR_EDIT_CATEGORY:\n      return {\n        ...initialState\n      }\n    default:\n      return state\n  }\n}","import { combineReducers } from \"redux\"\nimport edit_product_modal from \"./edit-prod-modal\"\nimport add_product_modal from \"./add-prod-modal\"\nimport edit_cat_modal from \"./edit-cat-modal\"\nimport add_cat_modal from \"./add-cat-modal\"\nimport edit_product from \"./edit-product\"\nimport edit_category from \"./edit-category\"\n\nexport const rootReducer = combineReducers({\n  add_cat_modal,\n  edit_cat_modal,\n  edit_product_modal,\n  add_product_modal,\n  edit_product,\n  edit_category\n})\n\nexport type RootState = ReturnType<typeof rootReducer>","import { createStore } from \"redux\";\nimport { rootReducer } from \"../reducer\"\nimport { composeWithDevTools } from \"redux-devtools-extension/logOnlyInProduction\"\n// const composeEnhancers =\n//   typeof window === \"object\" &&\n//   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n//     window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n//       // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n//     }) : compose;\n\nconst composeEnhancers = composeWithDevTools();\n\nconst store = createStore(rootReducer, {}, composeEnhancers);\n\nexport default store;","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport { ApolloProvider } from \"react-apollo\"\nimport { ApolloProvider as ApolloHooksProvider } from '@apollo/react-hooks'\n\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { client } from \"./store/apollo-client\"\nimport store from \"./store\"\n\nReactDOM.render(\n  <Provider store={store}>\n    <ApolloProvider client={client}>\n      <ApolloHooksProvider client={client}>\n      <App/>\n        </ApolloHooksProvider>\n    </ApolloProvider>\n  </Provider>, document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}