{"version":3,"sources":["components/Categories/queries/__generated__/CategoriesAll.tsx","actions/types.ts","components/CategoriesTable/index.tsx","components/Categories/index.tsx","actions/index.ts","utils/utils.ts","components/ProductsTable/ProductsTableAntd.tsx","components/Products/queries/__generated__/ProductsAll.tsx","components/Products/mutations/__generated__/UpdateProduct.tsx","components/Products/queries/__generated__/ProductsByCategoryId.tsx","components/ProductsTable/index.tsx","components/Products/mutations.ts","components/Categories/query.ts","components/ProductEditForm/index.tsx","components/Products/query.ts","components/Products/mutations/__generated__/AddProduct.tsx","components/ProductAddForm/index.tsx","components/Products/index.tsx","components/RecycleBinIcon/index.tsx","components/Products/mutations/__generated__/DeleteProduct.tsx","components/RecycleBinProductsTable/index.tsx","components/Products/mutations/__generated__/ClearRecycleBin.tsx","components/RecycleBin/index.tsx","components/Categories/queries/__generated__/CategoryById.tsx","components/TabsContainer/index.tsx","App.tsx","serviceWorker.js","store/apollo-client.ts","reducer/edit-modal.ts","reducer/add-modal.ts","reducer/edit-product.ts","reducer/index.ts","store/index.ts","index.tsx"],"names":["CategoriesAllDocument","gql","useCategoriesAll","baseOptions","ApolloReactHooks","REACT_APP_RECYCLE_BIN_ID","String","process","REACT_APP_NO_IMAGE_AVAILABLE","styleIconInTable","width","height","marginRight","CategoriesTable","cat_loading","loading","cat_error","error","cat_data","data","categoriesAll","categoriesAllWithoutRecycleBin","filter","category","id","columns","title","dataIndex","key","render","icons","length","map","icon","alt","src","style","dataSource","rowKey","Categories","type","shape","position","bottom","right","color","PlusOutlined","fontSize","editProduct","product","payload","clearEditProduct","setIsOpenEditProductModal","isOpen","setIsOpenAddProductModal","priceStringToIntCent","str","Math","round","parseFloat","replace","priceToDollars","price","Number","toLocaleString","currency","styleImagesInTable","ProductsTableAntd","handleEditProp","handleDeleteProp","productsAllWithoutRecycleBinProp","name","images","image","index","onClick","float","danger","ProductsAllDocument","useProductsAll","UpdateProductDocument","useUpdateProduct","ProductsByCategoryIdDocument","useProductsByCategoryId","connect","pure","refetchQueries","query","variables","categoryId","updateProduct","useState","isVisualDeleteModal","setIsVisualDeleteModal","productDeleted","setProductDeleted","console","log","productsAll","productsAllWithoutRecycleBin","prod","find","visible","onOk","then","m","catch","e","handleOk","onCancel","updateProductMutation","categoriesAllQuery","formItemLayout","labelCol","xs","span","sm","wrapperCol","formItemLayoutWithOutLabel","offset","state","isOpenAddProductModal","add_product_modal","edited_product","edit_product","isOpenEditProductModal","Form","useForm","formEditProduct","useMutation","useQuery","values","setValues","useEffect","setFieldsValue","resetFields","handleChange","target","value","Boolean","footer","forceRender","destroyOnClose","form","onFinish","valuefromformlist","Item","label","rules","required","message","onChange","placeholder","Option","firstActiveValue","List","fields","add","remove","field","validateTrigger","whitespace","noStyle","className","htmlType","productsAllQuery","productsByCategoryIdQuery","AddProductDocument","update","cache","addProduct","readQuery","allTasks","writeQuery","concat","data_categories","RecycleBinIcon","categoryById","productsByCategoryId","DeleteProductDocument","recycle_bin_prod_loading","recycle_bin_prod_data","isVisualRestoreModal","setIsVisualRestoreModal","deleteProduct","handleEdit","handleDelete","mess","clearRecycleBinDocument","RecycleBin","clearRecycleBin","display","r","CategoryByIdDocument","TabPane","Tabs","callback","TabsContainer","prod_loading","prod_error","prod_data","recycle_bin_loading","recycle_bin_error","recycle_bin_data","recycle_bin_prod_error","recycle_bin_cat_loading","recycle_bin_cat_error","recycle_bin_cat_data","defaultActiveKey","tab","App","href","rel","window","location","hostname","match","InMemoryCache","client","ApolloClient","uri","initialState","rootReducer","combineReducers","edit_product_modal","action","composeEnhancers","composeWithDevTools","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c36aba8.chunk.js","sourcesContent":["import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type CategoriesAllVariables = {};\n\n\nexport type CategoriesAll = (\n  { __typename: 'Query' }\n  & { categoriesAll?: Types.Maybe<Array<Types.Maybe<(\n    { __typename: 'Category' }\n    & Pick<Types.Category, 'id' | 'name' | 'icons'>\n  )>>> }\n);\n\n\nexport const CategoriesAllDocument = gql`\n    query CategoriesAll {\n  categoriesAll {\n    id\n    name\n    icons\n  }\n}\n    `;\n\n/**\n * __useCategoriesAll__\n *\n * To run a query within a React component, call `useCategoriesAll` and pass it any options that fit your needs.\n * When your component renders, `useCategoriesAll` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCategoriesAll({\n *   variables: {\n *   },\n * });\n */\nexport function useCategoriesAll(baseOptions?: ApolloReactHooks.QueryHookOptions<CategoriesAll, CategoriesAllVariables>) {\n        return ApolloReactHooks.useQuery<CategoriesAll, CategoriesAllVariables>(CategoriesAllDocument, baseOptions);\n      }\nexport function useCategoriesAllLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CategoriesAll, CategoriesAllVariables>) {\n          return ApolloReactHooks.useLazyQuery<CategoriesAll, CategoriesAllVariables>(CategoriesAllDocument, baseOptions);\n        }\nexport type CategoriesAllHookResult = ReturnType<typeof useCategoriesAll>;\nexport type CategoriesAllLazyQueryHookResult = ReturnType<typeof useCategoriesAllLazyQuery>;\nexport type CategoriesAllQueryResult = ApolloReactCommon.QueryResult<CategoriesAll, CategoriesAllVariables>;","import { Product } from \"../__generated__apollo__/types-query\"\nimport { MutationAddProductArgs } from \"../__generated__/types\"\nimport { StoreValue } from 'rc-field-form/lib/interface';\nexport const IS_OPEN_ADD_MODAL = \"IS_OPEN_ADD_MODAL\"\nexport const IS_OPEN_EDIT_MODAL = \"IS_OPEN_EDIT_MODAL\"\nexport const EDIT_PRODUCT = \"EDIT_PRODUCT\"\nexport const CLEAR_EDIT_PRODUCT = \"CLEAR_EDIT_PRODUCT\"\nexport const REACT_APP_RECYCLE_BIN_ID = String(process.env.REACT_APP_RECYCLE_BIN_ID)\nexport const REACT_APP_NO_IMAGE_AVAILABLE = String(process.env.REACT_APP_NO_IMAGE_AVAILABLE)\n\n// export interface FieldData {\n//   name: number;\n//   key: number;\n//   fieldKey: number;\n// }\n// export interface FormListProps {\n//   name: string | number | (string | number)[];\n//   children: (fields: FieldData[], operation: Operation) => React.ReactNode;\n// }\n// export interface Operation {\n//   add: (defaultValue?: StoreValue) => void;\n//   remove: (index: number) => void;\n//   move: (from: number, to: number) => void;\n// }\n\n\nexport interface AddProductModalState {\n  isOpen: Boolean\n}\n\nexport interface mstpAddProductModalState {\n  isOpenAddProductModal: Boolean\n}\n\n// export interface Product {\n//   id?: String\n//   name?: String\n//   categoryId?: String\n//   price?: Number\n//   images?: String[]\n//   icon?: String\n// }\n\n// export interface ProductCat {\n//   id?: String\n//   name?: String\n//   category?: {\n//     id?: String\n//     name?: String\n//     icons?: String[]\n//   }\n//   price?: Number\n//   images?: String[]\n//   icon?: String\n// }\n\nexport interface Category {\n  id?: String\n  name?: String\n  icons?: String[]\n}\n\nexport interface CategoryRequireIcons {\n  id?: String\n  name?: String\n  icons: String[]\n}\n\n\nexport interface setIsOpenAddProductModalAction {\n  type: typeof IS_OPEN_ADD_MODAL\n  payload: Boolean\n}\n\nexport interface EditProductModalState {\n  isOpen: Boolean\n}\n\nexport interface setIsOpenEditProductModalAction {\n  type: typeof IS_OPEN_EDIT_MODAL\n  payload: Boolean\n}\n\nexport interface EditProductState {\n  product?: Product | {}\n}\n\nexport interface mstpEditProductState {\n  edited_product?: Product | {}\n}\n\nexport interface editProductAction {\n  type: typeof EDIT_PRODUCT |  typeof CLEAR_EDIT_PRODUCT\n  payload?: Product | {}\n}\n","import React from \"react\"\nimport { useQuery } from \"@apollo/react-hooks\"\nimport { Table } from \"antd\"\nimport { categoriesAllQuery } from \"../Categories/query\"\nimport { useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { Category } from \"../../__generated__/types\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\n\nconst styleIconInTable = { width: \"20px\", height: \"100%\", marginRight: \"10px\" }\n\nconst CategoriesTable: React.FC = () => {\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n\n  if (cat_loading) {\n    return (<div>Loading...</div>) // tslint:disable\n  }\n  if (cat_error || !cat_data) {\n    return (<div>Error...</div>)\n  }\n  const { categoriesAll } = cat_data\n  // @ts-ignore\n  const categoriesAllWithoutRecycleBin = categoriesAll?.filter((category: Category) => {\n    return category?.id !== REACT_APP_RECYCLE_BIN_ID\n  })\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\"\n    },\n    {\n      title: \"ID\",\n      dataIndex: \"id\",\n      key: \"id\"\n    },\n    {\n      title: \"Icons\",\n      dataIndex: \"icons\",\n      key: \"icons\",\n      render: (icons: String[]) => {\n        return (icons.length !== 0)\n          ? <div>\n            {\n              icons\n                .map(icon => <img\n                  key={String(icon)} alt=\"img\"\n                  src={String(icon)}\n                  style={styleIconInTable}/>\n                )\n            }\n          </div>\n          : <span>no icons</span>\n      }\n    }\n  ]\n\n  return (\n    <>\n      <Table dataSource={categoriesAllWithoutRecycleBin} columns={columns} rowKey=\"id\"/>\n    </>\n  )\n}\n\nexport default CategoriesTable","import React from \"react\"\nimport { Button, Tooltip } from \"antd\"\nimport { PlusOutlined } from \"@ant-design/icons\"\nimport CategoriesTable from \"../CategoriesTable\"\n\nconst Categories: React.FC = () => {\n  return (\n    <>\n      <h1>Categories</h1>\n      <CategoriesTable/>\n      <Tooltip title=\"Add Category\">\n        <Button type=\"dashed\" shape=\"circle\"\n                style={{ position: \"fixed\", bottom: \"50px\", right: \"50px\", color: \"#08c\" }}\n        ><PlusOutlined\n          style={{ fontSize: \"22px\", color: \"#08c\" }}\n        /></Button>\n      </Tooltip>\n    </>\n  )\n}\n\nexport default Categories","import {\n  EDIT_PRODUCT,\n  IS_OPEN_EDIT_MODAL,\n  IS_OPEN_ADD_MODAL,\n  editProductAction, setIsOpenEditProductModalAction, setIsOpenAddProductModalAction, CLEAR_EDIT_PRODUCT\n} from \"./types\"\nimport { Product } from \"../__generated__apollo__/types-query\"\n\nexport const editProduct = (product: Product): editProductAction => ({\n  type: EDIT_PRODUCT,\n  payload: product\n})\n\nexport const clearEditProduct = () => ({\n  type: CLEAR_EDIT_PRODUCT\n})\n\nexport const setIsOpenEditProductModal = (isOpen: Boolean): setIsOpenEditProductModalAction => ({\n  type: IS_OPEN_EDIT_MODAL,\n  payload: isOpen\n})\n\nexport const setIsOpenAddProductModal = (isOpen: Boolean): setIsOpenAddProductModalAction => ({\n  type: IS_OPEN_ADD_MODAL,\n  payload: isOpen\n})\n","export const priceStringToIntCent = (str: string) => {\n  return Math.round(100 * parseFloat(str.replace(/[$,]/g, '')));\n}\nexport const priceToDollars = (price: any) => {\n  return Number(price / 100)\n    .toLocaleString(\"en-US\", { style: \"currency\", currency: \"USD\" })\n}\n\nexport function toArray<T>(candidate?: T | T[] | false): T[] {\n  if (candidate === undefined || candidate === false) return [];\n\n  return Array.isArray(candidate) ? candidate : [candidate];\n}\n","import React from \"react\"\nimport { ColumnProps } from \"antd/es/table\"\nimport { Category, CategoryRequireIcons } from \"../../actions/types\"\nimport { priceToDollars } from \"../../utils/utils\"\nimport { Button, Table, Tooltip } from \"antd\"\nimport DeleteOutlined from \"@ant-design/icons/lib/icons/DeleteOutlined\"\nimport { PropsProductsTableAntd } from \"../Products/types\"\n\nconst styleImagesInTable = { width: \"50px\", height: \"100%\", marginRight: \"10px\" }\nconst styleIconInTable = { width: \"20px\", height: \"100%\", marginRight: \"10px\" }\n\nconst ProductsTableAntd: React.FC<PropsProductsTableAntd> = ({ handleEditProp, handleDeleteProp, productsAllWithoutRecycleBinProp }) => {\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\"\n    },\n    {\n      title: \"ID\",\n      dataIndex: \"id\",\n      key: \"id\"\n    },\n    {\n      title: \"Price\",\n      dataIndex: \"price\",\n      key: \"price\",\n      render: (price: Number) => {\n        return priceToDollars(price)\n      }\n    },\n    {\n      title: \"Category\",\n      dataIndex: \"category\",\n      key: \"category\",\n      render: (category: CategoryRequireIcons) => {\n        const { name, icons, id } = category\n        return (\n          <div>\n            <span>{name} </span>\n            {\n              (icons?.length !== 0)\n                ? <img\n                  key={String(icons[0])}\n                  alt=\"img\"\n                  src={String(icons[0])} style={styleIconInTable}/> : \"\"\n            }\n            <span> {id} </span>\n          </div>)\n      }\n    },\n    {\n      title: \"Images\",\n      dataIndex: \"images\",\n      key: \"images\",\n      render: (images: String[]) => {\n        return (images)\n          ? <div>\n            {\n              images\n                .map((image, index) => <img\n                  key={String(`${image}+${index}`)}\n                  alt=\"img\"\n                  src={String(image)}\n                  style={styleImagesInTable}/>\n                )\n            }\n          </div>\n          : <span>no  images</span>\n      }\n    },\n    {\n      title: \"Actions\",\n      dataIndex: \"id\",\n      key: \"id\",\n      render: (id: String) => <>\n        <Tooltip title=\"Edit this product\">\n          <Button onClick={() => handleEditProp(id)}\n                  type=\"dashed\">\n            Edit\n          </Button>\n        </Tooltip>\n        <Tooltip\n          title=\"Move to recycle bin\">\n          <Button style={{ float: \"right\" }}\n                  onClick={() => handleDeleteProp(id)}\n                  type=\"dashed\"\n                  danger\n                  icon={<DeleteOutlined/>}>\n          </Button>\n        </Tooltip>\n      </>\n    }\n  ]\n  return (\n    <>\n      <Table\n        // @ts-ignore\n        dataSource={productsAllWithoutRecycleBinProp}\n        columns={columns}\n        rowKey=\"id\"/>\n    </>\n  )\n}\n\nexport default ProductsTableAntd","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type ProductsAllVariables = {};\n\n\nexport type ProductsAll = (\n  { __typename: 'Query' }\n  & { productsAll?: Types.Maybe<Array<Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon'>\n    & { category?: Types.Maybe<(\n      { __typename: 'Category' }\n      & Pick<Types.Category, 'id' | 'name' | 'icons'>\n    )> }\n  )>>> }\n);\n\n\nexport const ProductsAllDocument = gql`\n    query ProductsAll {\n  productsAll {\n    id\n    name\n    price\n    images\n    icon\n    category {\n      id\n      name\n      icons\n    }\n  }\n}\n    `;\n\n/**\n * __useProductsAll__\n *\n * To run a query within a React component, call `useProductsAll` and pass it any options that fit your needs.\n * When your component renders, `useProductsAll` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProductsAll({\n *   variables: {\n *   },\n * });\n */\nexport function useProductsAll(baseOptions?: ApolloReactHooks.QueryHookOptions<ProductsAll, ProductsAllVariables>) {\n        return ApolloReactHooks.useQuery<ProductsAll, ProductsAllVariables>(ProductsAllDocument, baseOptions);\n      }\nexport function useProductsAllLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProductsAll, ProductsAllVariables>) {\n          return ApolloReactHooks.useLazyQuery<ProductsAll, ProductsAllVariables>(ProductsAllDocument, baseOptions);\n        }\nexport type ProductsAllHookResult = ReturnType<typeof useProductsAll>;\nexport type ProductsAllLazyQueryHookResult = ReturnType<typeof useProductsAllLazyQuery>;\nexport type ProductsAllQueryResult = ApolloReactCommon.QueryResult<ProductsAll, ProductsAllVariables>;","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type UpdateProductVariables = {\n  id: Types.Scalars['ID'];\n  name: Types.Scalars['String'];\n  price: Types.Scalars['Float'];\n  categoryId: Types.Scalars['ID'];\n  images?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  icon?: Types.Maybe<Types.Scalars['String']>;\n};\n\n\nexport type UpdateProduct = (\n  { __typename: 'Mutation' }\n  & { updateProduct?: Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon'>\n    & { category?: Types.Maybe<(\n      { __typename: 'Category' }\n      & Pick<Types.Category, 'id' | 'name' | 'icons'>\n    )> }\n  )> }\n);\n\n\nexport const UpdateProductDocument = gql`\n    mutation UpdateProduct($id: ID!, $name: String!, $price: Float!, $categoryId: ID!, $images: [String], $icon: String) {\n  updateProduct(id: $id, name: $name, price: $price, categoryId: $categoryId, images: $images, icon: $icon) {\n    id\n    name\n    price\n    images\n    icon\n    category {\n      id\n      name\n      icons\n    }\n  }\n}\n    `;\nexport type UpdateProductMutationFn = ApolloReactCommon.MutationFunction<UpdateProduct, UpdateProductVariables>;\n\n/**\n * __useUpdateProduct__\n *\n * To run a mutation, you first call `useUpdateProduct` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProduct` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProduct, { data, loading, error }] = useUpdateProduct({\n *   variables: {\n *      id: // value for 'id'\n *      name: // value for 'name'\n *      price: // value for 'price'\n *      categoryId: // value for 'categoryId'\n *      images: // value for 'images'\n *      icon: // value for 'icon'\n *   },\n * });\n */\nexport function useUpdateProduct(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateProduct, UpdateProductVariables>) {\n        return ApolloReactHooks.useMutation<UpdateProduct, UpdateProductVariables>(UpdateProductDocument, baseOptions);\n      }\nexport type UpdateProductHookResult = ReturnType<typeof useUpdateProduct>;\nexport type UpdateProductMutationResult = ApolloReactCommon.MutationResult<UpdateProduct>;\nexport type UpdateProductMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateProduct, UpdateProductVariables>;","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type ProductsByCategoryIdVariables = {\n  categoryId: Types.Scalars['ID'];\n};\n\n\nexport type ProductsByCategoryId = (\n  { __typename: 'Query' }\n  & { productsByCategoryId?: Types.Maybe<Array<Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon'>\n    & { category?: Types.Maybe<(\n      { __typename: 'Category' }\n      & Pick<Types.Category, 'id' | 'name' | 'icons'>\n    )> }\n  )>>> }\n);\n\n\nexport const ProductsByCategoryIdDocument = gql`\n    query ProductsByCategoryId($categoryId: ID!) {\n  productsByCategoryId(categoryId: $categoryId) {\n    id\n    name\n    price\n    images\n    icon\n    category {\n      id\n      name\n      icons\n    }\n  }\n}\n    `;\n\n/**\n * __useProductsByCategoryId__\n *\n * To run a query within a React component, call `useProductsByCategoryId` and pass it any options that fit your needs.\n * When your component renders, `useProductsByCategoryId` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProductsByCategoryId({\n *   variables: {\n *      categoryId: // value for 'categoryId'\n *   },\n * });\n */\nexport function useProductsByCategoryId(baseOptions?: ApolloReactHooks.QueryHookOptions<ProductsByCategoryId, ProductsByCategoryIdVariables>) {\n        return ApolloReactHooks.useQuery<ProductsByCategoryId, ProductsByCategoryIdVariables>(ProductsByCategoryIdDocument, baseOptions);\n      }\nexport function useProductsByCategoryIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProductsByCategoryId, ProductsByCategoryIdVariables>) {\n          return ApolloReactHooks.useLazyQuery<ProductsByCategoryId, ProductsByCategoryIdVariables>(ProductsByCategoryIdDocument, baseOptions);\n        }\nexport type ProductsByCategoryIdHookResult = ReturnType<typeof useProductsByCategoryId>;\nexport type ProductsByCategoryIdLazyQueryHookResult = ReturnType<typeof useProductsByCategoryIdLazyQuery>;\nexport type ProductsByCategoryIdQueryResult = ApolloReactCommon.QueryResult<ProductsByCategoryId, ProductsByCategoryIdVariables>;","import React, { useState } from \"react\"\nimport { Modal } from \"antd\"\nimport { connect } from \"react-redux\"\nimport { editProduct, setIsOpenEditProductModal } from \"../../actions\"\nimport { Product, ProductCatId } from \"../../__generated__apollo__/types-query\"\nimport { PropsProductsTable } from \"../Products/types\"\n\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\n\nimport ProductsTableAntd from \"./ProductsTableAntd\"\nimport { useProductsAll } from \"../Products/queries/__generated__/ProductsAll\"\nimport { useUpdateProduct } from \"../Products/mutations/__generated__/UpdateProduct\"\nimport { ProductsByCategoryIdDocument } from \"../Products/queries/__generated__/ProductsByCategoryId\"\n\nconst ProductsTable: React.FC<PropsProductsTable> = ({ editProduct, setIsOpenEditProductModal }) => {\n  const { loading, error, data } = useProductsAll()\n  const [updateProduct, {}] = useUpdateProduct(\n    {\n      refetchQueries: [{\n        query: ProductsByCategoryIdDocument,\n        variables: {\n          categoryId: REACT_APP_RECYCLE_BIN_ID\n        }\n      }]\n    }\n\n    //   {\n    // // @ts-ignore\n    //     update(cache, { data: { updateProduct } }) {\n    //       const dataReadQuery = cache.readQuery<AllTasksResult>({\n    //         query: ProductsByCategoryIdDocument, variables: {\n    //           categoryId: REACT_APP_RECYCLE_BIN_ID\n    //         }\n    //       })!.allTasks\n    //       cache.writeQuery({\n    //         query: ProductsByCategoryIdDocument,\n    //         variables: {\n    //           categoryId: REACT_APP_RECYCLE_BIN_ID\n    //         },\n    //         data: { productsByCategoryId: dataReadQuery?.productsByCategoryId.concat([updateProduct]) }\n    //       })\n    //     }\n    //   }\n  )\n  const [isVisualDeleteModal, setIsVisualDeleteModal] = useState<Boolean>(false)\n  // @ts-ignore\n  const [productDeleted, setProductDeleted] = useState<Product>({})\n  console.log(\"productDeleted\", productDeleted)\n  if (loading) {\n    return (<div>Loading...</div>) // tslint:disable\n  }\n  if (error || !data) {\n    return (<div>Error...</div>)\n  }\n  const { productsAll } = data\n  // @ts-ignore\n  const productsAllWithoutRecycleBin = productsAll?.filter((prod: Product) => {\n    return prod?.category?.id !== REACT_APP_RECYCLE_BIN_ID\n  })\n\n  const handleEdit = (id: String): void => {\n    const prod = productsAllWithoutRecycleBin?.find((prod: Product) => prod.id === id)\n    editProduct(prod)\n    setIsOpenEditProductModal(true)\n  }\n\n  const handleDelete = (id: String): void => {\n    setIsVisualDeleteModal(true)\n    setProductDeleted(productsAllWithoutRecycleBin.find((prod: Product) => prod.id === id))\n  }\n\n  const handleOk = (productDeleted: ProductCatId | any): void => {\n    const { id, name, price, images, icon } = productDeleted\n    const categoryId = REACT_APP_RECYCLE_BIN_ID\n\n    updateProduct({\n      variables: {\n        id, name, price, categoryId, images, icon\n      }\n    }).then(m => console.log(\"updateProductMESSAGE:\", m))\n      .catch((e: Error) => console.log(\"updateProductERROR:\", e))\n\n    setIsVisualDeleteModal(false)\n  }\n\n  const handleCancel = () => {\n    setIsVisualDeleteModal(false)\n  }\n\n  return (\n    <>\n      <ProductsTableAntd productsAllWithoutRecycleBinProp={productsAllWithoutRecycleBin}\n                         handleEditProp={handleEdit}\n                         handleDeleteProp={handleDelete}/>\n      <Modal\n        title=\"Delete product in recycle bin?\"\n        // @ts-ignore\n        visible={isVisualDeleteModal}\n        onOk={() => handleOk(productDeleted)}\n        onCancel={handleCancel}\n      >\n        <p>{productDeleted.id}</p>\n      </Modal>\n    </>\n  )\n}\n\nexport default connect<typeof ProductsTable>(null, {\n  setIsOpenEditProductModal,\n  editProduct\n}, null, { pure: false })(ProductsTable)","import { gql } from \"apollo-boost\"\n\nexport const addProductMutation = gql`\n    mutation addProduct($name: String!, $price: Float!, $categoryId: ID!, $images: [String], $icon: String ) {\n        addProduct(name: $name, price: $price, categoryId: $categoryId, images: $images, icon: $icon ){\n            id\n            name\n            price\n            images\n            icon\n            category{\n                id\n                name\n                icons\n            }\n        }\n    }\n`\n\nexport const updateProductMutation = gql`\n    mutation updateProduct($id: ID!, $name: String!, $price: Float!, $categoryId: ID!, $images: [String], $icon: String ) {\n        updateProduct(id: $id, name: $name, price: $price, categoryId: $categoryId, images: $images, icon: $icon){\n            id\n            name\n            price\n            images\n            icon\n            category{\n                id\n                name\n                icons\n            }\n        }\n    }\n`\n\nexport const deleteProductMutation = gql`\n    mutation deleteProduct($id: ID!) {\n        deleteProduct(id: $id){\n            id\n            name\n            price\n            images\n            icon\n            category{\n                id\n                name\n                icons\n            }\n        }\n    }\n`\nexport const clearRecycleBinMutation = gql`\n    mutation clearRecycleBin {\n        clearRecycleBin{\n            __typename\n        }\n    }\n`\n\n\n","import { gql } from \"apollo-boost\";\n\nexport const categoriesAllQuery = gql`\n    query categoriesAll{\n        categoriesAll{\n            id,\n            name,\n            icons\n        }\n    }\n`\nexport const categoryByIdQuery = gql`\n    query categoryById($id: ID){\n        categoryById(id: $id){\n            id\n            name\n            icons\n        }\n    }\n`","import React, { useEffect, useState } from \"react\"\nimport { Button, Form, Input, Modal, Select, Skeleton } from \"antd\"\nimport { useMutation, useQuery } from \"@apollo/react-hooks\"\nimport PlusOutlined from \"@ant-design/icons/lib/icons/PlusOutlined\"\nimport MinusCircleOutlined from \"@ant-design/icons/lib/icons/MinusCircleOutlined\"\nimport { updateProductMutation } from \"../Products/mutations\"\nimport { categoriesAllQuery } from \"../Categories/query\"\nimport { connect } from \"react-redux\"\nimport { clearEditProduct, editProduct, setIsOpenEditProductModal } from \"../../actions\"\nimport { priceStringToIntCent } from \"../../utils/utils\"\nimport { Category, MutationUpdateProductArgs } from \"../../__generated__/types\"\nimport { Product, ProductCatId } from \"../../__generated__apollo__/types-query\"\nimport { RootState } from \"../../reducer\"\n\ninterface PropsProductEditForm {\n  edited_product: Product\n  editProduct: (product: MutationUpdateProductArgs) => void\n  clearEditProduct: () => void\n  setIsOpenEditProductModal: (isOpen: Boolean) => void\n  isOpenEditProductModal: Boolean\n}\n\nconst ProductEditForm: React.FC<PropsProductEditForm> = ({ clearEditProduct, edited_product, editProduct, isOpenEditProductModal, setIsOpenEditProductModal }) => {\n  const [formEditProduct] = Form.useForm()\n  const [updateProduct, {}] = useMutation(updateProductMutation)\n  const { loading, error, data } = useQuery(categoriesAllQuery)\n  // @ts-ignore\n  const [values, setValues] = useState<ProductCatId>({})\n  useEffect(() => {\n    setValues(edited_product)\n    console.log(\"edited_product\", edited_product)\n  }, [edited_product])\n  useEffect(() => {\n    formEditProduct.setFieldsValue({\n      \"name\": edited_product.name,\n      \"price\": edited_product.price,\n      \"images\": edited_product.images,\n      \"icon\": edited_product.icon\n    })\n    return () => {\n      formEditProduct.resetFields()\n    }\n  }, [edited_product])\n  console.log(\"values+++\", values)\n\n  const onFinish = (valuefromformlist: ProductCatId) => {\n    console.log(\"Received values of form:\", values)\n\n    const { name, categoryId, images, icon } = valuefromformlist\n    const id = String(values?.id)\n    const price = priceStringToIntCent(String(valuefromformlist.price))\n    console.log(\"onFinish\", valuefromformlist)\n    updateProduct({\n      variables: {\n        id, name, price, categoryId, images, icon\n      }\n    }).then(m => console.log(\"updateProductMESSAGE:\", m))\n      .catch(e => console.log(\"updateProductERROR:\", e))\n    setIsOpenEditProductModal(false)\n  }\n  const handleCancel = () => {\n    setIsOpenEditProductModal(false)\n    clearEditProduct()\n  }\n  const handleChange = (e: { target: HTMLInputElement }) => {\n    const { name, value } = e.target\n    setValues({ ...values, [name]: value })\n  }\n\n  if (!data.categoriesAll) return <Skeleton/>\n  const { categoriesAll } = data\n  if (!edited_product) return <Skeleton/>\n  const { category } = edited_product\n  console.log(\"cat\", category)\n  console.log(\"OpenEditProductModal\", isOpenEditProductModal)\n\n  return (\n    <Modal\n      title={`Product information id: ${values.id}`}\n      visible={Boolean(isOpenEditProductModal)}\n      footer={false}\n      onCancel={handleCancel}\n      forceRender={true}\n      destroyOnClose={false}\n    >\n\n      <Form\n        form={formEditProduct}\n        name=\"product\" {...formItemLayoutWithOutLabel}\n        // @ts-ignore\n        onFinish={onFinish}>\n\n        <Form.Item\n          label=\"Name product\"\n          name=\"name\"\n          // noStyle\n          // @ts-ignore\n          value={String(values?.name)}\n          rules={[{ required: true, message: \"Name product is required\" }]}\n        >\n          <Input\n            // name=\"name\"\n            // value={values.name}\n            onChange={handleChange} placeholder=\"name product\"\n            style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n        <Form.Item\n          label=\"Price\"\n          name=\"price\"\n          // noStyle\n          rules={[{ required: true, message: \"Price is required\" }]}\n        >\n          <Input type=\"number\" placeholder=\"Price $\" style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n\n        <Form.Item\n          label=\"Category\"\n          name=\"categoryId\"\n          // noStyle\n          // defaultValue=\"5e820a91e3cd504a9fef2b0f\"\n          // @ts-ignore\n          onChange={handleChange}\n          rules={[{ required: true, message: \"Category is required\" }]}\n        >\n          <Select\n            // defaultValue={category.name}\n            placeholder=\"Select category\">\n            {categoriesAll.map((category: Category) =>\n              <Select.Option\n                key={String(category?.id)}\n                firstActiveValue=\"nike\"\n                value={String(category?.id)}\n              >{category.name}</Select.Option>\n            )\n            }\n          </Select>\n        </Form.Item>\n\n        <Form.List name=\"images\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    label={index === 0 ? \"Images\" : \"\"}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      {...field}\n                      validateTrigger={[\"onChange\", \"onBlur\"]}\n                      rules={[\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"Please input image url or delete this field.\"\n                        }\n                      ]}\n                      noStyle\n                    >\n                      <Input value={values.images[index]} placeholder=\"image url\"\n                             style={{ width: \"90%\", marginRight: 8 }}/>\n                    </Form.Item>\n                    {fields.length > 1 ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => {\n                          remove(field.name)\n                        }}\n                      />\n                    ) : <span/>}\n                  </Form.Item>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => {\n                      add()\n                    }}\n                    style={{ width: \"80%\" }}\n                  >\n                    <PlusOutlined/> Add image url\n                  </Button>\n                </Form.Item>\n              </div>\n            )\n          }}\n        </Form.List>\n        <Form.Item\n          label=\"Icon\"\n          name=\"icon\"\n          // noStyle\n        >\n          <Input onChange={handleChange} placeholder=\"icon url\" style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form>\n\n    </Modal>\n  )\n}\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 4 }\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 20 }\n  }\n}\n\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: { span: 24, offset: 0 },\n    sm: { span: 20, offset: 4 }\n  }\n}\n\ninterface StateProps {\n  isOpenAddProductModal: Boolean\n  edited_product?: Product | {}\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  isOpenAddProductModal: state.add_product_modal.isOpen,\n  edited_product: state.edit_product.product\n})\n\nexport default connect<typeof ProductEditForm>(\n// @ts-ignore\n  mapStateToProps,\n  { setIsOpenEditProductModal, editProduct, clearEditProduct }\n)(ProductEditForm)","import { gql } from \"apollo-boost\"\n\nexport const productsAllQuery = gql`\n    query productsAll{\n        productsAll{\n            id\n            name\n            price\n            images\n            icon\n            category{\n                id\n                name\n                icons\n            }\n        }\n    }\n`\nexport const productsByCategoryIdQuery = gql`\n    query productsByCategoryId($categoryId: ID!){\n        productsByCategoryId(categoryId: $categoryId){\n            id\n            name\n            price\n            images\n            icon\n            category{\n                id\n                name\n                icons\n            }\n        }\n    }\n`\n\n","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type AddProductVariables = {\n  name: Types.Scalars['String'];\n  price: Types.Scalars['Float'];\n  categoryId: Types.Scalars['ID'];\n  images?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  icon?: Types.Maybe<Types.Scalars['String']>;\n};\n\n\nexport type AddProduct = (\n  { __typename: 'Mutation' }\n  & { addProduct?: Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon'>\n    & { category?: Types.Maybe<(\n      { __typename: 'Category' }\n      & Pick<Types.Category, 'id' | 'name' | 'icons'>\n    )> }\n  )> }\n);\n\n\nexport const AddProductDocument = gql`\n    mutation AddProduct($name: String!, $price: Float!, $categoryId: ID!, $images: [String], $icon: String) {\n  addProduct(name: $name, price: $price, categoryId: $categoryId, images: $images, icon: $icon) {\n    id\n    name\n    price\n    images\n    icon\n    category {\n      id\n      name\n      icons\n    }\n  }\n}\n    `;\nexport type AddProductMutationFn = ApolloReactCommon.MutationFunction<AddProduct, AddProductVariables>;\n\n/**\n * __useAddProduct__\n *\n * To run a mutation, you first call `useAddProduct` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProduct` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProduct, { data, loading, error }] = useAddProduct({\n *   variables: {\n *      name: // value for 'name'\n *      price: // value for 'price'\n *      categoryId: // value for 'categoryId'\n *      images: // value for 'images'\n *      icon: // value for 'icon'\n *   },\n * });\n */\nexport function useAddProduct(baseOptions?: ApolloReactHooks.MutationHookOptions<AddProduct, AddProductVariables>) {\n        return ApolloReactHooks.useMutation<AddProduct, AddProductVariables>(AddProductDocument, baseOptions);\n      }\nexport type AddProductHookResult = ReturnType<typeof useAddProduct>;\nexport type AddProductMutationResult = ApolloReactCommon.MutationResult<AddProduct>;\nexport type AddProductMutationOptions = ApolloReactCommon.BaseMutationOptions<AddProduct, AddProductVariables>;","import React, { useEffect, useRef, useState } from \"react\"\nimport { Button, Form, Input, Modal, Select } from \"antd\"\nimport { useQuery } from \"@apollo/react-hooks\"\nimport PlusOutlined from \"@ant-design/icons/lib/icons/PlusOutlined\"\nimport MinusCircleOutlined from \"@ant-design/icons/lib/icons/MinusCircleOutlined\"\nimport { connect } from \"react-redux\"\nimport { setIsOpenAddProductModal } from \"../../actions\"\nimport { productsAllQuery } from \"../Products/query\"\nimport { priceStringToIntCent, toArray } from \"../../utils/utils\"\nimport {\n  Category,\n  REACT_APP_NO_IMAGE_AVAILABLE, REACT_APP_RECYCLE_BIN_ID\n} from \"../../actions/types\"\nimport { RootState } from \"../../reducer\"\nimport { AllTasksResult } from \"../Products/types\"\nimport { useAddProduct } from \"../Products/mutations/__generated__/AddProduct\"\nimport { ProductsAllDocument } from \"../Products/queries/__generated__/ProductsAll\"\nimport { ProductCatId } from \"../../__generated__apollo__/types-query\"\nimport { CategoriesAllDocument } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { ProductsByCategoryIdDocument } from \"../Products/queries/__generated__/ProductsByCategoryId\"\n\ntype PropsProductAddForm = {\n  setIsOpenAddProductModal: (isOpen: Boolean) => void\n  isOpenAddProductModal: Boolean\n}\n\nconst ProductAddForm: React.FC<PropsProductAddForm> = ({ isOpenAddProductModal, setIsOpenAddProductModal }) => {\n  const [addProduct, {}] = useAddProduct(\n    {\n      // @ts-ignore\n      update(cache, { data: { addProduct } }) {\n        const { productsAll } = cache.readQuery<AllTasksResult>({ query: ProductsAllDocument })!.allTasks\n        cache.writeQuery({\n          query: productsAllQuery,\n          data: { productsAll: productsAll.concat([addProduct]) }\n        })\n      },\n      refetchQueries: [{\n        query: ProductsAllDocument,\n      }]\n    }\n  )\n  const { loading, error, data: data_categories } = useQuery(CategoriesAllDocument)\n  // @ts-ignore\n  const [values, setValues] = useState<ProductCatId>({})\n  console.log(\"values+++\", values)\n\n  const onFinish = (valuefromformlist: ProductCatId) => {\n    console.log(\"Received values of form:\", values)\n\n    const { name, categoryId, icon } = values\n    const price = priceStringToIntCent(values.price)\n    console.log(\"onFinish\")\n    addProduct({\n      variables: {\n        name,\n        price,\n        categoryId,\n        images: !valuefromformlist.images ? [REACT_APP_NO_IMAGE_AVAILABLE] : valuefromformlist.images,\n        icon\n      }\n    }).then(m => console.log(\"addProduct:\", m))\n      .catch(e => console.log(\"addProductERROR:\", e))\n\n    setIsOpenAddProductModal(false)\n  }\n\n  const handleCancel = () => {\n    setIsOpenAddProductModal(false)\n  }\n\n  const handleChange = (e: { target: HTMLInputElement }) => {\n    const { name, value } = e.target\n    console.log(\"target\", e.target)\n    setValues({ ...values, [name]: value })\n  }\n\n  const handleChangeSelect = (value: string) => {\n    setValues({ ...values, \"categoryId\": value })\n  }\n  const { categoriesAll = [] } = data_categories\n  console.log(\"isOpenAddProductModal\", isOpenAddProductModal)\n\n  return (\n    <Modal\n      title=\"Product information\"\n      visible={Boolean(isOpenAddProductModal)}\n      footer={false}\n      // onOk={onFinish}\n      onCancel={handleCancel}\n      // forceRender={true}\n      // destroyOnClose={true}\n      // okButtonProps={{htmlType: \"submit\" }}\n      // cancelButtonProps={{ htmlType: \"submit\" }}\n    >\n      <Form\n        // onChange={handleChange}\n        name=\"product\" {...formItemLayoutWithOutLabel}\n        // @ts-ignore\n        onFinish={onFinish}>\n        <Form.Item\n          label=\"Name product\"\n          rules={[{ required: true, message: \"Name product is required\" }]}\n        >\n          <Input\n            name=\"name\"\n            onChange={handleChange} placeholder=\"name product\"\n            style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n        <Form.Item\n          label=\"Price\"\n          rules={[{ required: true, message: \"Price is required\" }]}\n        >\n          <Input\n            name=\"price\"\n            onChange={handleChange}\n            // value={0}\n            type=\"number\" placeholder=\"Price $\" style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n\n        <Form.Item\n          label=\"Category\"\n          name=\"categoryId\"\n          // noStyle\n          // onChange={handleChange}\n          rules={[{ required: true, message: \"Category is required\" }]}\n        >\n          <Select\n            // @ts-ignore\n            name=\"categoryId\"\n            // onChange={handleChange}\n            onChange={handleChangeSelect}\n            placeholder=\"Select category\">\n            {categoriesAll.map((category: Category) =>\n              <Select.Option\n                key={String(category.id)}\n                value={String(category.id)}\n                onChange={handleChange}\n              >{category.name}</Select.Option>\n            )\n            }\n          </Select>\n        </Form.Item>\n\n        <Form.List name=\"images\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    label={index === 0 ? \"Images\" : \"\"}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      {...field}\n                      validateTrigger={[\"onChange\", \"onBlur\"]}\n                      rules={[\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"Please input image url or delete this field.\"\n                        }\n                      ]}\n                      noStyle\n                    >\n                      <Input\n                        // value={values.images[index]}\n                        style={{ width: \"90%\", marginRight: 8 }}/>\n                    </Form.Item>\n\n                    {(fields.length >= 1) ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => {\n                          remove(field.name)\n                        }}\n                      />\n                    ) : <span/>}\n                  </Form.Item>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => {\n                      add()\n                    }}\n                    style={{ width: \"80%\" }}\n                  >\n                    <PlusOutlined/> Add image url\n                  </Button>\n                </Form.Item>\n              </div>\n            )\n          }}\n        </Form.List>\n        <Form.Item\n          label=\"Icon\"\n          name=\"icon\"\n          // noStyle\n        >\n          <Input onChange={handleChange} placeholder=\"icon url\" style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form>\n\n    </Modal>\n  )\n}\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 4 }\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 20 }\n  }\n}\n\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: { span: 24, offset: 0 },\n    sm: { span: 20, offset: 4 }\n  }\n}\n\ninterface StateProps {\n  isOpenAddProductModal: Boolean\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  isOpenAddProductModal: state.add_product_modal.isOpen\n})\n\nexport default connect<typeof ProductAddForm>(\n// @ts-ignore\n  mapStateToProps,\n  { setIsOpenAddProductModal }\n)(ProductAddForm)","import React from \"react\"\nimport { Button, Tooltip } from \"antd\"\nimport { PlusOutlined } from \"@ant-design/icons\"\nimport ProductsTable from \"../ProductsTable\"\nimport ProductEditForm from \"../ProductEditForm\"\nimport ProductAddForm from \"../ProductAddForm\"\nimport { connect } from \"react-redux\"\nimport { clearEditProduct, editProduct, setIsOpenAddProductModal } from \"../../actions\"\nimport { EditProductState } from \"../../actions/types\"\n\nexport interface PropsProducts {\n  clearEditProduct: () => void\n  setIsOpenAddProductModal: (isOpen: Boolean) => void\n}\n\nconst Products: React.FC<PropsProducts> = ({ setIsOpenAddProductModal, clearEditProduct }) => {\n\n  const onClickHandler = () => {\n    clearEditProduct()\n    setIsOpenAddProductModal(true)\n  }\n  return (\n    <>\n      <h1>Products</h1>\n      <ProductsTable/>\n      <ProductEditForm/>\n      <ProductAddForm/>\n      <Tooltip title=\"Add Product\">\n        <Button onClick={onClickHandler} type=\"dashed\" shape=\"circle\"\n                style={{ position: \"fixed\", bottom: \"50px\", right: \"50px\", color: \"#08c\" }}\n        ><PlusOutlined\n          style={{ fontSize: \"22px\", color: \"#08c\" }}\n        /></Button>\n      </Tooltip>\n    </>\n  )\n}\n\nexport default connect<typeof Products>(null, { setIsOpenAddProductModal, clearEditProduct }, null, { pure: false })(Products)","import React from \"react\"\nimport { CategoryRequireIcons } from \"../../actions/types\"\nimport { Product } from \"../../__generated__/types\"\n\ninterface PropsRecycleBinIcon {\n  categoryById: CategoryRequireIcons\n  productsByCategoryId: Product[]\n}\n\nconst RecycleBinIcon: React.FC<PropsRecycleBinIcon> = ({ categoryById, productsByCategoryId }): any => {\n  if (productsByCategoryId.length === 0) {\n    return <img src={String(categoryById.icons[0])} width={15} alt=\"recycle bin\"/>\n  } else if (productsByCategoryId.length > 0) {\n    return <img src={String(categoryById.icons[3])} width={15} alt=\"recycle bin\"/>\n  }\n}\n\nexport default RecycleBinIcon","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type DeleteProductVariables = {\n  id: Types.Scalars['ID'];\n};\n\n\nexport type DeleteProduct = (\n  { __typename: 'Mutation' }\n  & { deleteProduct?: Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon'>\n    & { category?: Types.Maybe<(\n      { __typename: 'Category' }\n      & Pick<Types.Category, 'id' | 'name' | 'icons'>\n    )> }\n  )> }\n);\n\n\nexport const DeleteProductDocument = gql`\n    mutation DeleteProduct($id: ID!) {\n  deleteProduct(id: $id) {\n    id\n    name\n    price\n    images\n    icon\n    category {\n      id\n      name\n      icons\n    }\n  }\n}\n    `;\nexport type DeleteProductMutationFn = ApolloReactCommon.MutationFunction<DeleteProduct, DeleteProductVariables>;\n\n/**\n * __useDeleteProduct__\n *\n * To run a mutation, you first call `useDeleteProduct` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProduct` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProduct, { data, loading, error }] = useDeleteProduct({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteProduct(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteProduct, DeleteProductVariables>) {\n        return ApolloReactHooks.useMutation<DeleteProduct, DeleteProductVariables>(DeleteProductDocument, baseOptions);\n      }\nexport type DeleteProductHookResult = ReturnType<typeof useDeleteProduct>;\nexport type DeleteProductMutationResult = ApolloReactCommon.MutationResult<DeleteProduct>;\nexport type DeleteProductMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteProduct, DeleteProductVariables>;","import React, { useState } from \"react\"\nimport { Button, Form, Modal, Select, Skeleton, Table, Tooltip } from \"antd\"\nimport { productsByCategoryIdQuery } from \"../Products/query\"\nimport { connect } from \"react-redux\"\nimport { clearEditProduct, editProduct } from \"../../actions\"\nimport { priceToDollars } from \"../../utils/utils\"\nimport { PropsUpdateProduct } from \"../Products/types\"\nimport {\n  Product,\n  ProductCatId\n} from \"../../__generated__apollo__/types-query\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\nimport { RootState } from \"../../reducer\"\nimport { useProductsByCategoryId } from \"../Products/queries/__generated__/ProductsByCategoryId\"\nimport { useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { useDeleteProduct } from \"../Products/mutations/__generated__/DeleteProduct\"\nimport { useUpdateProduct } from \"../Products/mutations/__generated__/UpdateProduct\"\nimport { MutationAddProductArgs } from \"../../__generated__/types\"\n\nconst styleImagesInTable = { width: \"50px\", height: \"100%\", marginRight: \"10px\" }\nconst styleIconInTable = { width: \"20px\", height: \"100%\", marginRight: \"10px\" }\n\ninterface PropsRecycleBinProductsTable {\n  clearEditProduct: () => void\n  editProduct: (product: MutationAddProductArgs) => void\n  edited_product: MutationAddProductArgs\n}\n\nconst RecycleBinProductsTable: React.FC<PropsRecycleBinProductsTable> = ({\n                                                                           clearEditProduct,\n                                                                           editProduct,\n                                                                           edited_product\n                                                                         }) => {\n  const { loading: recycle_bin_prod_loading, error: recycle_bin_prod_error, data: recycle_bin_prod_data } = useProductsByCategoryId({\n    variables: {\n      categoryId: REACT_APP_RECYCLE_BIN_ID\n    }\n  })\n  const { loading, error, data } = useCategoriesAll()\n  const [values, setValues] = useState({})\n  const [isVisualDeleteModal, setIsVisualDeleteModal] = useState(false)\n  const [isVisualRestoreModal, setIsVisualRestoreModal] = useState(false)\n  // @ts-ignore\n  const [productDeleted, setProductDeleted] = useState<Product>({})\n  const [deleteProduct, {}] = useDeleteProduct({\n      refetchQueries: [{\n        query: productsByCategoryIdQuery,\n        variables: {\n          categoryId: REACT_APP_RECYCLE_BIN_ID\n        }\n      }]\n    }\n  )\n  const [updateProduct, {}] = useUpdateProduct({\n      refetchQueries: [{\n        query: productsByCategoryIdQuery,\n        variables: {\n          categoryId: REACT_APP_RECYCLE_BIN_ID\n        }\n      }]\n    }\n  )\n\n  if (!data) return <p>Loading ... </p>\n  const { categoriesAll } = data\n\n  console.log(\"productDeleted\", productDeleted)\n\n  if (recycle_bin_prod_loading) return <p>Loading ... </p>\n\n  // @ts-ignore\n  const { productsByCategoryId } = recycle_bin_prod_data\n\n  console.log(\"productsByCategoryId\", recycle_bin_prod_data?.productsByCategoryId)\n  const onFinish = (valuefromformlist: ProductCatId) => {\n    console.log(\"Received values of form:\", values)\n\n    const { categoryId } = valuefromformlist\n\n    const { name, images, price, icon } = edited_product\n    // @ts-ignore\n    const id = String(edited_product.id)\n\n    console.log(\"onFinish\", valuefromformlist)\n    // @ts-ignore\n    updateProduct<PropsUpdateProduct>({\n      variables: {\n        id, name, price, categoryId, images, icon\n      }\n    }).then((m: String) => {\n        console.log(\"updateProductMESSAGE:\", m)\n      }\n    )\n      .catch((e: Error) => console.log(\"updateProductERROR:\", e))\n\n    // form.resetFields()\n    setIsVisualRestoreModal(false)\n  }\n  const handleEdit = (id: String) => {\n    editProduct(productsByCategoryId.find((prod: Product) => prod.id === id))\n    setIsVisualRestoreModal(true)\n  }\n  const handleCancelRestore = () => {\n    clearEditProduct()\n    setIsVisualRestoreModal(false)\n  }\n\n  const handleDelete = (id: String) => {\n    setIsVisualDeleteModal(true)\n    setProductDeleted(productsByCategoryId.find((prod: Product) => prod.id === id))\n  }\n\n  const handleOk = (id: String) => {\n    console.log(\"productDeleted.id\", productDeleted.id)\n    deleteProduct({\n      variables: {\n        id: String(id)\n      }\n    }).then(mess => console.log(\"deleteProduct response:\", mess))\n    setIsVisualDeleteModal(false)\n  }\n\n  const handleCancel = () => {\n    setIsVisualDeleteModal(false)\n  }\n\n  const handleChange = (e: { target: HTMLInputElement }) => {\n    const { name, value } = e.target\n    setValues({ ...values, [name]: value })\n  }\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\"\n    },\n    {\n      title: \"ID\",\n      dataIndex: \"id\",\n      key: \"id\"\n    },\n    {\n      title: \"Price\",\n      dataIndex: \"price\",\n      key: \"price\",\n      render: (price: Number) => {\n        return priceToDollars(price)\n      }\n    },\n    {\n      title: \"Images\",\n      dataIndex: \"images\",\n      key: \"images\",\n      render: (images: String[]) => {\n        return (images)\n          ? <div>\n            {\n              images\n                .map(image => <img\n                  // @ts-ignore\n                  key={image} alt=\"img\"\n                  // @ts-ignore\n                  src={image}\n                  style={styleImagesInTable}/>\n                )\n            }\n          </div>\n          : <span>no images</span>\n      }\n    },\n    {\n      title: \"Actions\",\n      dataIndex: \"id\",\n      key: \"id\",\n      render: (id: String) => <>\n        <Tooltip title=\"Recovery this product in any category\">\n          <Button onClick={() => handleEdit(id)} type=\"dashed\">\n            Recovery in category\n          </Button>\n        </Tooltip>\n        <Tooltip title=\"Delete forever\">\n          <Button onClick={() => handleDelete(id)} type=\"dashed\" danger>\n            Delete\n          </Button>\n        </Tooltip>\n      </>\n    }\n  ]\n\n  return (\n    <>\n      <Table dataSource={productsByCategoryId} columns={columns} rowKey=\"id\"/>\n      <Modal\n        title=\"Delete product?\"\n        visible={isVisualDeleteModal}\n        onOk={() => handleOk(productDeleted.id)}\n        onCancel={handleCancel}\n      >\n        <p>{productDeleted.name}</p>\n      </Modal>\n\n      <Modal\n        footer={false}\n        title=\"Restore in category?\"\n        visible={isVisualRestoreModal}\n        onCancel={handleCancelRestore}\n      >\n        <Form\n          // @ts-ignore\n          name=\"restore\" onFinish={onFinish}>\n          <Form.Item\n            label=\"Category\"\n            name=\"categoryId\"\n            // @ts-ignore\n            onChange={handleChange}\n            rules={[{ required: true, message: \"Category is required\" }]}\n          >\n            <Select\n              placeholder=\"Select category\">\n              {categoriesAll?.map((category) =>\n                <Select.Option\n                  // @ts-ignore\n                  key={category.id}\n                >{category?.name}</Select.Option>\n              )\n              }\n            </Select>\n          </Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Restore\n          </Button>\n        </Form>\n      </Modal>\n    </>\n  )\n}\n\n\ninterface StateProps {\n  edited_product?: Product | {}\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  edited_product: state.edit_product.product\n})\n\nexport default connect<StateProps, typeof RecycleBinProductsTable>(\n// @ts-ignore\n  mapStateToProps,\n  { editProduct, clearEditProduct })(RecycleBinProductsTable)\n","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type clearRecycleBinVariables = {};\n\n\nexport type clearRecycleBin = (\n  { __typename: 'Mutation' }\n  & { clearRecycleBin?: Types.Maybe<{ __typename: 'Product' }> }\n);\n\n\nexport const clearRecycleBinDocument = gql`\n    mutation clearRecycleBin {\n  clearRecycleBin {\n    __typename\n  }\n}\n    `;\nexport type clearRecycleBinMutationFn = ApolloReactCommon.MutationFunction<clearRecycleBin, clearRecycleBinVariables>;\n\n/**\n * __useclearRecycleBin__\n *\n * To run a mutation, you first call `useclearRecycleBin` within a React component and pass it any options that fit your needs.\n * When your component renders, `useclearRecycleBin` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [clearRecycleBin, { data, loading, error }] = useclearRecycleBin({\n *   variables: {\n *   },\n * });\n */\nexport function useclearRecycleBin(baseOptions?: ApolloReactHooks.MutationHookOptions<clearRecycleBin, clearRecycleBinVariables>) {\n        return ApolloReactHooks.useMutation<clearRecycleBin, clearRecycleBinVariables>(clearRecycleBinDocument, baseOptions);\n      }\nexport type clearRecycleBinHookResult = ReturnType<typeof useclearRecycleBin>;\nexport type clearRecycleBinMutationResult = ApolloReactCommon.MutationResult<clearRecycleBin>;\nexport type clearRecycleBinMutationOptions = ApolloReactCommon.BaseMutationOptions<clearRecycleBin, clearRecycleBinVariables>;","import React, { useState } from \"react\"\nimport RecycleBinProductsTable from \"../RecycleBinProductsTable\"\nimport { Button, Modal, Tooltip } from \"antd\"\nimport { DeleteOutlined } from \"@ant-design/icons\"\nimport { productsByCategoryIdQuery } from \"../Products/query\"\nimport { AllTasksResult } from \"../Products/types\"\nimport { useclearRecycleBin } from \"../Products/mutations/__generated__/ClearRecycleBin\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\n\nconst RecycleBin = () => {\n  const [isVisualDeleteModal, setIsVisualDeleteModal] = useState<Boolean>(false)\n  const [clearRecycleBin] = useclearRecycleBin(\n    {\n      refetchQueries: [{\n        query: productsByCategoryIdQuery,\n        variables: {\n          categoryId: REACT_APP_RECYCLE_BIN_ID\n        }\n      }]\n    }\n\n    // {\n    // // @ts-ignore\n    //   update(cache, { data: { clearRecycleBin } }) {\n    //     const { productsByCategoryId } = cache.readQuery<AllTasksResult>({\n    //       query: productsByCategoryIdQuery,\n    //       variables: {\n    //         categoryId: process.env.REACT_APP_RECYCLE_BIN_ID\n    //       }\n    //     })!.allTasks\n    //     cache.writeQuery({\n    //       query: productsByCategoryIdQuery,\n    //       variables: { categoryId: process.env.REACT_APP_RECYCLE_BIN_ID },\n    //       data: { productsByCategoryId: [] }\n    //     })\n    //   }\n    // }\n  )\n\n  const handleDelete = () => {\n    setIsVisualDeleteModal(true)\n  }\n  const handleOk = () => {\n    clearRecycleBin().then(r => console.log(\"Cleared recycle bin\"))\n    setIsVisualDeleteModal(false)\n  }\n\n  const handleCancel = () => {\n    setIsVisualDeleteModal(false)\n  }\n\n  return (\n    <>\n      <h1 style={{ display: \"inline-block\" }}>Recycle bin</h1>\n      <Tooltip title=\"Delete all products from recycle bin forever\">\n        <Button style={{ float: \"right\" }} onClick={handleDelete} type=\"dashed\" danger icon={<DeleteOutlined/>}>\n          Clear recycle bin\n        </Button>\n      </Tooltip>\n      <Modal\n        title=\"Clear recycle bin?\"\n        // @ts-ignore\n        visible={isVisualDeleteModal}\n        onOk={handleOk}\n        onCancel={handleCancel}\n      >\n        <DeleteOutlined/>...\n      </Modal>\n      <RecycleBinProductsTable/>\n    </>\n  )\n}\n\nexport default RecycleBin","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type CategoryByIdVariables = {\n  id?: Types.Maybe<Types.Scalars['ID']>;\n};\n\nexport type CategoryById = (\n  { __typename: 'Query' }\n  & { categoryById?: Types.Maybe<(\n    { __typename: 'Category' }\n    & Pick<Types.Category, 'id' | 'name' | 'icons'>\n  )> }\n);\n\nexport const CategoryByIdDocument = gql`\n    query CategoryById($id: ID) {\n  categoryById(id: $id) {\n    id\n    name\n    icons\n  }\n}\n    `;\n\n/**\n * __useCategoryById__\n *\n * To run a query within a React component, call `useCategoryById` and pass it any options that fit your needs.\n * When your component renders, `useCategoryById` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCategoryById({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useCategoryById(baseOptions?: ApolloReactHooks.QueryHookOptions<CategoryById, CategoryByIdVariables>) {\n        return ApolloReactHooks.useQuery<CategoryById, CategoryByIdVariables>(CategoryByIdDocument, baseOptions);\n      }\nexport function useCategoryByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CategoryById, CategoryByIdVariables>) {\n          return ApolloReactHooks.useLazyQuery<CategoryById, CategoryByIdVariables>(CategoryByIdDocument, baseOptions);\n        }\nexport type CategoryByIdHookResult = ReturnType<typeof useCategoryById>;\nexport type CategoryByIdLazyQueryHookResult = ReturnType<typeof useCategoryByIdLazyQuery>;\nexport type CategoryByIdQueryResult = ApolloReactCommon.QueryResult<CategoryById, CategoryByIdVariables>;","import React from \"react\"\nimport { Empty, Tabs } from \"antd\"\nimport Categories from \"../Categories\"\nimport Products from \"../Products\"\nimport { Query } from \"react-apollo\"\nimport { useQuery } from \"@apollo/react-hooks\"\nimport { categoriesAllQuery, categoryByIdQuery } from \"../Categories/query\"\nimport { productsAllQuery, productsByCategoryIdQuery } from \"../Products/query\"\nimport AndroidOutlined from \"@ant-design/icons/lib/icons/AndroidOutlined\"\nimport RecycleBinIcon from \"../RecycleBinIcon\"\nimport RecycleBin from \"../RecycleBin\"\nimport { useProductsAll } from \"../Products/queries/__generated__/ProductsAll\"\nimport { useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { useProductsByCategoryId } from \"../Products/queries/__generated__/ProductsByCategoryId\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\nimport { useCategoryById } from \"../Categories/queries/__generated__/CategoryById\"\n\nconst { TabPane } = Tabs\n\nfunction callback(key: any) {\n  console.log(key)\n}\n\nconst TabsContainer: React.FC = () => {\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const { loading: prod_loading, error: prod_error, data: prod_data } = useProductsAll()\n  const { loading: recycle_bin_loading, error: recycle_bin_error, data: recycle_bin_data } = useProductsByCategoryId({\n    variables: {\n      categoryId: REACT_APP_RECYCLE_BIN_ID\n    }\n  })\n  const { loading: recycle_bin_prod_loading, error: recycle_bin_prod_error, data: recycle_bin_prod_data } = useProductsByCategoryId({\n    variables: {\n      categoryId: REACT_APP_RECYCLE_BIN_ID\n    }\n  })\n  const { loading: recycle_bin_cat_loading, error: recycle_bin_cat_error, data: recycle_bin_cat_data } = useCategoryById({\n    variables: {\n      id: REACT_APP_RECYCLE_BIN_ID\n    }\n  })\n  if (cat_loading || prod_loading || recycle_bin_prod_loading || recycle_bin_loading || recycle_bin_cat_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (cat_error || prod_error || recycle_bin_error || recycle_bin_prod_error || recycle_bin_cat_error || !cat_data || !prod_data || !recycle_bin_prod_data || !recycle_bin_cat_data || !recycle_bin_data) {\n    return (<div>Error...</div>)\n  }\n  const { categoriesAll } = cat_data\n  const { productsAll } = prod_data\n  const { productsByCategoryId } = recycle_bin_prod_data\n  const { categoryById } = recycle_bin_cat_data\n\n  return (\n    <Tabs defaultActiveKey=\"1\" onChange={callback}>\n      <Tabs.TabPane tab=\"Products\" key=\"1\">\n        <Products/>\n      </Tabs.TabPane>\n      <TabPane tab=\"Categories\" key=\"2\">\n        <Categories/>\n      </TabPane>\n      <TabPane tab={\n        <span>\n          <RecycleBinIcon\n            // @ts-ignore\n            categoryById={categoryById} productsByCategoryId={productsByCategoryId}/>\n          Recycle bin\n        </span>\n      } key=\"3\">\n        {(productsByCategoryId?.length === 0) ? <Empty/> : <RecycleBin/>}\n      </TabPane>\n\n    </Tabs>\n  )\n}\n\nexport default TabsContainer","import React from \"react\"\nimport TabsContainer from \"./components/TabsContainer\"\nimport \"antd/dist/antd.css\"\nimport \"./App.css\"\n\nconst App: React.FC = () => {\n  console.log(\"app.tsx\")\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          <code>APP</code>\n        </p>\n        <a\n          className=\"App-link\"\n          href={process.env.REACT_APP_BASE_URL}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          BASE_URL\n        </a>\n      </header>\n      <TabsContainer/>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ApolloClient from \"apollo-boost\"\nimport { InMemoryCache } from \"apollo-cache-inmemory\"\n\nconst cache = new InMemoryCache();\n\nexport const client = new ApolloClient({\n  cache,\n  uri: process.env.REACT_APP_BASE_URL,\n})\n","import { EditProductModalState, IS_OPEN_EDIT_MODAL, setIsOpenEditProductModalAction } from \"../actions/types\"\n\nconst initialState: EditProductModalState = {\n  isOpen: false\n}\n\nexport default (state = initialState, action: setIsOpenEditProductModalAction): EditProductModalState => {\n  switch (action.type) {\n    case IS_OPEN_EDIT_MODAL:\n      return {\n        ...state,\n        isOpen: action.payload\n      }\n    default:\n      return state\n  }\n}","import { AddProductModalState, setIsOpenAddProductModalAction, IS_OPEN_ADD_MODAL } from \"../actions/types\"\n\nconst initialState: AddProductModalState = {\n  isOpen: false\n}\n\nexport default (state = initialState, action: setIsOpenAddProductModalAction): AddProductModalState => {\n  switch (action.type) {\n    case IS_OPEN_ADD_MODAL:\n      return {\n        ...state,\n        isOpen: action.payload\n      }\n    default:\n      return state\n  }\n}","import { CLEAR_EDIT_PRODUCT, EDIT_PRODUCT, editProductAction, EditProductState } from \"../actions/types\"\n\nconst initialState: EditProductState = {\n  product: {}\n}\n\nexport default (state = initialState, action: editProductAction): EditProductState => {\n  switch (action.type) {\n    case EDIT_PRODUCT:\n      return {\n        ...state,\n        product: action.payload\n      }\n      case CLEAR_EDIT_PRODUCT:\n      return {\n        ...initialState\n      }\n    default:\n      return state\n  }\n}","import { combineReducers } from \"redux\"\nimport edit_product_modal from \"./edit-modal\"\nimport add_product_modal from \"./add-modal\"\nimport edit_product from \"./edit-product\"\n\nexport const rootReducer = combineReducers({ edit_product_modal, add_product_modal, edit_product })\n\nexport type RootState = ReturnType<typeof rootReducer>","import { createStore } from \"redux\";\nimport { rootReducer } from \"../reducer\"\nimport { composeWithDevTools } from \"redux-devtools-extension/logOnlyInProduction\"\n// const composeEnhancers =\n//   typeof window === \"object\" &&\n//   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n//     window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n//       // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n//     }) : compose;\n\nconst composeEnhancers = composeWithDevTools();\n\nconst store = createStore(rootReducer, {}, composeEnhancers);\n\nexport default store;","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport { ApolloProvider } from \"react-apollo\"\nimport { ApolloProvider as ApolloHooksProvider } from '@apollo/react-hooks'\n\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { client } from \"./store/apollo-client\"\nimport store from \"./store\"\n\nReactDOM.render(\n  <Provider store={store}>\n    <ApolloProvider client={client}>\n      <ApolloHooksProvider client={client}>\n      <App/>\n        </ApolloHooksProvider>\n    </ApolloProvider>\n  </Provider>, document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}