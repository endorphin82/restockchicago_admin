{"version":3,"sources":["actions/types.ts","actions/index.ts","components/Products/mutations/__generated__/AddProduct.tsx","components/Products/queries/__generated__/ProductsAll.tsx","components/Categories/queries/__generated__/CategoriesAll.tsx","components/ProductAddForm/index.tsx","utils/utils.ts","components/ProductsTable/ProductsTableAntd.tsx","components/Products/mutations/__generated__/UpdateProduct.tsx","components/Products/queries/__generated__/ProductsByCategoryId.tsx","components/ProductsTable/index.tsx","components/Products/index.tsx","components/Categories/queries/__generated__/CategoryById.tsx","components/Categories/mutations/__generated__/DeleteCascadeCategoryWithProductsById.tsx","components/CategoriesTable/index.tsx","components/Categories/mutations/__generated__/AddCategory.tsx","components/CategoryAddForm/index.tsx","components/Categories/index.tsx","components/TabsContainer/index.tsx","App.tsx","serviceWorker.js","store/apollo-client.ts","reducer/edit-prod-modal.ts","reducer/add-prod-modal.ts","reducer/edit-cat-modal.ts","reducer/add-cat-modal.ts","reducer/edit-product.ts","reducer/edit-category.ts","reducer/index.ts","store/index.ts","index.tsx"],"names":["REACT_APP_RECYCLE_BIN_ID","String","process","REACT_APP_NO_IMAGE_AVAILABLE","setIsOpenAddProductModal","isOpen","type","payload","setIsOpenAddCategoryModal","AddProductDocument","gql","ProductsAllDocument","useProductsAll","baseOptions","ApolloReactHooks","CategoriesAllDocument","useCategoriesAll","formItemLayout","labelCol","xs","span","sm","wrapperCol","formItemLayoutWithOutLabel","offset","connect","state","isOpenAddProductModal","add_product_modal","update","cache","addProduct","data","productsAll","readQuery","query","writeQuery","concat","refetchQueries","cat_loading","loading","cat_error","error","cat_data","useState","values","setValues","console","log","handleChange","e","target","name","value","categoriesAll","categoriesAllWithoutRecycleBin","filter","category","id","title","visible","Boolean","footer","onCancel","onFinish","valuefromformlist","str","icon","categories","price","Math","round","parseFloat","replace","variables","images","then","m","catch","Item","label","rules","required","message","onChange","placeholder","style","width","marginRight","mode","map","Option","key","List","fields","add","remove","field","index","validateTrigger","whitespace","noStyle","length","className","onClick","htmlType","styleImagesInTable","height","ProductsTableAntd","handleEditProp","handleDeleteProp","productsAllWithoutRecycleBinProp","columns","dataIndex","render","Number","toLocaleString","currency","priceToDollars","tag","color","image","alt","src","float","danger","dataSource","rowKey","UpdateProductDocument","ProductsByCategoryIdDocument","useProductsByCategoryId","setIsOpenEditProductModal","editProduct","product","catId","updateProduct","isVisualDeleteModal","setIsVisualDeleteModal","productDeleted","setProductDeleted","productsAllWithoutRecycleBin","prod","includes","find","onOk","push","handleOk","clearEditProduct","shape","position","bottom","right","PlusOutlined","fontSize","CategoryByIdDocument","DeleteCascadeCategoryWithProductsByIdDocument","styleIconInTable","editCategory","setIsOpenEditCategoryModal","deleteCascadeCategoryWithProductsById","categoryDeleted","setCategoryDeleted","icons","cat","handleEdit","handleDelete","mess","AddCategoryDocument","isOpenAddCategoryModal","add_cat_modal","addCategory","TabPane","Tabs","callback","TabsContainer","prod_loading","prod_error","prod_data","recycle_bin_loading","recycle_bin_error","recycle_bin_data","recycle_bin_prod_loading","recycle_bin_prod_error","recycle_bin_prod_data","recycle_bin_cat_loading","recycle_bin_cat_error","recycle_bin_cat_data","productsByCategoryId","categoryById","defaultActiveKey","tab","App","href","rel","window","location","hostname","match","InMemoryCache","client","ApolloClient","uri","initialState","rootReducer","combineReducers","action","edit_cat_modal","edit_product_modal","edit_product","edit_category","composeEnhancers","composeWithDevTools","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+XAUaA,EAA2BC,OAAOC,cAElCC,EAA+BF,OAAOC,wFC6BtCE,EAA2B,SAACC,GAAD,MAAsD,CAC5FC,KDxCuC,4BCyCvCC,QAASF,IAQEG,EAA4B,SAACH,GAAD,MAAuD,CAC9FC,KD/CwC,6BCgDxCC,QAASF,I,kZC7BJ,IAAMI,EAAqBC,IAAH,K,gMCNxB,IAAMC,EAAsBD,IAAH,KA4BzB,SAASE,EAAeC,GACvB,OAAOC,IAA6DH,EAAqBE,G,sLC7B1F,IAAME,EAAwBL,IAAH,KA2B3B,SAASM,EAAiBH,GACzB,OAAOC,IAAiEC,EAAuBF,GCxBvG,IAiMMI,EAAiB,CACrBC,SAAU,CACRC,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,IAEdE,WAAY,CACVH,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,MAIVG,EAA6B,CACjCD,WAAY,CACVH,GAAI,CAAEC,KAAM,GAAII,OAAQ,GACxBH,GAAI,CAAED,KAAM,GAAII,OAAQ,KAYbC,eAJS,SAACC,GAAD,MAAmC,CACzDC,sBAAuBD,EAAME,kBAAkBvB,UAO/C,CAAED,4BAJWqB,EA3NuC,SAAC,GAAyD,IHqClFZ,EGrC2Bc,EAAsD,EAAtDA,sBAAuBvB,EAA+B,EAA/BA,yBAA+B,GHqCjFS,EGnC1B,CAGEgB,OAHF,SAGSC,EAHT,GAG2C,IAAjBC,EAAgB,EAAxBC,KAAQD,WACdE,EAAgBH,EAAMI,UAAwB,CAAEC,MAAOxB,IAAwBsB,YAA/EA,YACRH,EAAMM,WAAW,CACfD,MAAOxB,EACPqB,KAAM,CAAEC,YAAW,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAaI,OAAO,CAACN,QAG9CO,eAAgB,CAAC,CACfH,MAAOxB,KHyBAG,IAA8DL,EAAoBI,IGtCc,mBACtGkB,EADsG,aACzFC,KAgB+ChB,KAAlDuB,EAjB4F,EAiBrGC,QAA6BC,EAjBwE,EAiB/EC,MAAwBC,EAjBuD,EAiB7DX,KAjB6D,EAkBjFY,mBAAwB,IAlByD,mBAkBtGC,EAlBsG,KAkB9FC,EAlB8F,KAmB7GC,QAAQC,IAAI,YAAaH,GAEzB,IAwBMI,EAAe,SAACC,GAAqC,IAAD,EAChCA,EAAEC,OAAlBC,EADgD,EAChDA,KAAMC,EAD0C,EAC1CA,MACdN,QAAQC,IAAI,SAAUE,EAAEC,QACxBL,EAAU,eAAKD,EAAN,eAAeO,EAAOC,MAOjC,GAAId,EACF,OAAQ,2CAEV,GAAIE,IAAcE,EAChB,OAAQ,yCA3DmG,IA6DrGW,EAAkBX,EAAlBW,cACFC,EAA8B,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAeE,QAAO,SAACC,GAC5D,OAAe,OAARA,QAAQ,IAARA,OAAA,EAAAA,EAAUC,MAAO1D,KAI1B,OAFA+C,QAAQC,IAAI,wBAAyBrB,GAGnC,kBAAC,IAAD,CACEgC,MAAM,sBACNC,QAASC,QAAQlC,GACjBmC,QAAQ,EACRC,SA/BiB,WACnB3D,GAAyB,KAoCvB,kBAAC,IAAD,eAEEgD,KAAK,WAAc7B,EAFrB,CAIEyC,SA7DW,SAACC,GAChBlB,QAAQC,IAAI,2BAA4BH,GADO,IC3CdqB,ED8CzBd,EAA2BP,EAA3BO,KAAkBe,GAAStB,EAArBuB,WAAqBvB,EAATsB,MACpBE,GC/C2BH,ED+CErB,EAAOwB,MC9CrCC,KAAKC,MAAM,IAAMC,WAAWN,EAAIO,QAAQ,QAAS,OD+CtD1B,QAAQC,IAAI,YACZjB,EAAW,CACT2C,UAAW,CACTtB,OACAiB,QACAD,WAAYH,EAAkBG,WAC9BO,OAASV,EAAkBU,OAA0CV,EAAkBU,OAAnD,CAACxE,GACrCgE,UAEDS,MAAK,SAAAC,GAAC,OAAI9B,QAAQC,IAAI,cAAe6B,MACrCC,OAAM,SAAA5B,GAAC,OAAIH,QAAQC,IAAI,mBAAoBE,MAE9C9C,GAAyB,MA6CrB,kBAAC,IAAK2E,KAAN,CACEC,MAAM,eACNC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,8BAEnC,kBAAC,IAAD,CACE/B,KAAK,OACLgC,SAAUnC,EAAcoC,YAAY,eACpCC,MAAO,CAAEC,MAAO,OAAQC,YAAa,MAEzC,kBAAC,IAAKT,KAAN,CACEC,MAAM,QACNC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,uBAEnC,kBAAC,IAAD,CACE/B,KAAK,QACLgC,SAAUnC,EACV3C,KAAK,SAAS+E,YAAY,UAAUC,MAAO,CAAEC,MAAO,OAAQC,YAAa,MAG7E,kBAAC,IAAKT,KAAN,CACEC,MAAM,WACN5B,KAAK,aAEL6B,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,0BAEnC,kBAAC,IAAD,CACEC,SA1DiB,SAAC/B,GAC1BP,EAAU,eAAKD,EAAN,CAAc,WAAcQ,MA0D7BoC,KAAK,WACLJ,YAAY,mBAHd,OAIG9B,QAJH,IAIGA,OAJH,EAIGA,EAAgCmC,KAAI,SAACjC,GAAD,OACnC,kBAAC,IAAOkC,OAAR,CACEC,IAAK3F,OAAM,OAACwD,QAAD,IAACA,OAAD,EAACA,EAAUC,IACtBL,MAAOpD,OAAM,OAACwD,QAAD,IAACA,OAAD,EAACA,EAAUC,IACxB0B,SAAUnC,GAEVhD,OAAM,OAACwD,QAAD,IAACA,OAAD,EAACA,EAAUC,UAOzB,kBAAC,IAAKmC,KAAN,CAAWzC,KAAK,WACb,SAAC0C,EAAD,GAA8B,IAAnBC,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,OACf,OACE,6BACGF,EAAOJ,KAAI,SAACO,EAAOC,GAAR,OACV,kBAAC,IAAKnB,KAAN,iBACiB,IAAVmB,EAAcjF,EAAiBM,EADtC,CAEEyD,MAAiB,IAAVkB,EAAc,SAAW,GAChChB,UAAU,EACVU,IAAKK,EAAML,MAEX,kBAAC,IAAKb,KAAN,iBACMkB,EADN,CAEEE,gBAAiB,CAAC,WAAY,UAC9BlB,MAAO,CACL,CACEC,UAAU,EACVkB,YAAY,EACZjB,QAAS,iDAGbkB,SAAO,IAEP,kBAAC,IAAD,CACEf,MAAO,CAAEC,MAAO,MAAOC,YAAa,MAGtCM,EAAOQ,QAAU,EACjB,kBAAC,IAAD,CACEC,UAAU,wBACVC,QAAS,WACPR,EAAOC,EAAM7C,SAGf,mCAGR,kBAAC,IAAK2B,KAAN,KACE,kBAAC,IAAD,CACEzE,KAAK,SACLkG,QAAS,WACPT,KAEFT,MAAO,CAAEC,MAAO,QAEhB,kBAAC,IAAD,MAPF,uBAcV,kBAAC,IAAKR,KAAN,CACEC,MAAM,OACN5B,KAAK,QAGL,kBAAC,IAAD,CAAOgC,SAAUnC,EAAcoC,YAAY,WAAWC,MAAO,CAAEC,MAAO,OAAQC,YAAa,MAE7F,kBAAC,IAAD,CAAQlF,KAAK,UAAUmG,SAAS,UAAhC,e,6CExMFC,EAAqB,CAAEnB,MAAO,OAAQoB,OAAQ,OAAQnB,YAAa,QAkG1DoB,EAzF6C,SAAC,GAA4E,IAA1EC,EAAyE,EAAzEA,eAAgBC,EAAyD,EAAzDA,iBAAkBC,EAAuC,EAAvCA,iCACzFC,EAAU,CACd,CACErD,MAAO,OACPsD,UAAW,OACXrB,IAAK,QAEP,CACEjC,MAAO,KACPsD,UAAW,KACXrB,IAAK,MAEP,CACEjC,MAAO,QACPsD,UAAW,QACXrB,IAAK,QACLsB,OAAQ,SAAC7C,GACP,OD7BsB,SAACA,GAC7B,OAAO8C,OAAO9C,EAAQ,KACnB+C,eAAe,QAAS,CAAE9B,MAAO,WAAY+B,SAAU,QC2B7CC,CAAejD,KAG1B,CACEV,MAAO,aACPsD,UAAW,aACXrB,IAAK,aACLsB,OAAQ,SAAC9C,GAAD,OACN,8BACGA,EAAWsB,KAAI,SAAA6B,GAAG,OACjB,kBAAC,IAAD,CAAKC,MAAM,OAAO5B,IAAK3F,OAAOsH,IAC7BA,SAMT,CACE5D,MAAO,SACPsD,UAAW,SACXrB,IAAK,SACLsB,OAAQ,SAACvC,GACP,OAAQA,EACJ,6BAEEA,EACGe,KAAI,SAAC+B,EAAOvB,GAAR,OAAkB,yBACrBN,IAAK3F,OAAO,GAAD,OAAIwH,EAAJ,YAAavB,IACxBwB,IAAI,MACJC,IAAK1H,OAAOwH,GACZnC,MAAOoB,QAIb,8CAGR,CACE/C,MAAO,UACPsD,UAAW,KACXrB,IAAK,KACLsB,OAAQ,SAACxD,GAAD,OAAgB,oCACtB,kBAAC,IAAD,CAASC,MAAM,qBACb,kBAAC,IAAD,CAAQ6C,QAAS,kBAAMK,EAAenD,IAC9BpD,KAAK,UADb,SAKF,kBAAC,IAAD,CACEqD,MAAM,uBACN,kBAAC,IAAD,CAAQ2B,MAAO,CAAEsC,MAAO,SAChBpB,QAAS,kBAAMM,EAAiBpD,IAChCpD,KAAK,SACLuH,QAAM,EACN1D,KAAM,kBAAC,IAAD,aAMtB,OACE,oCACE,kBAAC,IAAD,CAGE2D,WAAYf,EACZC,QAASA,EACTe,OAAO,S,sYC1ER,IAAMC,EAAwBtH,IAAH,K,yOCL3B,IAAMuH,GAA+BvH,IAAH,KA6BlC,SAASwH,GAAwBrH,GAChC,OAAOC,IAA+EmH,GAA8BpH,GCpC5H,IA4EeY,eAA8B,KAAM,CACjD0G,0BTvDuC,SAAC9H,GAAD,MAAuD,CAC9FC,KDlCwC,6BCmCxCC,QAASF,ISsDT+H,YT1EyB,SAACC,GAAD,MAA0C,CACnE/H,KDb0B,eCc1BC,QAAS8H,KSsEI5G,EA5EqC,SAAC,GAAgD,IF+CpEZ,EE/CsBuH,EAA6C,EAA7CA,YAAaD,EAAgC,EAAhCA,0BAAgC,EACjEvH,IAAzB4B,EAD0F,EAC1FA,QAASE,EADiF,EACjFA,MAAOV,EAD0E,EAC1EA,KAD0E,GF+CnEnB,EE5C7B,CACEyB,eAAgB,CAAC,CACfH,MAAO8F,GACPvD,UAAW,CACT4D,MAAOtI,MFyCFc,IAAoEkH,EAAuBnH,IEhDN,mBAE3F0H,EAF2F,6BAa5C3F,oBAAkB,GAb0B,mBAa3F4F,EAb2F,KAatEC,EAbsE,OActD7F,mBAAwB,IAd8B,mBAc3F8F,EAd2F,KAc3EC,EAd2E,KAgBlG,GADA5F,QAAQC,IAAI,iBAAkB0F,GAC1BlG,EACF,OAAQ,2CAEV,GAAIE,IAAUV,EACZ,OAAQ,yCApBwF,IAsB1FC,EAAgBD,EAAhBC,YAGF2G,EAA4B,OAAG3G,QAAH,IAAGA,OAAH,EAAGA,EAAauB,QAAO,SAACqF,GAAmB,IAAD,EAC1E,QAAO,OAACA,QAAD,IAACA,GAAD,UAACA,EAAMzE,kBAAP,aAAC,EAAkB0E,SAAS9I,OAiCrC,OACE,oCACE,kBAAC,EAAD,CAAmB+G,iCAAkC6B,EAClC/B,eAjCJ,SAACnD,GAClB,IAAMmF,EAAI,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAA8BG,MAAK,SAACF,GAAD,OAAmBA,EAAKnF,KAAOA,KAC/E0E,EAAYS,GACZV,GAA0B,IA+BLrB,iBA5BF,SAACpD,GACpB+E,GAAuB,GACvBE,EAAkBC,EAA6BG,MAAK,SAACF,GAAD,OAAmBA,EAAKnF,KAAOA,SA2BjF,kBAAC,IAAD,CACEC,MAAM,iCACNC,QAASC,QAAQ2E,GACjBQ,KAAM,kBA3BK,SAACN,GAAyC,IACjDhF,EAA8CgF,EAA9ChF,GAAIN,EAA0CsF,EAA1CtF,KAAMiB,EAAoCqE,EAApCrE,MAAOD,EAA6BsE,EAA7BtE,WAAYO,EAAiB+D,EAAjB/D,OAAQR,EAASuE,EAATvE,KAE7CC,EAAW6E,KAAKjJ,GAEhBuI,EAAc,CACZ7D,UAAW,CACThB,KAAIN,OAAMiB,QAAOD,aAAYO,SAAQR,UAEtCS,MAAK,SAAAC,GAAC,OAAI9B,QAAQC,IAAI,wBAAyB6B,MAC/CC,OAAM,SAAC5B,GAAD,OAAcH,QAAQC,IAAI,sBAAuBE,MAE1DuF,GAAuB,GAePS,CAASR,IACrB3E,SAbe,WACnB0E,GAAuB,KAcnB,2BAAIC,EAAehF,SC/CZjC,eAAyB,KAAM,CAAErB,2BAA0B+I,iBVd1C,iBAAO,CACrC7I,KDhBgC,wBW6BnBmB,EAxB2B,SAAC,GAAoD,IAAlDrB,EAAiD,EAAjDA,yBAA0B+I,EAAuB,EAAvBA,iBAOrE,OACE,oCACE,wCACA,kBAAC,GAAD,MAEA,kBAAC,EAAD,MACA,kBAAC,IAAD,CAASxF,MAAM,eACb,kBAAC,IAAD,CAAQ6C,QAZS,WACrB2C,IACA/I,GAAyB,IAUYE,KAAK,SAAS8I,MAAM,SAC7C9D,MAAO,CAAE+D,SAAU,QAASC,OAAQ,OAAQC,MAAO,OAAQ/B,MAAO,SACzE,kBAACgC,EAAA,EAAD,CACClE,MAAO,CAAEmE,SAAU,OAAQjC,MAAO,gB,4MCVrC,IAAMkC,GAAuBhJ,IAAH,M,6NCH1B,IAAMiJ,GAAgDjJ,IAAH,MCL1D,IAAMkJ,GAAmB,CAAErE,MAAO,OAAQoB,OAAQ,OAAQnB,YAAa,QA6IxD/D,eAAgC,KAAM,CACnDoI,ab/H0B,SAACpG,GAAD,MAA6C,CACvEnD,KDrB2B,gBCsB3BC,QAASkD,Ia6HKqG,2Bb5G0B,SAACzJ,GAAD,MAAwD,CAChGC,KD3CyC,8BC4CzCC,QAASF,KayGIoB,EAtIuC,SAAC,GAAkD,IDwBhDZ,ECxBAgJ,EAA+C,EAA/CA,aAAcC,EAAiC,EAAjCA,2BAAiC,EACnC9I,IAAlDuB,EADqF,EAC9FC,QAA6BC,EADiE,EACxEC,MAAwBC,EADgD,EACtDX,KADsD,GDwB/CnB,ECtBsC,CACzFyB,eAAgB,CAAC,CACfH,MAAOpB,KDqBAD,IAAoH6I,GAA+C9I,ICzB1E,mBAE/FkJ,EAF+F,6BAQhDnH,oBAAkB,GAR8B,mBAQ/F4F,EAR+F,KAQ1EC,EAR0E,OASxD7F,mBAAyB,IAT+B,mBAS/FoH,EAT+F,KAS9EC,EAT8E,KAUtG,GAAI1H,EACF,OAAQ,2CAEV,GAAIE,IAAcE,EAChB,OAAQ,yCAd4F,IAgB9FW,EAAkBX,EAAlBW,cAGFC,EAA8B,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAeE,QAAO,SAACC,GAC5D,OAAOA,EAASC,KAAO1D,KA0BnBgH,EAAU,CACd,CACErD,MAAO,OACPsD,UAAW,OACXrB,IAAK,QAEP,CACEjC,MAAO,KACPsD,UAAW,KACXrB,IAAK,MAEP,CACEjC,MAAO,QACPsD,UAAW,QACXrB,IAAK,QACLsB,OAAQ,SAACgD,GACP,OAAyB,IAAjBA,EAAM5D,OACV,6BAEE4D,EACGxE,KAAI,SAAAvB,GAAI,OAAI,yBACXyB,IAAK3F,OAAOkE,GAAOuD,IAAI,MACvBC,IAAK1H,OAAOkE,GACZmB,MAAOsE,SAIb,4CAGR,CACEjG,MAAO,SACPsD,UAAW,SACXrB,IAAK,SACLsB,OAAQ,SAACgD,GACP,OAAyB,IAAjBA,EAAM5D,OACV,6BAEE4D,EACGxE,KAAI,SAAA+B,GAAK,OAAI,yBACZ7B,IAAK3F,OAAOwH,GAAQC,IAAI,MACxBC,IAAK1H,OAAOwH,GACZnC,MAAOsE,SAIb,6CAGR,CACEjG,MAAO,UACPsD,UAAW,KACXrB,IAAK,KACLsB,OAAQ,SAACxD,GAAD,OAAgB,oCACtB,kBAAC,IAAD,CAASC,MAAM,sBACb,kBAAC,IAAD,CAAQ6C,QAAS,kBA9EN,SAAC9C,GAClB,IAAMyG,EAAG,OAAG5G,QAAH,IAAGA,OAAH,EAAGA,EAAgCwF,MAAK,SAACoB,GAAD,OAAmBA,EAAIzG,KAAOA,KAC/EmG,EAAaM,GACbL,GAA2B,GA2EEM,CAAW1G,IAC1BpD,KAAK,UADb,SAKF,kBAAC,IAAD,CACEqD,MAAM,qCACN,kBAAC,IAAD,CAAQ2B,MAAO,CAAEsC,MAAO,SAChBpB,QAAS,kBAhFJ,SAAC9C,GACpB+E,GAAuB,GACvBwB,EAAmB1G,EAA+BwF,MAAK,SAACoB,GAAD,OAAmBA,EAAIzG,KAAOA,MA8ExD2G,CAAa3G,IAC5BpD,KAAK,SACLuH,QAAM,EACN1D,KAAM,kBAAC,IAAD,aAOtB,OACE,oCACE,kBAAC,IAAD,CAAO2D,WAAYvE,EAAgCyD,QAASA,EAASe,OAAO,OAC5E,kBAAC,IAAD,CACEpE,MAAM,uDACNC,QAASC,QAAQ2E,GACjBQ,KAAM,kBA3FMtF,EA2FSsG,EAAgBtG,GA1FzCqG,EAAsC,CACpCrF,UAAW,CACThB,GAAIzD,OAAOyD,MAEZkB,MAAK,SAAA0F,GAAI,OAAIvH,QAAQC,IAAI,kDAAmDsH,WAC/E7B,GAAuB,GANR,IAAC/E,GA4FZK,SAnFe,WACnB0E,GAAuB,KAoFnB,2BAAIuB,EAAgB5G,W,kVC3HrB,IAAMmH,GAAsB7J,IAAH,MCNhC,IA8LMO,GAAiB,CACrBC,SAAU,CACRC,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,IAEdE,WAAY,CACVH,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,MAIVG,GAA6B,CACjCD,WAAY,CACVH,GAAI,CAAEC,KAAM,GAAII,OAAQ,GACxBH,GAAI,CAAED,KAAM,GAAII,OAAQ,KAYbC,gBAJS,SAACC,GAAD,MAAmC,CACzD8I,uBAAwB9I,EAAM+I,cAAcpK,UAO5C,CAAEG,6BAJWiB,EAxNyC,SAAC,GAA2D,IDwCrFZ,ECxC4BL,EAAwD,EAAxDA,0BAA2BgK,EAA6B,EAA7BA,uBAA6B,GDwCpF3J,ECtC3B,CAGEgB,OAHF,SAGSC,EAHT,GAG4C,IAAlB4I,EAAiB,EAAzB1I,KAAQ0I,YACdpH,EAAkBxB,EAAMI,UAA0B,CAAEC,MAAOxB,IAAwB2C,cAAnFA,cACRxB,EAAMM,WAAW,CACfD,MAAOpB,EACPiB,KAAM,CAAEsB,cAAa,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAejB,OAAO,CAACqI,QAGlDpI,eAAgB,CAAC,CACfH,MAAOpB,KD4BAD,IAAgEyJ,GAAqB1J,ICzCe,mBAC1G6J,EAD0G,aAC3F1I,KAgB6ChB,KAjB8C,KAiBzGwB,QAjByG,EAiBnFE,MAjBmF,EAiBjEV,KACpBY,mBAAyB,KAlB4D,mBAkB1GC,EAlB0G,KAkBlGC,EAlBkG,KAwC3GG,EAAe,SAACC,GAAqC,IAAD,EAChCA,EAAEC,OAAlBC,EADgD,EAChDA,KAAMC,EAD0C,EAC1CA,MACdN,QAAQC,IAAI,SAAUE,EAAEC,QACxBL,EAAU,eAAKD,EAAN,eAAeO,EAAOC,MAIjC,OACE,kBAAC,IAAD,CACEM,MAAM,uBACNC,QAASC,QAAQ2G,GACjB1G,QAAQ,EACRC,SAhBiB,WACnBvD,GAA0B,KAiBxB,kBAAC,IAAD,eACE4C,KAAK,YAAe7B,GADtB,CAGEyC,SArCW,SAACC,GAAiC,IACzCb,EAAaP,EAAbO,KAAMM,EAAOb,EAAPa,GACNwG,EAAkBjG,EAAlBiG,MAAOvF,EAAWV,EAAXU,OAEf+F,EAAY,CACVhG,UAAW,CACThB,KACAN,OACA8G,QACAvF,YAEDC,MAAK,SAAAC,GAAC,OAAI9B,QAAQC,IAAI,eAAgB6B,MACtCC,OAAM,SAAA5B,GAAC,OAAIH,QAAQC,IAAI,oBAAqBE,MAE/C1C,GAA0B,MAwBtB,kBAAC,IAAKuE,KAAN,CACEC,MAAM,cACNC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,6BAEnC,kBAAC,IAAD,CACE/B,KAAK,OACLgC,SAAUnC,EAAcoC,YAAY,gBACpCC,MAAO,CAAEC,MAAO,OAAQC,YAAa,MAEzC,kBAAC,IAAKT,KAAN,CACEC,MAAM,gBACNC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,+BAEnC,kBAAC,IAAD,CACE/B,KAAK,OACLgC,SAAUnC,EAAcoC,YAAY,gBACpCC,MAAO,CAAEC,MAAO,OAAQC,YAAa,MAGzC,kBAAC,IAAKK,KAAN,CAAWzC,KAAK,UACb,SAAC0C,EAAD,GAA8B,IAAnBC,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,OACf,OACE,6BACGF,EAAOJ,KAAI,SAACO,EAAOC,GAAR,OACV,kBAAC,IAAKnB,KAAN,iBACiB,IAAVmB,EAAcjF,GAAiBM,GADtC,CAEEyD,MAAiB,IAAVkB,EAAc,QAAU,GAC/BhB,UAAU,EACVU,IAAKK,EAAML,MAEX,kBAAC,IAAKb,KAAN,iBACMkB,EADN,CAEEE,gBAAiB,CAAC,WAAY,UAC9BlB,MAAO,CACL,CACEC,UAAU,EACVkB,YAAY,EACZjB,QAAS,gDAGbkB,SAAO,IAEP,kBAAC,IAAD,CACEf,MAAO,CAAEC,MAAO,MAAOC,YAAa,MAGtCM,EAAOQ,QAAU,EACjB,kBAAC,IAAD,CACEC,UAAU,wBACVC,QAAS,WACPR,EAAOC,EAAM7C,SAGf,mCAGR,kBAAC,IAAK2B,KAAN,KACE,kBAAC,IAAD,CACEzE,KAAK,SACLkG,QAAS,WACPT,KAEFT,MAAO,CAAEC,MAAO,QAEhB,kBAAC,IAAD,MAPF,sBAeV,kBAAC,IAAKM,KAAN,CAAWzC,KAAK,WACb,SAAC0C,EAAD,GAA8B,IAAnBC,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,OACf,OACE,6BACGF,EAAOJ,KAAI,SAACO,EAAOC,GAAR,OACV,kBAAC,IAAKnB,KAAN,iBACiB,IAAVmB,EAAcjF,GAAiBM,GADtC,CAEEyD,MAAiB,IAAVkB,EAAc,SAAW,GAChChB,UAAU,EACVU,IAAKK,EAAML,MAEX,kBAAC,IAAKb,KAAN,iBACMkB,EADN,CAEEE,gBAAiB,CAAC,WAAY,UAC9BlB,MAAO,CACL,CACEC,UAAU,EACVkB,YAAY,EACZjB,QAAS,iDAGbkB,SAAO,IAEP,kBAAC,IAAD,CACEf,MAAO,CAAEC,MAAO,MAAOC,YAAa,MAGtCM,EAAOQ,QAAU,EACjB,kBAAC,IAAD,CACEC,UAAU,wBACVC,QAAS,WACPR,EAAOC,EAAM7C,SAGf,mCAGR,kBAAC,IAAK2B,KAAN,KACE,kBAAC,IAAD,CACEzE,KAAK,SACLkG,QAAS,WACPT,KAEFT,MAAO,CAAEC,MAAO,QAEhB,kBAAC,IAAD,MAPF,uBAcV,kBAAC,IAAD,CAAQjF,KAAK,UAAUmG,SAAS,UAAhC,eCpKOhF,eAA2B,KAAM,CAAEjB,6BAAnCiB,EAxB+B,SAAC,GAAmC,IAAjCjB,EAAgC,EAAhCA,0BAK/C,OACE,oCACE,0CACA,kBAAC,GAAD,MAEA,kBAAC,GAAD,MACA,kBAAC,IAAD,CAASmD,MAAM,gBACb,kBAAC,IAAD,CACE6C,QAZe,WACrBhG,GAA0B,IAYpBF,KAAK,SAAS8I,MAAM,SACpB9D,MAAO,CAAE+D,SAAU,QAASC,OAAQ,OAAQC,MAAO,OAAQ/B,MAAO,SACnE,kBAACgC,EAAA,EAAD,CACClE,MAAO,CAAEmE,SAAU,OAAQjC,MAAO,gBCnBpCmD,GAAYC,IAAZD,QAER,SAASE,GAASjF,GAChB7C,QAAQC,IAAI4C,GAGd,IAoDekF,GApDiB,WAAO,INgCPjK,EMhCM,EAC+BG,IAAlDuB,EADmB,EAC5BC,QAA6BC,EADD,EACNC,MAAwBC,EADlB,EACYX,KADZ,EAEkCpB,IAArDmK,EAFmB,EAE5BvI,QAA8BwI,EAFF,EAELtI,MAAyBuI,EAFpB,EAEcjJ,KAFd,EAGuDkG,GAAwB,CACjHxD,UAAW,CACThB,GAAI1D,KAFSkL,EAHmB,EAG5B1I,QAAqC2I,EAHT,EAGEzI,MAAgC0I,EAHlC,EAG4BpJ,KAH5B,EAQsEkG,GAAwB,CAChIxD,UAAW,CACThB,GAAI1D,KAFSqL,EARmB,EAQ5B7I,QAA0C8I,EARd,EAQO5I,MAAqC6I,EAR5C,EAQsCvJ,KARtC,GNgCNnB,EMnByF,CACrH6D,UAAW,CACThB,GAAI1D,INkBKc,IAA+D4I,GAAsB7I,IMpBjF2K,EAbmB,EAa5BhJ,QAAyCiJ,EAbb,EAaM/I,MAAoCgJ,EAb1C,EAaoC1J,KAKxE,GAAIO,GAAewI,GAAgBM,GAA4BH,GAAuBM,EACpF,OAAQ,2CAEV,GAAI/I,GAAauI,GAAcG,GAAqBG,GAA0BG,IAA0B9I,IAAasI,IAAcM,IAA0BG,IAAyBN,EACpL,OAAQ,uCAGuBG,EAAzBI,qBACiBD,EAAjBE,aAER,OACE,kBAAC,IAAD,CAAMC,iBAAiB,IAAIzG,SAAUyF,IACnC,kBAAC,IAAKF,QAAN,CAAcmB,IAAI,WAAWlG,IAAI,KAC/B,kBAAC,GAAD,OAEF,kBAAC+E,GAAD,CAASmB,IAAI,aAAalG,IAAI,KAC5B,kBAAC,GAAD,SCvBOmG,I,cAtBO,WAEpB,OADAhJ,QAAQC,IAAI,WAEV,yBAAKuD,UAAU,OACb,4BAAQA,UAAU,cAChB,2BACE,sCAEF,uBACEA,UAAU,WACVyF,KAAM9L,mDACNiD,OAAO,SACP8I,IAAI,uBAJN,aASF,kBAAC,GAAD,SCVcpI,QACW,cAA7BqI,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCfAvK,GAAQ,I,MAAIwK,GAELC,GAAS,IAAIC,KAAa,CACrC1K,SACA2K,IAAKvM,qD,SCLDwM,GAAsC,CAC1CrM,QAAQ,GCDJqM,GAAqC,CACzCrM,QAAQ,GCDJqM,GAAuC,CAC3CrM,QAAQ,GCDJqM,GAAsC,CAC1CrM,QAAQ,GCDJqM,GAAiC,CACrCrE,QAAS,ICDLqE,GAAkC,CACtCjJ,SAAU,ICKCkJ,GAAcC,2BAAgB,CACzCnC,cHHa,WAA2F,IAA1F/I,EAAyF,uDAAjFgL,GAAcG,EAAmE,uCACvG,OAAQA,EAAOvM,MACb,IzBHsC,6ByBIpC,OAAO,eACFoB,EADL,CAEErB,OAAQwM,EAAOtM,UAEnB,QACE,OAAOmB,IGJXoL,eJJa,WAA6F,IAA5FpL,EAA2F,uDAAnFgL,GAAcG,EAAqE,uCACzG,OAAQA,EAAOvM,MACb,IxBJuC,8BwBKrC,OAAO,eACFoB,EADL,CAEErB,OAAQwM,EAAOtM,UAEnB,QACE,OAAOmB,IIHXqL,mBNLa,WAA2F,IAA1FrL,EAAyF,uDAAjFgL,GAAcG,EAAmE,uCACvG,OAAQA,EAAOvM,MACb,ItBLsC,6BsBMpC,OAAO,eACFoB,EADL,CAEErB,OAAQwM,EAAOtM,UAEnB,QACE,OAAOmB,IMFXE,kBLNa,WAAyF,IAAxFF,EAAuF,uDAA/EgL,GAAcG,EAAiE,uCACrG,OAAQA,EAAOvM,MACb,IvBNqC,4BuBOnC,OAAO,eACFoB,EADL,CAEErB,OAAQwM,EAAOtM,UAEnB,QACE,OAAOmB,IKDXsL,aFPa,WAAwE,IAAvEtL,EAAsE,uDAA9DgL,GAAcG,EAAgD,uCACpF,OAAQA,EAAOvM,MACb,I1BFwB,e0BGtB,OAAO,eACFoB,EADL,CAEE2G,QAASwE,EAAOtM,UAElB,I1BL4B,qB0BM5B,OAAO,eACFmM,IAEP,QACE,OAAOhL,IEJXuL,cDRa,WAA0E,IAAzEvL,EAAwE,uDAAhEgL,GAAcG,EAAkD,uCACtF,OAAQA,EAAOvM,MACb,I3BDyB,gB2BEvB,OAAO,eACFoB,EADL,CAEE+B,SAAUoJ,EAAOtM,UAEnB,I3BJ6B,sB2BK7B,OAAO,eACFmM,IAEP,QACE,OAAOhL,M,UERPwL,GAAmBC,iCAIVC,GAFDC,uBAAYV,GAAa,GAAIO,ICA3CI,IAASpG,OACP,kBAAC,IAAD,CAAUkG,MAAOA,IACf,kBAAC,IAAD,CAAgBb,OAAQA,IACtB,kBAAC,IAAD,CAAqBA,OAAQA,IAC7B,kBAAC,GAAD,SAGSgB,SAASC,eAAe,SVgHjC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/I,MAAK,SAAAgJ,GACJA,EAAaC,gBAEd/I,OAAM,SAAApC,GACLK,QAAQL,MAAMA,EAAMyC,c","file":"static/js/main.02de48e8.chunk.js","sourcesContent":["import { Product, Category } from \"../__generated__/types\"\n\nexport const IS_OPEN_ADD_PRODUCT_MODAL = \"IS_OPEN_ADD_PRODUCT_MODAL\"\nexport const IS_OPEN_EDIT_PRODUCT_MODAL = \"IS_OPEN_EDIT_PRODUCT_MODAL\"\nexport const IS_OPEN_EDIT_CATEGORY_MODAL = \"IS_OPEN_EDIT_CATEGORY_MODAL\"\nexport const IS_OPEN_ADD_CATEGORY_MODAL = \"IS_OPEN_ADD_CATEGORY_MODAL\"\nexport const EDIT_PRODUCT = \"EDIT_PRODUCT\"\nexport const EDIT_CATEGORY = \"EDIT_CATEGORY\"\nexport const CLEAR_EDIT_PRODUCT = \"CLEAR_EDIT_PRODUCT\"\nexport const CLEAR_EDIT_CATEGORY = \"CLEAR_EDIT_CATEGORY\"\nexport const REACT_APP_RECYCLE_BIN_ID = String(process.env.REACT_APP_RECYCLE_BIN_ID)\n// export const REACT_APP_WITHOUT_CATEGORY_ID= String(process.env.REACT_APP_WITHOUT_CATEGORY_ID)\nexport const REACT_APP_NO_IMAGE_AVAILABLE = String(process.env.REACT_APP_NO_IMAGE_AVAILABLE)\n\n// export interface FieldData {\n//   name: number;\n//   key: number;\n//   fieldKey: number;\n// }\n// export interface FormListProps {\n//   name: string | number | (string | number)[];\n//   children: (fields: FieldData[], operation: Operation) => React.ReactNode;\n// }\n// export interface Operation {\n//   add: (defaultValue?: StoreValue) => void;\n//   remove: (index: number) => void;\n//   move: (from: number, to: number) => void;\n// }\n\n\nexport interface AddProductModalState {\n  isOpen: Boolean\n}\n\nexport interface mstpAddProductModalState {\n  isOpenAddProductModal: Boolean\n}\n\n// export interface Product {\n//   id?: String\n//   name?: String\n//   categoryId?: String\n//   price?: Number\n//   images?: String[]\n//   icon?: String\n// }\n\n// export interface ProductCat {\n//   id?: String\n//   name?: String\n//   category?: {\n//     id?: String\n//     name?: String\n//     icons?: String[]\n//   }\n//   price?: Number\n//   images?: String[]\n//   icon?: String\n// }\n\n// export interface Category {\n//   id?: String\n//   name?: String\n//   icons?: String[]\n//   images?: String[]\n// }\n\n// export interface ICategory {\n//   category: Category\n// }\n\nexport interface CategoryRequireIcons {\n  id?: String\n  name?: String\n  icons: String[]\n}\n\n\nexport interface setIsOpenAddProductModalAction {\n  type: typeof IS_OPEN_ADD_PRODUCT_MODAL\n  payload: Boolean\n}\n\nexport interface EditProductModalState {\n  isOpen: Boolean\n}\n\nexport interface setIsOpenAddCategoryModalAction {\n  type: typeof IS_OPEN_ADD_CATEGORY_MODAL\n  payload: Boolean\n}\nexport interface setIsOpenEditCategoryModalAction {\n  type: typeof IS_OPEN_EDIT_CATEGORY_MODAL\n  payload: Boolean\n}\n\nexport interface AddCategoryModalState {\n  isOpen: Boolean\n}\n\nexport interface EditCategoryModalState {\n  isOpen: Boolean\n}\n\nexport interface setIsOpenEditProductModalAction {\n  type: typeof IS_OPEN_EDIT_PRODUCT_MODAL\n  payload: Boolean\n}\n\nexport interface EditProductState {\n  product?: Product | {}\n}\n\nexport interface EditCategoryState {\n  category?: Category | {}\n}\n\nexport interface mstpEditProductState {\n  edited_product?: Product | {}\n}\n\nexport interface editProductAction {\n  type: typeof EDIT_PRODUCT | typeof CLEAR_EDIT_PRODUCT\n  payload?: Product | {}\n}\n\nexport interface editCategoryAction {\n  type: typeof EDIT_CATEGORY | typeof CLEAR_EDIT_CATEGORY\n  payload?: Product | {}\n}\n","import {\n  CLEAR_EDIT_CATEGORY,\n  CLEAR_EDIT_PRODUCT,\n  EDIT_CATEGORY,\n  EDIT_PRODUCT,\n  editCategoryAction,\n  editProductAction,\n  IS_OPEN_ADD_CATEGORY_MODAL,\n  IS_OPEN_ADD_PRODUCT_MODAL,\n  IS_OPEN_EDIT_CATEGORY_MODAL,\n  IS_OPEN_EDIT_PRODUCT_MODAL,\n  setIsOpenAddCategoryModalAction,\n  setIsOpenAddProductModalAction,\n  setIsOpenEditCategoryModalAction,\n  setIsOpenEditProductModalAction\n} from \"./types\"\nimport { Category, Product } from \"../__generated__/types\"\n\nexport const editProduct = (product: Product): editProductAction => ({\n  type: EDIT_PRODUCT,\n  payload: product\n})\n\nexport const clearEditProduct = () => ({\n  type: CLEAR_EDIT_PRODUCT\n})\n\nexport const editCategory = (category: Category): editCategoryAction => ({\n  type: EDIT_CATEGORY,\n  payload: category\n})\n\nexport const clearEditCategory = () => ({\n  type: CLEAR_EDIT_CATEGORY\n})\n\nexport const setIsOpenEditProductModal = (isOpen: Boolean): setIsOpenEditProductModalAction => ({\n  type: IS_OPEN_EDIT_PRODUCT_MODAL,\n  payload: isOpen\n})\n\nexport const setIsOpenAddProductModal = (isOpen: Boolean): setIsOpenAddProductModalAction => ({\n  type: IS_OPEN_ADD_PRODUCT_MODAL,\n  payload: isOpen\n})\n\nexport const setIsOpenEditCategoryModal = (isOpen: Boolean): setIsOpenEditCategoryModalAction => ({\n  type: IS_OPEN_EDIT_CATEGORY_MODAL,\n  payload: isOpen\n})\n\nexport const setIsOpenAddCategoryModal = (isOpen: Boolean): setIsOpenAddCategoryModalAction => ({\n  type: IS_OPEN_ADD_CATEGORY_MODAL,\n  payload: isOpen\n})\n","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type AddProductVariables = {\n  name: Types.Scalars['String'];\n  price: Types.Scalars['Float'];\n  categories?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  images?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  icon?: Types.Maybe<Types.Scalars['String']>;\n};\n\n\nexport type AddProduct = (\n  { __typename: 'Mutation' }\n  & { addProduct?: Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon' | 'categories'>\n  )> }\n);\n\n\nexport const AddProductDocument = gql`\n    mutation AddProduct($name: String!, $price: Float!, $categories: [String], $images: [String], $icon: String) {\n  addProduct(name: $name, price: $price, categories: $categories, images: $images, icon: $icon) {\n    id\n    name\n    price\n    images\n    icon\n    categories\n  }\n}\n    `;\nexport type AddProductMutationFn = ApolloReactCommon.MutationFunction<AddProduct, AddProductVariables>;\n\n/**\n * __useAddProduct__\n *\n * To run a mutation, you first call `useAddProduct` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProduct` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProduct, { data, loading, error }] = useAddProduct({\n *   variables: {\n *      name: // value for 'name'\n *      price: // value for 'price'\n *      categories: // value for 'categories'\n *      images: // value for 'images'\n *      icon: // value for 'icon'\n *   },\n * });\n */\nexport function useAddProduct(baseOptions?: ApolloReactHooks.MutationHookOptions<AddProduct, AddProductVariables>) {\n        return ApolloReactHooks.useMutation<AddProduct, AddProductVariables>(AddProductDocument, baseOptions);\n      }\nexport type AddProductHookResult = ReturnType<typeof useAddProduct>;\nexport type AddProductMutationResult = ApolloReactCommon.MutationResult<AddProduct>;\nexport type AddProductMutationOptions = ApolloReactCommon.BaseMutationOptions<AddProduct, AddProductVariables>;","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type ProductsAllVariables = {};\n\n\nexport type ProductsAll = (\n  { __typename: 'Query' }\n  & { productsAll?: Types.Maybe<Array<Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon' | 'categories'>\n  )>>> }\n);\n\n\nexport const ProductsAllDocument = gql`\n    query ProductsAll {\n  productsAll {\n    id\n    name\n    price\n    images\n    icon\n    categories\n  }\n}\n    `;\n\n/**\n * __useProductsAll__\n *\n * To run a query within a React component, call `useProductsAll` and pass it any options that fit your needs.\n * When your component renders, `useProductsAll` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProductsAll({\n *   variables: {\n *   },\n * });\n */\nexport function useProductsAll(baseOptions?: ApolloReactHooks.QueryHookOptions<ProductsAll, ProductsAllVariables>) {\n        return ApolloReactHooks.useQuery<ProductsAll, ProductsAllVariables>(ProductsAllDocument, baseOptions);\n      }\nexport function useProductsAllLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProductsAll, ProductsAllVariables>) {\n          return ApolloReactHooks.useLazyQuery<ProductsAll, ProductsAllVariables>(ProductsAllDocument, baseOptions);\n        }\nexport type ProductsAllHookResult = ReturnType<typeof useProductsAll>;\nexport type ProductsAllLazyQueryHookResult = ReturnType<typeof useProductsAllLazyQuery>;\nexport type ProductsAllQueryResult = ApolloReactCommon.QueryResult<ProductsAll, ProductsAllVariables>;","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type CategoriesAllVariables = {};\n\n\nexport type CategoriesAll = (\n  { __typename: 'Query' }\n  & { categoriesAll?: Types.Maybe<Array<Types.Maybe<(\n    { __typename: 'Category' }\n    & Pick<Types.Category, 'id' | 'name' | 'icons' | 'images' | 'parent'>\n  )>>> }\n);\n\n\nexport const CategoriesAllDocument = gql`\n    query CategoriesAll {\n  categoriesAll {\n    id\n    name\n    icons\n    images\n    parent\n  }\n}\n    `;\n\n/**\n * __useCategoriesAll__\n *\n * To run a query within a React component, call `useCategoriesAll` and pass it any options that fit your needs.\n * When your component renders, `useCategoriesAll` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCategoriesAll({\n *   variables: {\n *   },\n * });\n */\nexport function useCategoriesAll(baseOptions?: ApolloReactHooks.QueryHookOptions<CategoriesAll, CategoriesAllVariables>) {\n        return ApolloReactHooks.useQuery<CategoriesAll, CategoriesAllVariables>(CategoriesAllDocument, baseOptions);\n      }\nexport function useCategoriesAllLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CategoriesAll, CategoriesAllVariables>) {\n          return ApolloReactHooks.useLazyQuery<CategoriesAll, CategoriesAllVariables>(CategoriesAllDocument, baseOptions);\n        }\nexport type CategoriesAllHookResult = ReturnType<typeof useCategoriesAll>;\nexport type CategoriesAllLazyQueryHookResult = ReturnType<typeof useCategoriesAllLazyQuery>;\nexport type CategoriesAllQueryResult = ApolloReactCommon.QueryResult<CategoriesAll, CategoriesAllVariables>;","import React, { useState } from \"react\"\nimport { Button, Form, Input, Modal, Select } from \"antd\"\nimport PlusOutlined from \"@ant-design/icons/lib/icons/PlusOutlined\"\nimport MinusCircleOutlined from \"@ant-design/icons/lib/icons/MinusCircleOutlined\"\nimport { connect } from \"react-redux\"\nimport { setIsOpenAddProductModal } from \"../../actions\"\nimport { priceStringToIntCent } from \"../../utils/utils\"\nimport {\n  REACT_APP_NO_IMAGE_AVAILABLE, REACT_APP_RECYCLE_BIN_ID\n} from \"../../actions/types\"\nimport { RootState } from \"../../reducer\"\nimport { IProductsAll } from \"../Products/types\"\nimport { useAddProduct } from \"../Products/mutations/__generated__/AddProduct\"\nimport { ProductsAllDocument } from \"../Products/queries/__generated__/ProductsAll\"\nimport { useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { Product } from \"../../__generated__/types\"\n\ntype PropsProductAddForm = {\n  setIsOpenAddProductModal: (isOpen: Boolean) => void\n  isOpenAddProductModal: Boolean\n}\n\nconst ProductAddForm: React.FC<PropsProductAddForm> = ({ isOpenAddProductModal, setIsOpenAddProductModal }) => {\n  const [addProduct, {data: add_product_data}] = useAddProduct(\n    {\n      // TODO:\n      // @ts-ignore\n      update(cache, { data: { addProduct } }) {\n        const { productsAll } = cache.readQuery<IProductsAll>({ query: ProductsAllDocument })!.productsAll\n        cache.writeQuery({\n          query: ProductsAllDocument,\n          data: { productsAll: productsAll?.concat([addProduct]) }\n        })\n      },\n      refetchQueries: [{\n        query: ProductsAllDocument\n      }]\n    }\n  )\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const [values, setValues] = useState<Product | any>({})\n  console.log(\"values+++\", values)\n\n  const onFinish = (valuefromformlist: Product) => {\n    console.log(\"Received values of form:\", values)\n\n    const { name, categories, icon } = values\n    const price = priceStringToIntCent(values.price)\n    console.log(\"onFinish\")\n    addProduct({\n      variables: {\n        name,\n        price,\n        categories: valuefromformlist.categories,\n        images: !valuefromformlist.images ? [REACT_APP_NO_IMAGE_AVAILABLE] : valuefromformlist.images,\n        icon\n      }\n    }).then(m => console.log(\"addProduct:\", m))\n      .catch(e => console.log(\"addProductERROR:\", e))\n\n    setIsOpenAddProductModal(false)\n  }\n\n  const handleCancel = () => {\n    setIsOpenAddProductModal(false)\n  }\n\n  const handleChange = (e: { target: HTMLInputElement }) => {\n    const { name, value } = e.target\n    console.log(\"target\", e.target)\n    setValues({ ...values, [name]: value })\n  }\n\n  const handleChangeSelect = (value: string) => {\n    setValues({ ...values, \"categoryId\": value })\n  }\n\n  if (cat_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (cat_error || !cat_data) {\n    return (<div>Error...</div>)\n  }\n  const { categoriesAll } = cat_data\n  const categoriesAllWithoutRecycleBin = categoriesAll?.filter((category) => {\n    return category?.id !== REACT_APP_RECYCLE_BIN_ID\n  })\n  console.log(\"isOpenAddProductModal\", isOpenAddProductModal)\n\n  return (\n    <Modal\n      title=\"Product information\"\n      visible={Boolean(isOpenAddProductModal)}\n      footer={false}\n      onCancel={handleCancel}\n      // forceRender={true}\n      // destroyOnClose={true}\n      // okButtonProps={{htmlType: \"submit\" }}\n      // cancelButtonProps={{ htmlType: \"submit\" }}\n    >\n      <Form\n        // onChange={handleChange}\n        name=\"product\" {...formItemLayoutWithOutLabel}\n        // @ts-ignore\n        onFinish={onFinish}>\n        <Form.Item\n          label=\"Name product\"\n          rules={[{ required: true, message: \"Name product is required\" }]}\n        >\n          <Input\n            name=\"name\"\n            onChange={handleChange} placeholder=\"name product\"\n            style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n        <Form.Item\n          label=\"Price\"\n          rules={[{ required: true, message: \"Price is required\" }]}\n        >\n          <Input\n            name=\"price\"\n            onChange={handleChange}\n            type=\"number\" placeholder=\"Price $\" style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n\n        <Form.Item\n          label=\"Category\"\n          name=\"categories\"\n          // noStyle\n          rules={[{ required: true, message: \"Category is required\" }]}\n        >\n          <Select\n            onChange={handleChangeSelect}\n            mode=\"multiple\"\n            placeholder=\"Select category\">\n            {categoriesAllWithoutRecycleBin?.map((category) =>\n              <Select.Option\n                key={String(category?.id)}\n                value={String(category?.id)}\n                onChange={handleChange}\n                // defaultValue={[]}\n              >{String(category?.id)}\n              </Select.Option>\n            )\n            }\n          </Select>\n        </Form.Item>\n\n        <Form.List name=\"images\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    label={index === 0 ? \"Images\" : \"\"}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      {...field}\n                      validateTrigger={[\"onChange\", \"onBlur\"]}\n                      rules={[\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"Please input image url or delete this field.\"\n                        }\n                      ]}\n                      noStyle\n                    >\n                      <Input\n                        style={{ width: \"90%\", marginRight: 8 }}/>\n                    </Form.Item>\n\n                    {(fields.length >= 1) ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => {\n                          remove(field.name)\n                        }}\n                      />\n                    ) : <span/>}\n                  </Form.Item>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => {\n                      add()\n                    }}\n                    style={{ width: \"80%\" }}\n                  >\n                    <PlusOutlined/> Add image url\n                  </Button>\n                </Form.Item>\n              </div>\n            )\n          }}\n        </Form.List>\n        <Form.Item\n          label=\"Icon\"\n          name=\"icon\"\n          // noStyle\n        >\n          <Input onChange={handleChange} placeholder=\"icon url\" style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form>\n\n    </Modal>\n  )\n}\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 4 }\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 20 }\n  }\n}\n\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: { span: 24, offset: 0 },\n    sm: { span: 20, offset: 4 }\n  }\n}\n\ninterface StateProps {\n  isOpenAddProductModal: Boolean\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  isOpenAddProductModal: state.add_product_modal.isOpen\n})\n\nexport default connect<typeof ProductAddForm>(\n  // TODO:\n// @ts-ignore\n  mapStateToProps,\n  { setIsOpenAddProductModal }\n)(ProductAddForm)","export const priceStringToIntCent = (str: string) => {\n  return Math.round(100 * parseFloat(str.replace(/[$,]/g, '')));\n}\nexport const priceToDollars = (price: any) => {\n  return Number(price / 100)\n    .toLocaleString(\"en-US\", { style: \"currency\", currency: \"USD\" })\n}\n\nexport function toArray<T>(candidate?: T | T[] | false): T[] {\n  if (candidate === undefined || candidate === false) return [];\n\n  return Array.isArray(candidate) ? candidate : [candidate];\n}\n","import React from \"react\"\nimport { priceToDollars } from \"../../utils/utils\"\nimport { Button, Table, Tooltip, Tag } from \"antd\"\nimport DeleteOutlined from \"@ant-design/icons/lib/icons/DeleteOutlined\"\nimport { ProductsAll } from \"../Products/queries/__generated__/ProductsAll\"\n\nconst styleImagesInTable = { width: \"50px\", height: \"100%\", marginRight: \"10px\" }\nconst styleIconInTable = { width: \"20px\", height: \"100%\", marginRight: \"10px\" }\n\ninterface PropsProductsTableAntd {\n  handleEditProp: (id: String) => void\n  handleDeleteProp: (id: String) => void\n  productsAllWithoutRecycleBinProp: ProductsAll\n}\n\nconst ProductsTableAntd: React.FC<PropsProductsTableAntd> = ({ handleEditProp, handleDeleteProp, productsAllWithoutRecycleBinProp }) => {\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\"\n    },\n    {\n      title: \"ID\",\n      dataIndex: \"id\",\n      key: \"id\"\n    },\n    {\n      title: \"Price\",\n      dataIndex: \"price\",\n      key: \"price\",\n      render: (price: Number) => {\n        return priceToDollars(price)\n      }\n    },\n    {\n      title: \"Categories\",\n      dataIndex: \"categories\",\n      key: \"categories\",\n      render: (categories: String[]) => (\n        <span>\n          {categories.map(tag => (\n            <Tag color=\"blue\" key={String(tag)}>\n            {tag}\n            </Tag>\n          ))}\n        </span>\n        )\n    },\n    {\n      title: \"Images\",\n      dataIndex: \"images\",\n      key: \"images\",\n      render: (images: String[]) => {\n        return (images)\n          ? <div>\n            {\n              images\n                .map((image, index) => <img\n                  key={String(`${image}+${index}`)}\n                  alt=\"img\"\n                  src={String(image)}\n                  style={styleImagesInTable}/>\n                )\n            }\n          </div>\n          : <span>no  images</span>\n      }\n    },\n    {\n      title: \"Actions\",\n      dataIndex: \"id\",\n      key: \"id\",\n      render: (id: String) => <>\n        <Tooltip title=\"Edit this product\">\n          <Button onClick={() => handleEditProp(id)}\n                  type=\"dashed\">\n            Edit\n          </Button>\n        </Tooltip>\n        <Tooltip\n          title=\"Move to recycle bin\">\n          <Button style={{ float: \"right\" }}\n                  onClick={() => handleDeleteProp(id)}\n                  type=\"dashed\"\n                  danger\n                  icon={<DeleteOutlined/>}>\n          </Button>\n        </Tooltip>\n      </>\n    }\n  ]\n  return (\n    <>\n      <Table\n        // TODO:\n        // @ts-ignore\n        dataSource={productsAllWithoutRecycleBinProp}\n        columns={columns}\n        rowKey=\"id\"/>\n    </>\n  )\n}\n\nexport default ProductsTableAntd","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type UpdateProductVariables = {\n  id: Types.Scalars['ID'];\n  name: Types.Scalars['String'];\n  price: Types.Scalars['Float'];\n  categories?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  images?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  icon?: Types.Maybe<Types.Scalars['String']>;\n};\n\n\nexport type UpdateProduct = (\n  { __typename: 'Mutation' }\n  & { updateProduct?: Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon' | 'categories'>\n  )> }\n);\n\n\nexport const UpdateProductDocument = gql`\n    mutation UpdateProduct($id: ID!, $name: String!, $price: Float!, $categories: [String], $images: [String], $icon: String) {\n  updateProduct(id: $id, name: $name, price: $price, categories: $categories, images: $images, icon: $icon) {\n    id\n    name\n    price\n    images\n    icon\n    categories\n  }\n}\n    `;\nexport type UpdateProductMutationFn = ApolloReactCommon.MutationFunction<UpdateProduct, UpdateProductVariables>;\n\n/**\n * __useUpdateProduct__\n *\n * To run a mutation, you first call `useUpdateProduct` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProduct` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProduct, { data, loading, error }] = useUpdateProduct({\n *   variables: {\n *      id: // value for 'id'\n *      name: // value for 'name'\n *      price: // value for 'price'\n *      categories: // value for 'categories'\n *      images: // value for 'images'\n *      icon: // value for 'icon'\n *   },\n * });\n */\nexport function useUpdateProduct(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateProduct, UpdateProductVariables>) {\n        return ApolloReactHooks.useMutation<UpdateProduct, UpdateProductVariables>(UpdateProductDocument, baseOptions);\n      }\nexport type UpdateProductHookResult = ReturnType<typeof useUpdateProduct>;\nexport type UpdateProductMutationResult = ApolloReactCommon.MutationResult<UpdateProduct>;\nexport type UpdateProductMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateProduct, UpdateProductVariables>;","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type ProductsByCategoryIdVariables = {\n  id: Types.Scalars['String'];\n};\n\n\nexport type ProductsByCategoryId = (\n  { __typename: 'Query' }\n  & { productsByCategoryId?: Types.Maybe<Array<Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon' | 'categories'>\n  )>>> }\n);\n\n\nexport const ProductsByCategoryIdDocument = gql`\n    query ProductsByCategoryId($id: String!) {\n  productsByCategoryId(id: $id) {\n    id\n    name\n    price\n    images\n    icon\n    categories\n  }\n}\n    `;\n\n/**\n * __useProductsByCategoryId__\n *\n * To run a query within a React component, call `useProductsByCategoryId` and pass it any options that fit your needs.\n * When your component renders, `useProductsByCategoryId` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProductsByCategoryId({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useProductsByCategoryId(baseOptions?: ApolloReactHooks.QueryHookOptions<ProductsByCategoryId, ProductsByCategoryIdVariables>) {\n        return ApolloReactHooks.useQuery<ProductsByCategoryId, ProductsByCategoryIdVariables>(ProductsByCategoryIdDocument, baseOptions);\n      }\nexport function useProductsByCategoryIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProductsByCategoryId, ProductsByCategoryIdVariables>) {\n          return ApolloReactHooks.useLazyQuery<ProductsByCategoryId, ProductsByCategoryIdVariables>(ProductsByCategoryIdDocument, baseOptions);\n        }\nexport type ProductsByCategoryIdHookResult = ReturnType<typeof useProductsByCategoryId>;\nexport type ProductsByCategoryIdLazyQueryHookResult = ReturnType<typeof useProductsByCategoryIdLazyQuery>;\nexport type ProductsByCategoryIdQueryResult = ApolloReactCommon.QueryResult<ProductsByCategoryId, ProductsByCategoryIdVariables>;","import React, { useState } from \"react\"\nimport { Modal } from \"antd\"\nimport { connect } from \"react-redux\"\nimport { editProduct, setIsOpenEditProductModal } from \"../../actions\"\nimport { PropsProductsTable } from \"../Products/types\"\n\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\n\nimport ProductsTableAntd from \"./ProductsTableAntd\"\nimport { useProductsAll } from \"../Products/queries/__generated__/ProductsAll\"\nimport { useUpdateProduct } from \"../Products/mutations/__generated__/UpdateProduct\"\nimport { ProductsByCategoryIdDocument } from \"../Products/queries/__generated__/ProductsByCategoryId\"\nimport { Product } from \"../../__generated__/types\"\n\nconst ProductsTable: React.FC<PropsProductsTable> = ({ editProduct, setIsOpenEditProductModal }) => {\n  const { loading, error, data } = useProductsAll()\n  const [updateProduct, {}] = useUpdateProduct(\n    {\n      refetchQueries: [{\n        query: ProductsByCategoryIdDocument,\n        variables: {\n          catId: REACT_APP_RECYCLE_BIN_ID\n        }\n      }]\n    }\n  )\n\n  const [isVisualDeleteModal, setIsVisualDeleteModal] = useState<Boolean>(false)\n  const [productDeleted, setProductDeleted] = useState<Product | any>({})\n  console.log(\"productDeleted\", productDeleted)\n  if (loading) {\n    return (<div>Loading...</div>)\n  }\n  if (error || !data) {\n    return (<div>Error...</div>)\n  }\n  const { productsAll } = data\n  // TODO:\n  // @ts-ignore\n  const productsAllWithoutRecycleBin = productsAll?.filter((prod: Product) => {\n    return !prod?.categories?.includes(REACT_APP_RECYCLE_BIN_ID)\n  })\n\n  const handleEdit = (id: String): void => {\n    const prod = productsAllWithoutRecycleBin?.find((prod: Product) => prod.id === id)\n    editProduct(prod)\n    setIsOpenEditProductModal(true)\n  }\n\n  const handleDelete = (id: String): void => {\n    setIsVisualDeleteModal(true)\n    setProductDeleted(productsAllWithoutRecycleBin.find((prod: Product) => prod.id === id))\n  }\n\n  const handleOk = (productDeleted: Product | any): void => {\n    const { id, name, price, categories, images, icon } = productDeleted\n\n    categories.push(REACT_APP_RECYCLE_BIN_ID)\n\n    updateProduct({\n      variables: {\n        id, name, price, categories, images, icon\n      }\n    }).then(m => console.log(\"updateProductMESSAGE:\", m))\n      .catch((e: Error) => console.log(\"updateProductERROR:\", e))\n\n    setIsVisualDeleteModal(false)\n  }\n\n  const handleCancel = () => {\n    setIsVisualDeleteModal(false)\n  }\n\n  return (\n    <>\n      <ProductsTableAntd productsAllWithoutRecycleBinProp={productsAllWithoutRecycleBin}\n                         handleEditProp={handleEdit}\n                         handleDeleteProp={handleDelete}/>\n      <Modal\n        title=\"Delete product in recycle bin?\"\n        visible={Boolean(isVisualDeleteModal)}\n        onOk={() => handleOk(productDeleted)}\n        onCancel={handleCancel}\n      >\n        <p>{productDeleted.id}</p>\n      </Modal>\n    </>\n  )\n}\n\nexport default connect<typeof ProductsTable>(null, {\n  setIsOpenEditProductModal,\n  editProduct\n})(ProductsTable)","import React from \"react\"\nimport { Button, Tooltip } from \"antd\"\nimport { PlusOutlined } from \"@ant-design/icons\"\nimport ProductAddForm from \"../ProductAddForm\"\nimport { connect } from \"react-redux\"\nimport { clearEditProduct, setIsOpenAddProductModal } from \"../../actions\"\nimport ProductsTable from \"../ProductsTable\"\n\ninterface PropsProducts {\n  clearEditProduct: () => void\n  setIsOpenAddProductModal: (isOpen: Boolean) => void\n}\n\nconst Products: React.FC<PropsProducts> = ({ setIsOpenAddProductModal, clearEditProduct }) => {\n\n  const onClickHandler = () => {\n    clearEditProduct()\n    setIsOpenAddProductModal(true)\n  }\n\n  return (\n    <>\n      <h1>Products</h1>\n      <ProductsTable/>\n      {/*<ProductEditForm/>*/}\n      <ProductAddForm/>\n      <Tooltip title=\"Add Product\">\n        <Button onClick={onClickHandler} type=\"dashed\" shape=\"circle\"\n                style={{ position: \"fixed\", bottom: \"50px\", right: \"50px\", color: \"#08c\" }}\n        ><PlusOutlined\n          style={{ fontSize: \"22px\", color: \"#08c\" }}\n        /></Button>\n      </Tooltip>\n    </>\n  )\n}\n\nexport default connect<typeof Products>(null, { setIsOpenAddProductModal, clearEditProduct })(Products)","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type CategoryByIdVariables = {\n  id?: Types.Maybe<Types.Scalars['String']>;\n};\n\n\nexport type CategoryById = (\n  { __typename: 'Query' }\n  & { categoryById?: Types.Maybe<(\n    { __typename: 'Category' }\n    & Pick<Types.Category, 'id' | 'name' | 'icons' | 'images' | 'parent'>\n  )> }\n);\n\n\nexport const CategoryByIdDocument = gql`\n    query CategoryById($id: String) {\n  categoryById(id: $id) {\n    id\n    name\n    icons\n    images\n    parent\n  }\n}\n    `;\n\n/**\n * __useCategoryById__\n *\n * To run a query within a React component, call `useCategoryById` and pass it any options that fit your needs.\n * When your component renders, `useCategoryById` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCategoryById({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useCategoryById(baseOptions?: ApolloReactHooks.QueryHookOptions<CategoryById, CategoryByIdVariables>) {\n        return ApolloReactHooks.useQuery<CategoryById, CategoryByIdVariables>(CategoryByIdDocument, baseOptions);\n      }\nexport function useCategoryByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CategoryById, CategoryByIdVariables>) {\n          return ApolloReactHooks.useLazyQuery<CategoryById, CategoryByIdVariables>(CategoryByIdDocument, baseOptions);\n        }\nexport type CategoryByIdHookResult = ReturnType<typeof useCategoryById>;\nexport type CategoryByIdLazyQueryHookResult = ReturnType<typeof useCategoryByIdLazyQuery>;\nexport type CategoryByIdQueryResult = ApolloReactCommon.QueryResult<CategoryById, CategoryByIdVariables>;","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type DeleteCascadeCategoryWithProductsByIdVariables = {\n  id: Types.Scalars['String'];\n};\n\n\nexport type DeleteCascadeCategoryWithProductsById = (\n  { __typename: 'Mutation' }\n  & { deleteCascadeCategoryWithProductsById?: Types.Maybe<{ __typename: 'Category' }> }\n);\n\n\nexport const DeleteCascadeCategoryWithProductsByIdDocument = gql`\n    mutation DeleteCascadeCategoryWithProductsById($id: String!) {\n  deleteCascadeCategoryWithProductsById(id: $id) {\n    __typename\n  }\n}\n    `;\nexport type DeleteCascadeCategoryWithProductsByIdMutationFn = ApolloReactCommon.MutationFunction<DeleteCascadeCategoryWithProductsById, DeleteCascadeCategoryWithProductsByIdVariables>;\n\n/**\n * __useDeleteCascadeCategoryWithProductsById__\n *\n * To run a mutation, you first call `useDeleteCascadeCategoryWithProductsById` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteCascadeCategoryWithProductsById` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteCascadeCategoryWithProductsById, { data, loading, error }] = useDeleteCascadeCategoryWithProductsById({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteCascadeCategoryWithProductsById(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteCascadeCategoryWithProductsById, DeleteCascadeCategoryWithProductsByIdVariables>) {\n        return ApolloReactHooks.useMutation<DeleteCascadeCategoryWithProductsById, DeleteCascadeCategoryWithProductsByIdVariables>(DeleteCascadeCategoryWithProductsByIdDocument, baseOptions);\n      }\nexport type DeleteCascadeCategoryWithProductsByIdHookResult = ReturnType<typeof useDeleteCascadeCategoryWithProductsById>;\nexport type DeleteCascadeCategoryWithProductsByIdMutationResult = ApolloReactCommon.MutationResult<DeleteCascadeCategoryWithProductsById>;\nexport type DeleteCascadeCategoryWithProductsByIdMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteCascadeCategoryWithProductsById, DeleteCascadeCategoryWithProductsByIdVariables>;","import React, { useState } from \"react\"\nimport { Button, Modal, Table, Tooltip } from \"antd\"\nimport { CategoriesAllDocument, useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\nimport { Category, Product } from \"../../__generated__/types\"\nimport { useDeleteCascadeCategoryWithProductsById } from \"../Categories/mutations/__generated__/DeleteCascadeCategoryWithProductsById\"\nimport { ProductsAllDocument } from \"../Products/queries/__generated__/ProductsAll\"\nimport DeleteOutlined from \"@ant-design/icons/lib/icons/DeleteOutlined\"\nimport { editCategory } from \"../../actions\"\nimport { setIsOpenEditCategoryModal } from \"../../actions\"\nimport { connect } from \"react-redux\"\n\nconst styleIconInTable = { width: \"20px\", height: \"100%\", marginRight: \"10px\" }\n\nexport interface PropsCategoryTable {\n  editCategory: (product: Product | undefined) => void\n  setIsOpenEditCategoryModal: (isOpen: Boolean | undefined) => void\n}\n\nconst CategoriesTable: React.FC<PropsCategoryTable> = ({ editCategory, setIsOpenEditCategoryModal }) => {\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const [deleteCascadeCategoryWithProductsById, {}] = useDeleteCascadeCategoryWithProductsById({\n      refetchQueries: [{\n        query: CategoriesAllDocument\n      }]\n    }\n  )\n  const [isVisualDeleteModal, setIsVisualDeleteModal] = useState<Boolean>(false)\n  const [categoryDeleted, setCategoryDeleted] = useState<Category | any>({})\n  if (cat_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (cat_error || !cat_data) {\n    return (<div>Error...</div>)\n  }\n  const { categoriesAll } = cat_data\n\n  // @ts-ignore\n  const categoriesAllWithoutRecycleBin = categoriesAll?.filter((category: Category) => {\n    return category.id !== REACT_APP_RECYCLE_BIN_ID\n  })\n\n  const handleEdit = (id: String): void => {\n    const cat = categoriesAllWithoutRecycleBin?.find((cat: Category) => cat.id === id)\n    editCategory(cat)\n    setIsOpenEditCategoryModal(true)\n  }\n\n  const handleDelete = (id: String): void => {\n    setIsVisualDeleteModal(true)\n    setCategoryDeleted(categoriesAllWithoutRecycleBin.find((cat: Category) => cat.id === id))\n  }\n\n  const handleOk = (id: String) => {\n    deleteCascadeCategoryWithProductsById({\n      variables: {\n        id: String(id)\n      }\n    }).then(mess => console.log(\"deleteCascadeCategoryWithProductsById response:\", mess))\n    setIsVisualDeleteModal(false)\n  }\n\n  const handleCancel = () => {\n    setIsVisualDeleteModal(false)\n  }\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\"\n    },\n    {\n      title: \"ID\",\n      dataIndex: \"id\",\n      key: \"id\"\n    },\n    {\n      title: \"Icons\",\n      dataIndex: \"icons\",\n      key: \"icons\",\n      render: (icons: String[]) => {\n        return (icons.length !== 0)\n          ? <div>\n            {\n              icons\n                .map(icon => <img\n                  key={String(icon)} alt=\"img\"\n                  src={String(icon)}\n                  style={styleIconInTable}/>\n                )\n            }\n          </div>\n          : <span>no icons</span>\n      }\n    },\n    {\n      title: \"Images\",\n      dataIndex: \"images\",\n      key: \"images\",\n      render: (icons: String[]) => {\n        return (icons.length !== 0)\n          ? <div>\n            {\n              icons\n                .map(image => <img\n                  key={String(image)} alt=\"img\"\n                  src={String(image)}\n                  style={styleIconInTable}/>\n                )\n            }\n          </div>\n          : <span>no images</span>\n      }\n    },\n    {\n      title: \"Actions\",\n      dataIndex: \"id\",\n      key: \"id\",\n      render: (id: String) => <>\n        <Tooltip title=\"Edit this category\">\n          <Button onClick={() => handleEdit(id)}\n                  type=\"dashed\">\n            Edit\n          </Button>\n        </Tooltip>\n        <Tooltip\n          title=\"Delete Category With All Products\">\n          <Button style={{ float: \"right\" }}\n                  onClick={() => handleDelete(id)}\n                  type=\"dashed\"\n                  danger\n                  icon={<DeleteOutlined/>}>\n          </Button>\n        </Tooltip>\n      </>\n    }\n  ]\n\n  return (\n    <>\n      <Table dataSource={categoriesAllWithoutRecycleBin} columns={columns} rowKey=\"id\"/>\n      <Modal\n        title=\"Delete Category With All Products WITHOUT recovery!?\"\n        visible={Boolean(isVisualDeleteModal)}\n        onOk={() => handleOk(categoryDeleted.id)}\n        onCancel={handleCancel}\n      >\n        <p>{categoryDeleted.name}</p>\n      </Modal>\n    </>\n  )\n}\n\nexport default connect<typeof CategoriesTable>(null, {\n  editCategory, setIsOpenEditCategoryModal\n})(CategoriesTable)","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type AddCategoryVariables = {\n  id: Types.Scalars['String'];\n  name: Types.Scalars['String'];\n  images?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  icons?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  parent?: Types.Maybe<Types.Scalars['String']>;\n};\n\n\nexport type AddCategory = (\n  { __typename: 'Mutation' }\n  & { addCategory?: Types.Maybe<(\n    { __typename: 'Category' }\n    & Pick<Types.Category, 'id' | 'name' | 'images' | 'icons' | 'parent'>\n  )> }\n);\n\n\nexport const AddCategoryDocument = gql`\n    mutation AddCategory($id: String!, $name: String!, $images: [String], $icons: [String], $parent: String) {\n  addCategory(id: $id, name: $name, images: $images, icons: $icons, parent: $parent) {\n    id\n    name\n    images\n    icons\n    parent\n  }\n}\n    `;\nexport type AddCategoryMutationFn = ApolloReactCommon.MutationFunction<AddCategory, AddCategoryVariables>;\n\n/**\n * __useAddCategory__\n *\n * To run a mutation, you first call `useAddCategory` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddCategory` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addCategory, { data, loading, error }] = useAddCategory({\n *   variables: {\n *      id: // value for 'id'\n *      name: // value for 'name'\n *      images: // value for 'images'\n *      icons: // value for 'icons'\n *      parent: // value for 'parent'\n *   },\n * });\n */\nexport function useAddCategory(baseOptions?: ApolloReactHooks.MutationHookOptions<AddCategory, AddCategoryVariables>) {\n        return ApolloReactHooks.useMutation<AddCategory, AddCategoryVariables>(AddCategoryDocument, baseOptions);\n      }\nexport type AddCategoryHookResult = ReturnType<typeof useAddCategory>;\nexport type AddCategoryMutationResult = ApolloReactCommon.MutationResult<AddCategory>;\nexport type AddCategoryMutationOptions = ApolloReactCommon.BaseMutationOptions<AddCategory, AddCategoryVariables>;","import React, { useState } from \"react\"\nimport { connect } from \"react-redux\"\nimport { RootState } from \"../../reducer\"\nimport { setIsOpenAddCategoryModal } from \"../../actions\"\nimport { useAddCategory } from \"../Categories/mutations/__generated__/AddCategory\"\nimport { IProductsAll } from \"../Products/types\"\nimport { ProductsAllDocument } from \"../Products/queries/__generated__/ProductsAll\"\nimport { CategoriesAllDocument, useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { ICategoriesAll } from \"../Categories/types\"\nimport { Category } from \"../../__generated__/types\"\nimport { Modal, Form, Input, Button } from \"antd\"\nimport MinusCircleOutlined from \"@ant-design/icons/lib/icons/MinusCircleOutlined\"\nimport PlusOutlined from \"@ant-design/icons/lib/icons/PlusOutlined\"\n\ntype PropsCategoryAddForm = {\n  setIsOpenAddCategoryModal: (isOpen: Boolean) => void\n  isOpenAddCategoryModal: Boolean\n}\nconst CategoryAddForm: React.FC<PropsCategoryAddForm> = ({ setIsOpenAddCategoryModal, isOpenAddCategoryModal }) => {\n  const [addCategory, { data: daa_cat_data }] = useAddCategory(\n    {\n      // TODO:\n      // @ts-ignore\n      update(cache, { data: { addCategory } }) {\n        const { categoriesAll } = cache.readQuery<ICategoriesAll>({ query: ProductsAllDocument })!.categoriesAll\n        cache.writeQuery({\n          query: CategoriesAllDocument,\n          data: { categoriesAll: categoriesAll?.concat([addCategory]) }\n        })\n      },\n      refetchQueries: [{\n        query: CategoriesAllDocument\n      }]\n    }\n  )\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const [values, setValues] = useState<Category | any>({})\n\n  const onFinish = (valuefromformlist: Category) => {\n    const { name, id } = values\n    const { icons, images } = valuefromformlist\n\n    addCategory({\n      variables: {\n        id,\n        name,\n        icons,\n        images\n      }\n    }).then(m => console.log(\"addCategory:\", m))\n      .catch(e => console.log(\"addCategoryERROR:\", e))\n\n    setIsOpenAddCategoryModal(false)\n  }\n  const handleCancel = () => {\n    setIsOpenAddCategoryModal(false)\n  }\n\n  const handleChange = (e: { target: HTMLInputElement }) => {\n    const { name, value } = e.target\n    console.log(\"target\", e.target)\n    setValues({ ...values, [name]: value })\n  }\n\n\n  return (\n    <Modal\n      title=\"Category information\"\n      visible={Boolean(isOpenAddCategoryModal)}\n      footer={false}\n      onCancel={handleCancel}\n    >\n      <Form\n        name=\"category\" {...formItemLayoutWithOutLabel}\n        // @ts-ignore\n        onFinish={onFinish}>\n        <Form.Item\n          label=\"ID category\"\n          rules={[{ required: true, message: \"ID category is required\" }]}\n        >\n          <Input\n            name=\"name\"\n            onChange={handleChange} placeholder=\"name category\"\n            style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n        <Form.Item\n          label=\"Name category\"\n          rules={[{ required: true, message: \"Name category is required\" }]}\n        >\n          <Input\n            name=\"name\"\n            onChange={handleChange} placeholder=\"name category\"\n            style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n\n        <Form.List name=\"icons\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    label={index === 0 ? \"icons\" : \"\"}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      {...field}\n                      validateTrigger={[\"onChange\", \"onBlur\"]}\n                      rules={[\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"Please input icon url or delete this field.\"\n                        }\n                      ]}\n                      noStyle\n                    >\n                      <Input\n                        style={{ width: \"90%\", marginRight: 8 }}/>\n                    </Form.Item>\n\n                    {(fields.length >= 1) ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => {\n                          remove(field.name)\n                        }}\n                      />\n                    ) : <span/>}\n                  </Form.Item>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => {\n                      add()\n                    }}\n                    style={{ width: \"80%\" }}\n                  >\n                    <PlusOutlined/> Add icon url\n                  </Button>\n                </Form.Item>\n              </div>\n            )\n          }}\n        </Form.List>\n\n        <Form.List name=\"images\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    label={index === 0 ? \"Images\" : \"\"}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      {...field}\n                      validateTrigger={[\"onChange\", \"onBlur\"]}\n                      rules={[\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"Please input image url or delete this field.\"\n                        }\n                      ]}\n                      noStyle\n                    >\n                      <Input\n                        style={{ width: \"90%\", marginRight: 8 }}/>\n                    </Form.Item>\n\n                    {(fields.length >= 1) ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => {\n                          remove(field.name)\n                        }}\n                      />\n                    ) : <span/>}\n                  </Form.Item>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => {\n                      add()\n                    }}\n                    style={{ width: \"80%\" }}\n                  >\n                    <PlusOutlined/> Add image url\n                  </Button>\n                </Form.Item>\n              </div>\n            )\n          }}\n        </Form.List>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    </Modal>\n  )\n}\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 4 }\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 20 }\n  }\n}\n\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: { span: 24, offset: 0 },\n    sm: { span: 20, offset: 4 }\n  }\n}\n\ninterface StateProps {\n  isOpenAddCategoryModal: Boolean\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  isOpenAddCategoryModal: state.add_cat_modal.isOpen\n})\n\nexport default connect<typeof CategoryAddForm>(\n  // TODO:\n// @ts-ignore\n  mapStateToProps,\n  { setIsOpenAddCategoryModal }\n)(CategoryAddForm)","import React from \"react\"\nimport { Button, Tooltip } from \"antd\"\nimport { PlusOutlined } from \"@ant-design/icons\"\nimport { connect } from \"react-redux\"\nimport { setIsOpenAddCategoryModal } from \"../../actions\"\nimport CategoriesTable from \"../CategoriesTable\"\nimport CategoryAddForm from \"../CategoryAddForm\"\n\nexport interface PropsCategories {\n  setIsOpenAddCategoryModal: (isOpen: Boolean) => void\n}\n\nconst Categories: React.FC<PropsCategories> = ({ setIsOpenAddCategoryModal }) => {\n  const onClickHandler = () => {\n    setIsOpenAddCategoryModal(true)\n  }\n\n  return (\n    <>\n      <h1>Categories</h1>\n      <CategoriesTable/>\n      {/*<CategoryEditForm/>*/}\n      <CategoryAddForm/>\n      <Tooltip title=\"Add Category\">\n        <Button\n          onClick={onClickHandler}\n          type=\"dashed\" shape=\"circle\"\n          style={{ position: \"fixed\", bottom: \"50px\", right: \"50px\", color: \"#08c\" }}\n        ><PlusOutlined\n          style={{ fontSize: \"22px\", color: \"#08c\" }}\n        /></Button>\n      </Tooltip>\n    </>\n  )\n}\n\nexport default connect<typeof Categories>(null, { setIsOpenAddCategoryModal })(Categories)","import React from \"react\"\nimport { Empty, Tabs } from \"antd\"\nimport Products from \"../Products\"\nimport { useProductsAll } from \"../Products/queries/__generated__/ProductsAll\"\nimport { useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { useProductsByCategoryId } from \"../Products/queries/__generated__/ProductsByCategoryId\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\nimport { useCategoryById } from \"../Categories/queries/__generated__/CategoryById\"\nimport Categories from \"../Categories\"\n\nconst { TabPane } = Tabs\n\nfunction callback(key: any) {\n  console.log(key)\n}\n\nconst TabsContainer: React.FC = () => {\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const { loading: prod_loading, error: prod_error, data: prod_data } = useProductsAll()\n  const { loading: recycle_bin_loading, error: recycle_bin_error, data: recycle_bin_data } = useProductsByCategoryId({\n    variables: {\n      id: REACT_APP_RECYCLE_BIN_ID\n    }\n  })\n  const { loading: recycle_bin_prod_loading, error: recycle_bin_prod_error, data: recycle_bin_prod_data } = useProductsByCategoryId({\n    variables: {\n      id: REACT_APP_RECYCLE_BIN_ID\n    }\n  })\n  const { loading: recycle_bin_cat_loading, error: recycle_bin_cat_error, data: recycle_bin_cat_data } = useCategoryById({\n    variables: {\n      id: REACT_APP_RECYCLE_BIN_ID\n    }\n  })\n  if (cat_loading || prod_loading || recycle_bin_prod_loading || recycle_bin_loading || recycle_bin_cat_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (cat_error || prod_error || recycle_bin_error || recycle_bin_prod_error || recycle_bin_cat_error || !cat_data || !prod_data || !recycle_bin_prod_data || !recycle_bin_cat_data || !recycle_bin_data) {\n    return (<div>Error.</div>)\n  }\n\n  const { productsByCategoryId } = recycle_bin_prod_data\n  const { categoryById } = recycle_bin_cat_data\n\n  return (\n    <Tabs defaultActiveKey=\"1\" onChange={callback}>\n      <Tabs.TabPane tab=\"Products\" key=\"1\">\n        <Products/>\n      </Tabs.TabPane>\n      <TabPane tab=\"Categories\" key=\"2\">\n        <Categories/>\n      </TabPane>\n      {/*<TabPane tab={*/}\n      {/*  <span>*/}\n      {/*    <RecycleBinIcon*/}\n      {/*      // TODO:*/}\n      {/*      // @ts-ignore*/}\n      {/*      categoryById={categoryById} productsByCategoryId={productsByCategoryId}/>*/}\n      {/*    Recycle bin*/}\n      {/*  </span>*/}\n      {/*} key=\"3\">*/}\n      {/*  {(productsByCategoryId?.length === 0) ? <Empty/> : <RecycleBin/>}*/}\n      {/*</TabPane>*/}\n\n    </Tabs>\n  )\n}\n\nexport default TabsContainer","import React from \"react\"\nimport TabsContainer from \"./components/TabsContainer\"\nimport \"antd/dist/antd.css\"\nimport \"./App.css\"\n\nconst App: React.FC = () => {\n  console.log(\"app.tsx\")\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          <code>APP</code>\n        </p>\n        <a\n          className=\"App-link\"\n          href={process.env.REACT_APP_BASE_URL}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          BASE_URL\n        </a>\n      </header>\n      <TabsContainer/>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ApolloClient from \"apollo-boost\"\nimport { InMemoryCache } from \"apollo-cache-inmemory\"\n\nconst cache = new InMemoryCache();\n\nexport const client = new ApolloClient({\n  cache,\n  uri: process.env.REACT_APP_BASE_URL,\n})\n","import { EditProductModalState, IS_OPEN_EDIT_PRODUCT_MODAL, setIsOpenEditProductModalAction } from \"../actions/types\"\n\nconst initialState: EditProductModalState = {\n  isOpen: false\n}\n\nexport default (state = initialState, action: setIsOpenEditProductModalAction): EditProductModalState => {\n  switch (action.type) {\n    case IS_OPEN_EDIT_PRODUCT_MODAL:\n      return {\n        ...state,\n        isOpen: action.payload\n      }\n    default:\n      return state\n  }\n}","import { AddProductModalState, setIsOpenAddProductModalAction, IS_OPEN_ADD_PRODUCT_MODAL } from \"../actions/types\"\n\nconst initialState: AddProductModalState = {\n  isOpen: false\n}\n\nexport default (state = initialState, action: setIsOpenAddProductModalAction): AddProductModalState => {\n  switch (action.type) {\n    case IS_OPEN_ADD_PRODUCT_MODAL:\n      return {\n        ...state,\n        isOpen: action.payload\n      }\n    default:\n      return state\n  }\n}","import { EditCategoryModalState, IS_OPEN_EDIT_CATEGORY_MODAL, setIsOpenEditCategoryModalAction } from \"../actions/types\"\n\nconst initialState: EditCategoryModalState = {\n  isOpen: false\n}\n\nexport default (state = initialState, action: setIsOpenEditCategoryModalAction): EditCategoryModalState => {\n  switch (action.type) {\n    case IS_OPEN_EDIT_CATEGORY_MODAL:\n      return {\n        ...state,\n        isOpen: action.payload\n      }\n    default:\n      return state\n  }\n}","import { AddCategoryModalState, IS_OPEN_ADD_CATEGORY_MODAL, setIsOpenAddCategoryModalAction } from \"../actions/types\"\n\nconst initialState: AddCategoryModalState = {\n  isOpen: false\n}\n\nexport default (state = initialState, action: setIsOpenAddCategoryModalAction): AddCategoryModalState => {\n  switch (action.type) {\n    case IS_OPEN_ADD_CATEGORY_MODAL:\n      return {\n        ...state,\n        isOpen: action.payload\n      }\n    default:\n      return state\n  }\n}","import { CLEAR_EDIT_PRODUCT, EDIT_PRODUCT, editProductAction, EditProductState } from \"../actions/types\"\n\nconst initialState: EditProductState = {\n  product: {}\n}\n\nexport default (state = initialState, action: editProductAction): EditProductState => {\n  switch (action.type) {\n    case EDIT_PRODUCT:\n      return {\n        ...state,\n        product: action.payload\n      }\n      case CLEAR_EDIT_PRODUCT:\n      return {\n        ...initialState\n      }\n    default:\n      return state\n  }\n}","import { CLEAR_EDIT_CATEGORY, EDIT_CATEGORY, editCategoryAction, EditCategoryState } from \"../actions/types\"\n\nconst initialState: EditCategoryState = {\n  category: {}\n}\n\nexport default (state = initialState, action: editCategoryAction): EditCategoryState => {\n  switch (action.type) {\n    case EDIT_CATEGORY:\n      return {\n        ...state,\n        category: action.payload\n      }\n      case CLEAR_EDIT_CATEGORY:\n      return {\n        ...initialState\n      }\n    default:\n      return state\n  }\n}","import { combineReducers } from \"redux\"\nimport edit_product_modal from \"./edit-prod-modal\"\nimport add_product_modal from \"./add-prod-modal\"\nimport edit_cat_modal from \"./edit-cat-modal\"\nimport add_cat_modal from \"./add-cat-modal\"\nimport edit_product from \"./edit-product\"\nimport edit_category from \"./edit-category\"\n\nexport const rootReducer = combineReducers({\n  add_cat_modal,\n  edit_cat_modal,\n  edit_product_modal,\n  add_product_modal,\n  edit_product,\n  edit_category\n})\n\nexport type RootState = ReturnType<typeof rootReducer>","import { createStore } from \"redux\";\nimport { rootReducer } from \"../reducer\"\nimport { composeWithDevTools } from \"redux-devtools-extension/logOnlyInProduction\"\n// const composeEnhancers =\n//   typeof window === \"object\" &&\n//   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n//     window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n//       // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n//     }) : compose;\n\nconst composeEnhancers = composeWithDevTools();\n\nconst store = createStore(rootReducer, {}, composeEnhancers);\n\nexport default store;","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport { ApolloProvider } from \"react-apollo\"\nimport { ApolloProvider as ApolloHooksProvider } from '@apollo/react-hooks'\n\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { client } from \"./store/apollo-client\"\nimport store from \"./store\"\n\nReactDOM.render(\n  <Provider store={store}>\n    <ApolloProvider client={client}>\n      <ApolloHooksProvider client={client}>\n      <App/>\n        </ApolloHooksProvider>\n    </ApolloProvider>\n  </Provider>, document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}