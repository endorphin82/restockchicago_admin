{"version":3,"sources":["components/Categories/queries/__generated__/CategoriesAll.tsx","actions/types.ts","components/Categories/mutations/__generated__/DeleteCascadeCategoryWithProductsById.tsx","components/CategoriesTable/index.tsx","actions/index.ts","components/Categories/mutations/__generated__/AddCategory.tsx","components/Products/queries/__generated__/ProductsAll.tsx","components/CategoryAddForm/index.tsx","components/Categories/index.tsx","utils/utils.ts","components/ProductsTable/ProductsTableAntd.tsx","components/Products/mutations/__generated__/UpdateProduct.tsx","components/Products/queries/__generated__/ProductsByCategoryId.tsx","components/ProductsTable/index.tsx","components/ProductEditForm/index.tsx","components/Products/mutations/__generated__/AddProduct.tsx","components/ProductAddForm/index.tsx","components/Products/index.tsx","components/RecycleBinIcon/index.tsx","components/Products/query.ts","components/Products/mutations/__generated__/DeleteProduct.tsx","components/RecycleBinProductsTable/index.tsx","components/Products/mutations/__generated__/ClearRecycleBin.tsx","components/RecycleBin/index.tsx","components/Categories/queries/__generated__/CategoryById.tsx","components/TabsContainer/index.tsx","App.tsx","serviceWorker.js","store/apollo-client.ts","reducer/edit-prod-modal.ts","reducer/add-prod-modal.ts","reducer/edit-cat-modal.ts","reducer/add-cat-modal.ts","reducer/edit-product.ts","reducer/index.ts","store/index.ts","index.tsx"],"names":["CategoriesAllDocument","gql","useCategoriesAll","baseOptions","ApolloReactHooks","REACT_APP_RECYCLE_BIN_ID","String","process","REACT_APP_NO_IMAGE_AVAILABLE","DeleteCascadeCategoryWithProductsByIdDocument","styleIconInTable","width","height","marginRight","CategoriesTable","cat_loading","loading","cat_error","error","cat_data","data","refetchQueries","query","deleteCascadeCategoryWithProductsById","useState","isVisualDeleteModal","setIsVisualDeleteModal","categoryDeleted","setCategoryDeleted","categoriesAll","categoriesAllWithoutRecycleBin","filter","category","id","columns","title","dataIndex","key","render","icons","length","map","icon","alt","src","style","disabled","onClick","type","float","find","cat","handleDelete","danger","dataSource","rowKey","visible","Boolean","onOk","variables","then","mess","console","log","onCancel","name","editProduct","product","payload","clearEditProduct","setIsOpenEditProductModal","isOpen","setIsOpenAddProductModal","setIsOpenAddCategoryModal","AddCategoryDocument","ProductsAllDocument","useProductsAll","formItemLayout","labelCol","xs","span","sm","wrapperCol","formItemLayoutWithOutLabel","offset","connect","state","isOpenAddCategoryModal","add_cat_modal","update","cache","addCategory","readQuery","writeQuery","concat","values","setValues","footer","onFinish","valuefromformlist","images","m","catch","e","Item","label","rules","required","message","onChange","target","value","placeholder","List","fields","add","remove","field","index","validateTrigger","whitespace","noStyle","className","htmlType","shape","position","bottom","right","color","PlusOutlined","fontSize","priceStringToIntCent","str","Math","round","parseFloat","replace","priceToDollars","price","Number","toLocaleString","currency","styleImagesInTable","ProductsTableAntd","handleEditProp","handleDeleteProp","productsAllWithoutRecycleBinProp","image","UpdateProductDocument","useUpdateProduct","ProductsByCategoryIdDocument","useProductsByCategoryId","categoryId","updateProduct","productDeleted","setProductDeleted","productsAll","productsAllWithoutRecycleBin","prod","handleOk","isOpenEditProductModal","edit_product_modal","edited_product","edit_product","Form","useForm","formEditProduct","useEffect","setFieldsValue","resetFields","handleChange","form","Option","firstActiveValue","AddProductDocument","isOpenAddProductModal","add_product_modal","addProduct","RecycleBinIcon","categoryById","productsByCategoryId","productsByCategoryIdQuery","DeleteProductDocument","recycle_bin_prod_loading","recycle_bin_prod_error","recycle_bin_prod_data","isVisualRestoreModal","setIsVisualRestoreModal","deleteProduct","handleEdit","ClearRecycleBinDocument","RecycleBin","clearRecycleBin","display","CategoryByIdDocument","TabPane","Tabs","callback","TabsContainer","prod_loading","prod_error","prod_data","recycle_bin_loading","recycle_bin_error","recycle_bin_data","recycle_bin_cat_loading","recycle_bin_cat_error","recycle_bin_cat_data","defaultActiveKey","tab","App","href","rel","window","location","hostname","match","InMemoryCache","client","ApolloClient","uri","initialState","rootReducer","combineReducers","action","edit_cat_modal","composeEnhancers","composeWithDevTools","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ffee1e18.chunk.js","sourcesContent":["import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type CategoriesAllVariables = {};\n\n\nexport type CategoriesAll = (\n  { __typename: 'Query' }\n  & { categoriesAll?: Types.Maybe<Array<Types.Maybe<(\n    { __typename: 'Category' }\n    & Pick<Types.Category, 'id' | 'name' | 'icons'>\n  )>>> }\n);\n\n\nexport const CategoriesAllDocument = gql`\n    query CategoriesAll {\n  categoriesAll {\n    id\n    name\n    icons\n  }\n}\n    `;\n\n/**\n * __useCategoriesAll__\n *\n * To run a query within a React component, call `useCategoriesAll` and pass it any options that fit your needs.\n * When your component renders, `useCategoriesAll` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCategoriesAll({\n *   variables: {\n *   },\n * });\n */\nexport function useCategoriesAll(baseOptions?: ApolloReactHooks.QueryHookOptions<CategoriesAll, CategoriesAllVariables>) {\n        return ApolloReactHooks.useQuery<CategoriesAll, CategoriesAllVariables>(CategoriesAllDocument, baseOptions);\n      }\nexport function useCategoriesAllLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CategoriesAll, CategoriesAllVariables>) {\n          return ApolloReactHooks.useLazyQuery<CategoriesAll, CategoriesAllVariables>(CategoriesAllDocument, baseOptions);\n        }\nexport type CategoriesAllHookResult = ReturnType<typeof useCategoriesAll>;\nexport type CategoriesAllLazyQueryHookResult = ReturnType<typeof useCategoriesAllLazyQuery>;\nexport type CategoriesAllQueryResult = ApolloReactCommon.QueryResult<CategoriesAll, CategoriesAllVariables>;","import { Product } from \"../__generated__apollo__/types-query\"\n\nexport const IS_OPEN_ADD_PRODUCT_MODAL = \"IS_OPEN_ADD_PRODUCT_MODAL\"\nexport const IS_OPEN_EDIT_PRODUCT_MODAL = \"IS_OPEN_EDIT_PRODUCT_MODAL\"\nexport const IS_OPEN_EDIT_CATEGORY_MODAL = \"IS_OPEN_EDIT_CATEGORY_MODAL\"\nexport const IS_OPEN_ADD_CATEGORY_MODAL = \"IS_OPEN_ADD_CATEGORY_MODAL\"\nexport const EDIT_PRODUCT = \"EDIT_PRODUCT\"\nexport const CLEAR_EDIT_PRODUCT = \"CLEAR_EDIT_PRODUCT\"\nexport const REACT_APP_RECYCLE_BIN_ID = String(process.env.REACT_APP_RECYCLE_BIN_ID)\nexport const REACT_APP_NO_IMAGE_AVAILABLE = String(process.env.REACT_APP_NO_IMAGE_AVAILABLE)\n\n// export interface FieldData {\n//   name: number;\n//   key: number;\n//   fieldKey: number;\n// }\n// export interface FormListProps {\n//   name: string | number | (string | number)[];\n//   children: (fields: FieldData[], operation: Operation) => React.ReactNode;\n// }\n// export interface Operation {\n//   add: (defaultValue?: StoreValue) => void;\n//   remove: (index: number) => void;\n//   move: (from: number, to: number) => void;\n// }\n\n\nexport interface AddProductModalState {\n  isOpen: Boolean\n}\n\nexport interface mstpAddProductModalState {\n  isOpenAddProductModal: Boolean\n}\n\n// export interface Product {\n//   id?: String\n//   name?: String\n//   categoryId?: String\n//   price?: Number\n//   images?: String[]\n//   icon?: String\n// }\n\n// export interface ProductCat {\n//   id?: String\n//   name?: String\n//   category?: {\n//     id?: String\n//     name?: String\n//     icons?: String[]\n//   }\n//   price?: Number\n//   images?: String[]\n//   icon?: String\n// }\n\nexport interface Category {\n  id?: String\n  name?: String\n  icons?: String[]\n}\n\nexport interface ICategory {\n  category: Category\n}\n\nexport interface CategoryRequireIcons {\n  id?: String\n  name?: String\n  icons: String[]\n}\n\n\nexport interface setIsOpenAddProductModalAction {\n  type: typeof IS_OPEN_ADD_PRODUCT_MODAL\n  payload: Boolean\n}\n\nexport interface EditProductModalState {\n  isOpen: Boolean\n}\n\nexport interface setIsOpenAddCategoryModalAction {\n  type: typeof IS_OPEN_ADD_CATEGORY_MODAL\n  payload: Boolean\n}\nexport interface setIsOpenEditCategoryModalAction {\n  type: typeof IS_OPEN_EDIT_CATEGORY_MODAL\n  payload: Boolean\n}\n\nexport interface AddCategoryModalState {\n  isOpen: Boolean\n}\n\nexport interface EditCategoryModalState {\n  isOpen: Boolean\n}\n\nexport interface setIsOpenEditProductModalAction {\n  type: typeof IS_OPEN_EDIT_PRODUCT_MODAL\n  payload: Boolean\n}\n\nexport interface EditProductState {\n  product?: Product | {}\n}\n\nexport interface mstpEditProductState {\n  edited_product?: Product | {}\n}\n\nexport interface editProductAction {\n  type: typeof EDIT_PRODUCT | typeof CLEAR_EDIT_PRODUCT\n  payload?: Product | {}\n}\n","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type DeleteCascadeCategoryWithProductsByIdVariables = {\n  id: Types.Scalars['ID'];\n};\n\n\nexport type DeleteCascadeCategoryWithProductsById = (\n  { __typename: 'Mutation' }\n  & { deleteCascadeCategoryWithProductsById?: Types.Maybe<{ __typename: 'Category' }> }\n);\n\n\nexport const DeleteCascadeCategoryWithProductsByIdDocument = gql`\n    mutation DeleteCascadeCategoryWithProductsById($id: ID!) {\n  deleteCascadeCategoryWithProductsById(id: $id) {\n    __typename\n  }\n}\n    `;\nexport type DeleteCascadeCategoryWithProductsByIdMutationFn = ApolloReactCommon.MutationFunction<DeleteCascadeCategoryWithProductsById, DeleteCascadeCategoryWithProductsByIdVariables>;\n\n/**\n * __useDeleteCascadeCategoryWithProductsById__\n *\n * To run a mutation, you first call `useDeleteCascadeCategoryWithProductsById` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteCascadeCategoryWithProductsById` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteCascadeCategoryWithProductsById, { data, loading, error }] = useDeleteCascadeCategoryWithProductsById({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteCascadeCategoryWithProductsById(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteCascadeCategoryWithProductsById, DeleteCascadeCategoryWithProductsByIdVariables>) {\n        return ApolloReactHooks.useMutation<DeleteCascadeCategoryWithProductsById, DeleteCascadeCategoryWithProductsByIdVariables>(DeleteCascadeCategoryWithProductsByIdDocument, baseOptions);\n      }\nexport type DeleteCascadeCategoryWithProductsByIdHookResult = ReturnType<typeof useDeleteCascadeCategoryWithProductsById>;\nexport type DeleteCascadeCategoryWithProductsByIdMutationResult = ApolloReactCommon.MutationResult<DeleteCascadeCategoryWithProductsById>;\nexport type DeleteCascadeCategoryWithProductsByIdMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteCascadeCategoryWithProductsById, DeleteCascadeCategoryWithProductsByIdVariables>;","import React, { useState } from \"react\"\nimport { Button, Modal, Table, Tooltip } from \"antd\"\nimport { CategoriesAllDocument, useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\nimport { Category } from \"../../__generated__/types\"\nimport { useDeleteCascadeCategoryWithProductsById } from \"../Categories/mutations/__generated__/DeleteCascadeCategoryWithProductsById\"\nimport { ProductsAllDocument } from \"../Products/queries/__generated__/ProductsAll\"\nimport DeleteOutlined from \"@ant-design/icons/lib/icons/DeleteOutlined\"\n\nconst styleIconInTable = { width: \"20px\", height: \"100%\", marginRight: \"10px\" }\n\nconst CategoriesTable: React.FC = () => {\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const [deleteCascadeCategoryWithProductsById, {}] = useDeleteCascadeCategoryWithProductsById({\n      refetchQueries: [{\n        query: CategoriesAllDocument\n      }]\n    }\n  )\n  const [isVisualDeleteModal, setIsVisualDeleteModal] = useState<Boolean>(false)\n  const [categoryDeleted, setCategoryDeleted] = useState<Category | any>({})\n  if (cat_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (cat_error || !cat_data) {\n    return (<div>Error...</div>)\n  }\n  const { categoriesAll } = cat_data\n\n  // @ts-ignore\n  const categoriesAllWithoutRecycleBin = categoriesAll?.filter((category: Category) => {\n    return category.id !== REACT_APP_RECYCLE_BIN_ID\n  })\n\n  const handleEdit = (id: String): void => {\n    // const prod = productsAllWithoutRecycleBin?.find((prod: Product) => prod.id === id)\n    // editProduct(prod)\n    // setIsOpenEditProductModal(true)\n  }\n\n  const handleDelete = (id: String): void => {\n    setIsVisualDeleteModal(true)\n    setCategoryDeleted(categoriesAllWithoutRecycleBin.find((cat: Category) => cat.id === id))\n  }\n\n  const handleOk = (id: String) => {\n    deleteCascadeCategoryWithProductsById({\n      variables: {\n        id: String(id)\n      }\n    }).then(mess => console.log(\"deleteCascadeCategoryWithProductsById response:\", mess))\n    setIsVisualDeleteModal(false)\n  }\n\n  const handleCancel = () => {\n    setIsVisualDeleteModal(false)\n  }\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\"\n    },\n    {\n      title: \"ID\",\n      dataIndex: \"id\",\n      key: \"id\"\n    },\n    {\n      title: \"Icons\",\n      dataIndex: \"icons\",\n      key: \"icons\",\n      render: (icons: String[]) => {\n        return (icons.length !== 0)\n          ? <div>\n            {\n              icons\n                .map(icon => <img\n                  key={String(icon)} alt=\"img\"\n                  src={String(icon)}\n                  style={styleIconInTable}/>\n                )\n            }\n          </div>\n          : <span>no icons</span>\n      }\n    },\n    {\n      title: \"Actions\",\n      dataIndex: \"id\",\n      key: \"id\",\n      render: (id: String) => <>\n        <Tooltip title=\"Edit this category\">\n          <Button disabled onClick={() => handleEdit(id)}\n                  type=\"dashed\">\n            Edit\n          </Button>\n        </Tooltip>\n        <Tooltip\n          title=\"Delete Category With All Products\">\n          <Button style={{ float: \"right\" }}\n                  onClick={() => handleDelete(id)}\n                  type=\"dashed\"\n                  danger\n                  icon={<DeleteOutlined/>}>\n          </Button>\n        </Tooltip>\n      </>\n    }\n  ]\n\n  return (\n    <>\n      <Table dataSource={categoriesAllWithoutRecycleBin} columns={columns} rowKey=\"id\"/>\n      <Modal\n        title=\"Delete Category With All Products WITHOUT recovery!?\"\n        visible={Boolean(isVisualDeleteModal)}\n        onOk={() => handleOk(categoryDeleted.id)}\n        onCancel={handleCancel}\n      >\n        <p>{categoryDeleted.name}</p>\n      </Modal>\n    </>\n  )\n}\n\nexport default CategoriesTable","import {\n  CLEAR_EDIT_PRODUCT,\n  EDIT_PRODUCT,\n  editProductAction, IS_OPEN_ADD_CATEGORY_MODAL,\n  IS_OPEN_ADD_PRODUCT_MODAL,\n  IS_OPEN_EDIT_CATEGORY_MODAL,\n  IS_OPEN_EDIT_PRODUCT_MODAL,\n  setIsOpenAddCategoryModalAction,\n  setIsOpenAddProductModalAction,\n  setIsOpenEditCategoryModalAction,\n  setIsOpenEditProductModalAction\n} from \"./types\"\nimport { Product } from \"../__generated__apollo__/types-query\"\n\nexport const editProduct = (product: Product): editProductAction => ({\n  type: EDIT_PRODUCT,\n  payload: product\n})\n\nexport const clearEditProduct = () => ({\n  type: CLEAR_EDIT_PRODUCT\n})\n\nexport const setIsOpenEditProductModal = (isOpen: Boolean): setIsOpenEditProductModalAction => ({\n  type: IS_OPEN_EDIT_PRODUCT_MODAL,\n  payload: isOpen\n})\n\nexport const setIsOpenAddProductModal = (isOpen: Boolean): setIsOpenAddProductModalAction => ({\n  type: IS_OPEN_ADD_PRODUCT_MODAL,\n  payload: isOpen\n})\n\nexport const setIsOpenEditCategoryModal = (isOpen: Boolean): setIsOpenEditCategoryModalAction => ({\n  type: IS_OPEN_EDIT_CATEGORY_MODAL,\n  payload: isOpen\n})\n\nexport const setIsOpenAddCategoryModal = (isOpen: Boolean): setIsOpenAddCategoryModalAction => ({\n  type: IS_OPEN_ADD_CATEGORY_MODAL,\n  payload: isOpen\n})\n","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type AddCategoryVariables = {\n  name: Types.Scalars['String'];\n  images?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  icons?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n};\n\n\nexport type AddCategory = (\n  { __typename: 'Mutation' }\n  & { addCategory?: Types.Maybe<(\n    { __typename: 'Category' }\n    & Pick<Types.Category, 'id' | 'name' | 'images' | 'icons'>\n  )> }\n);\n\n\nexport const AddCategoryDocument = gql`\n    mutation AddCategory($name: String!, $images: [String], $icons: [String]) {\n  addCategory(name: $name, images: $images, icons: $icons) {\n    id\n    name\n    images\n    icons\n  }\n}\n    `;\nexport type AddCategoryMutationFn = ApolloReactCommon.MutationFunction<AddCategory, AddCategoryVariables>;\n\n/**\n * __useAddCategory__\n *\n * To run a mutation, you first call `useAddCategory` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddCategory` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addCategory, { data, loading, error }] = useAddCategory({\n *   variables: {\n *      name: // value for 'name'\n *      images: // value for 'images'\n *      icons: // value for 'icons'\n *   },\n * });\n */\nexport function useAddCategory(baseOptions?: ApolloReactHooks.MutationHookOptions<AddCategory, AddCategoryVariables>) {\n        return ApolloReactHooks.useMutation<AddCategory, AddCategoryVariables>(AddCategoryDocument, baseOptions);\n      }\nexport type AddCategoryHookResult = ReturnType<typeof useAddCategory>;\nexport type AddCategoryMutationResult = ApolloReactCommon.MutationResult<AddCategory>;\nexport type AddCategoryMutationOptions = ApolloReactCommon.BaseMutationOptions<AddCategory, AddCategoryVariables>;","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type ProductsAllVariables = {};\n\n\nexport type ProductsAll = (\n  { __typename: 'Query' }\n  & { productsAll?: Types.Maybe<Array<Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon'>\n    & { category?: Types.Maybe<(\n      { __typename: 'Category' }\n      & Pick<Types.Category, 'id' | 'name' | 'icons'>\n    )> }\n  )>>> }\n);\n\n\nexport const ProductsAllDocument = gql`\n    query ProductsAll {\n  productsAll {\n    id\n    name\n    price\n    images\n    icon\n    category {\n      id\n      name\n      icons\n    }\n  }\n}\n    `;\n\n/**\n * __useProductsAll__\n *\n * To run a query within a React component, call `useProductsAll` and pass it any options that fit your needs.\n * When your component renders, `useProductsAll` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProductsAll({\n *   variables: {\n *   },\n * });\n */\nexport function useProductsAll(baseOptions?: ApolloReactHooks.QueryHookOptions<ProductsAll, ProductsAllVariables>) {\n        return ApolloReactHooks.useQuery<ProductsAll, ProductsAllVariables>(ProductsAllDocument, baseOptions);\n      }\nexport function useProductsAllLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProductsAll, ProductsAllVariables>) {\n          return ApolloReactHooks.useLazyQuery<ProductsAll, ProductsAllVariables>(ProductsAllDocument, baseOptions);\n        }\nexport type ProductsAllHookResult = ReturnType<typeof useProductsAll>;\nexport type ProductsAllLazyQueryHookResult = ReturnType<typeof useProductsAllLazyQuery>;\nexport type ProductsAllQueryResult = ApolloReactCommon.QueryResult<ProductsAll, ProductsAllVariables>;","import React, { useState } from \"react\"\nimport { connect } from \"react-redux\"\nimport { RootState } from \"../../reducer\"\nimport { setIsOpenAddCategoryModal } from \"../../actions\"\nimport { useAddCategory } from \"../Categories/mutations/__generated__/AddCategory\"\nimport { IProductsAll } from \"../Products/types\"\nimport { ProductsAllDocument } from \"../Products/queries/__generated__/ProductsAll\"\nimport { CategoriesAllDocument, useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { ICategoriesAll } from \"../Categories/types\"\nimport { ProductCatId } from \"../../__generated__apollo__/types-query\"\nimport { Category } from \"../../__generated__/types\"\nimport { Modal, Form, Input, Button } from \"antd\"\nimport MinusCircleOutlined from \"@ant-design/icons/lib/icons/MinusCircleOutlined\"\nimport PlusOutlined from \"@ant-design/icons/lib/icons/PlusOutlined\"\n\ntype PropsCategoryAddForm = {\n  setIsOpenAddCategoryModal: (isOpen: Boolean) => void\n  isOpenAddCategoryModal: Boolean\n}\nconst CategoryAddForm: React.FC<PropsCategoryAddForm> = ({ setIsOpenAddCategoryModal, isOpenAddCategoryModal }) => {\n  const [addCategory, { data: daa_cat_data }] = useAddCategory(\n    {\n      // TODO:\n      // @ts-ignore\n      update(cache, { data: { addCategory } }) {\n        const { categoriesAll } = cache.readQuery<ICategoriesAll>({ query: ProductsAllDocument })!.categoriesAll\n        cache.writeQuery({\n          query: CategoriesAllDocument,\n          data: { categoriesAll: categoriesAll?.concat([addCategory]) }\n        })\n      },\n      refetchQueries: [{\n        query: CategoriesAllDocument\n      }]\n    }\n  )\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const [values, setValues] = useState<Category | any>({})\n\n  const onFinish = (valuefromformlist: Category) => {\n    const { name } = values\n    const { icons, images } = valuefromformlist\n\n    addCategory({\n      variables: {\n        name,\n        icons,\n        images\n      }\n    }).then(m => console.log(\"addCategory:\", m))\n      .catch(e => console.log(\"addCategoryERROR:\", e))\n\n    setIsOpenAddCategoryModal(false)\n  }\n  const handleCancel = () => {\n    setIsOpenAddCategoryModal(false)\n  }\n\n  const handleChange = (e: { target: HTMLInputElement }) => {\n    const { name, value } = e.target\n    console.log(\"target\", e.target)\n    setValues({ ...values, [name]: value })\n  }\n\n\n  return (\n    <Modal\n      title=\"Category information\"\n      visible={Boolean(isOpenAddCategoryModal)}\n      footer={false}\n      onCancel={handleCancel}\n    >\n      <Form\n        name=\"category\" {...formItemLayoutWithOutLabel}\n        // @ts-ignore\n        onFinish={onFinish}>\n        <Form.Item\n          label=\"Name category\"\n          rules={[{ required: true, message: \"Name category is required\" }]}\n        >\n          <Input\n            name=\"name\"\n            onChange={handleChange} placeholder=\"name category\"\n            style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n\n        <Form.List name=\"icons\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    label={index === 0 ? \"icons\" : \"\"}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      {...field}\n                      validateTrigger={[\"onChange\", \"onBlur\"]}\n                      rules={[\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"Please input icon url or delete this field.\"\n                        }\n                      ]}\n                      noStyle\n                    >\n                      <Input\n                        style={{ width: \"90%\", marginRight: 8 }}/>\n                    </Form.Item>\n\n                    {(fields.length >= 1) ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => {\n                          remove(field.name)\n                        }}\n                      />\n                    ) : <span/>}\n                  </Form.Item>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => {\n                      add()\n                    }}\n                    style={{ width: \"80%\" }}\n                  >\n                    <PlusOutlined/> Add icon url\n                  </Button>\n                </Form.Item>\n              </div>\n            )\n          }}\n        </Form.List>\n\n        <Form.List name=\"images\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    label={index === 0 ? \"Images\" : \"\"}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      {...field}\n                      validateTrigger={[\"onChange\", \"onBlur\"]}\n                      rules={[\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"Please input image url or delete this field.\"\n                        }\n                      ]}\n                      noStyle\n                    >\n                      <Input\n                        style={{ width: \"90%\", marginRight: 8 }}/>\n                    </Form.Item>\n\n                    {(fields.length >= 1) ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => {\n                          remove(field.name)\n                        }}\n                      />\n                    ) : <span/>}\n                  </Form.Item>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => {\n                      add()\n                    }}\n                    style={{ width: \"80%\" }}\n                  >\n                    <PlusOutlined/> Add image url\n                  </Button>\n                </Form.Item>\n              </div>\n            )\n          }}\n        </Form.List>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    </Modal>\n  )\n}\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 4 }\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 20 }\n  }\n}\n\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: { span: 24, offset: 0 },\n    sm: { span: 20, offset: 4 }\n  }\n}\n\ninterface StateProps {\n  isOpenAddCategoryModal: Boolean\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  isOpenAddCategoryModal: state.add_cat_modal.isOpen\n})\n\nexport default connect<typeof CategoryAddForm>(\n  // TODO:\n// @ts-ignore\n  mapStateToProps,\n  { setIsOpenAddCategoryModal }\n)(CategoryAddForm)","import React from \"react\"\nimport { Button, Tooltip } from \"antd\"\nimport { PlusOutlined } from \"@ant-design/icons\"\nimport CategoriesTable from \"../CategoriesTable\"\nimport { connect } from \"react-redux\"\nimport { setIsOpenAddCategoryModal } from \"../../actions\"\nimport CategoryAddForm from \"../CategoryAddForm\"\n\nexport interface PropsCategories {\n  setIsOpenAddCategoryModal: (isOpen: Boolean) => void\n}\n\nconst Categories: React.FC<PropsCategories> = ({ setIsOpenAddCategoryModal }) => {\n  const onClickHandler = () => {\n    setIsOpenAddCategoryModal(true)\n  }\n\n  return (\n    <>\n      <h1>Categories</h1>\n      <CategoriesTable/>\n      <CategoryAddForm/>\n      <Tooltip title=\"Add Category\">\n        <Button\n          onClick={onClickHandler}\n          type=\"dashed\" shape=\"circle\"\n          style={{ position: \"fixed\", bottom: \"50px\", right: \"50px\", color: \"#08c\" }}\n        ><PlusOutlined\n          style={{ fontSize: \"22px\", color: \"#08c\" }}\n        /></Button>\n      </Tooltip>\n    </>\n  )\n}\n\nexport default connect<typeof Categories>(null, { setIsOpenAddCategoryModal })(Categories)","export const priceStringToIntCent = (str: string) => {\n  return Math.round(100 * parseFloat(str.replace(/[$,]/g, '')));\n}\nexport const priceToDollars = (price: any) => {\n  return Number(price / 100)\n    .toLocaleString(\"en-US\", { style: \"currency\", currency: \"USD\" })\n}\n\nexport function toArray<T>(candidate?: T | T[] | false): T[] {\n  if (candidate === undefined || candidate === false) return [];\n\n  return Array.isArray(candidate) ? candidate : [candidate];\n}\n","import React from \"react\"\nimport { Category, CategoryRequireIcons } from \"../../actions/types\"\nimport { priceToDollars } from \"../../utils/utils\"\nimport { Button, Table, Tooltip } from \"antd\"\nimport DeleteOutlined from \"@ant-design/icons/lib/icons/DeleteOutlined\"\nimport { IproductsByCategoryId } from \"../../__generated__apollo__/types-query\"\n\nconst styleImagesInTable = { width: \"50px\", height: \"100%\", marginRight: \"10px\" }\nconst styleIconInTable = { width: \"20px\", height: \"100%\", marginRight: \"10px\" }\n\ninterface PropsProductsTableAntd {\n  handleEditProp: (id: String) => void\n  handleDeleteProp: (id: String) => void\n  productsAllWithoutRecycleBinProp: IproductsByCategoryId\n}\n\nconst ProductsTableAntd: React.FC<PropsProductsTableAntd> = ({ handleEditProp, handleDeleteProp, productsAllWithoutRecycleBinProp }) => {\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\"\n    },\n    {\n      title: \"ID\",\n      dataIndex: \"id\",\n      key: \"id\"\n    },\n    {\n      title: \"Price\",\n      dataIndex: \"price\",\n      key: \"price\",\n      render: (price: Number) => {\n        return priceToDollars(price)\n      }\n    },\n    {\n      title: \"Category\",\n      dataIndex: \"category\",\n      key: \"category\",\n      render: (category: CategoryRequireIcons) => {\n        const { name, icons, id } = category\n        return (\n          <div>\n            <span>{name} </span>\n            {\n              (icons?.length !== 0)\n                ? <img\n                  key={String(icons[0])}\n                  alt=\"img\"\n                  src={String(icons[0])} style={styleIconInTable}/> : \"\"\n            }\n            <span> {id} </span>\n          </div>)\n      }\n    },\n    {\n      title: \"Images\",\n      dataIndex: \"images\",\n      key: \"images\",\n      render: (images: String[]) => {\n        return (images)\n          ? <div>\n            {\n              images\n                .map((image, index) => <img\n                  key={String(`${image}+${index}`)}\n                  alt=\"img\"\n                  src={String(image)}\n                  style={styleImagesInTable}/>\n                )\n            }\n          </div>\n          : <span>no  images</span>\n      }\n    },\n    {\n      title: \"Actions\",\n      dataIndex: \"id\",\n      key: \"id\",\n      render: (id: String) => <>\n        <Tooltip title=\"Edit this product\">\n          <Button onClick={() => handleEditProp(id)}\n                  type=\"dashed\">\n            Edit\n          </Button>\n        </Tooltip>\n        <Tooltip\n          title=\"Move to recycle bin\">\n          <Button style={{ float: \"right\" }}\n                  onClick={() => handleDeleteProp(id)}\n                  type=\"dashed\"\n                  danger\n                  icon={<DeleteOutlined/>}>\n          </Button>\n        </Tooltip>\n      </>\n    }\n  ]\n  return (\n    <>\n      <Table\n        // TODO:\n        // @ts-ignore\n        dataSource={productsAllWithoutRecycleBinProp}\n        columns={columns}\n        rowKey=\"id\"/>\n    </>\n  )\n}\n\nexport default ProductsTableAntd","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type UpdateProductVariables = {\n  id: Types.Scalars['ID'];\n  name: Types.Scalars['String'];\n  price: Types.Scalars['Float'];\n  categoryId: Types.Scalars['ID'];\n  images?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  icon?: Types.Maybe<Types.Scalars['String']>;\n};\n\n\nexport type UpdateProduct = (\n  { __typename: 'Mutation' }\n  & { updateProduct?: Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon'>\n    & { category?: Types.Maybe<(\n      { __typename: 'Category' }\n      & Pick<Types.Category, 'id' | 'name' | 'icons'>\n    )> }\n  )> }\n);\n\n\nexport const UpdateProductDocument = gql`\n    mutation UpdateProduct($id: ID!, $name: String!, $price: Float!, $categoryId: ID!, $images: [String], $icon: String) {\n  updateProduct(id: $id, name: $name, price: $price, categoryId: $categoryId, images: $images, icon: $icon) {\n    id\n    name\n    price\n    images\n    icon\n    category {\n      id\n      name\n      icons\n    }\n  }\n}\n    `;\nexport type UpdateProductMutationFn = ApolloReactCommon.MutationFunction<UpdateProduct, UpdateProductVariables>;\n\n/**\n * __useUpdateProduct__\n *\n * To run a mutation, you first call `useUpdateProduct` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProduct` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProduct, { data, loading, error }] = useUpdateProduct({\n *   variables: {\n *      id: // value for 'id'\n *      name: // value for 'name'\n *      price: // value for 'price'\n *      categoryId: // value for 'categoryId'\n *      images: // value for 'images'\n *      icon: // value for 'icon'\n *   },\n * });\n */\nexport function useUpdateProduct(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateProduct, UpdateProductVariables>) {\n        return ApolloReactHooks.useMutation<UpdateProduct, UpdateProductVariables>(UpdateProductDocument, baseOptions);\n      }\nexport type UpdateProductHookResult = ReturnType<typeof useUpdateProduct>;\nexport type UpdateProductMutationResult = ApolloReactCommon.MutationResult<UpdateProduct>;\nexport type UpdateProductMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateProduct, UpdateProductVariables>;","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type ProductsByCategoryIdVariables = {\n  categoryId: Types.Scalars['ID'];\n};\n\n\nexport type ProductsByCategoryId = (\n  { __typename: 'Query' }\n  & { productsByCategoryId?: Types.Maybe<Array<Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon'>\n    & { category?: Types.Maybe<(\n      { __typename: 'Category' }\n      & Pick<Types.Category, 'id' | 'name' | 'icons'>\n    )> }\n  )>>> }\n);\n\n\nexport const ProductsByCategoryIdDocument = gql`\n    query ProductsByCategoryId($categoryId: ID!) {\n  productsByCategoryId(categoryId: $categoryId) {\n    id\n    name\n    price\n    images\n    icon\n    category {\n      id\n      name\n      icons\n    }\n  }\n}\n    `;\n\n/**\n * __useProductsByCategoryId__\n *\n * To run a query within a React component, call `useProductsByCategoryId` and pass it any options that fit your needs.\n * When your component renders, `useProductsByCategoryId` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProductsByCategoryId({\n *   variables: {\n *      categoryId: // value for 'categoryId'\n *   },\n * });\n */\nexport function useProductsByCategoryId(baseOptions?: ApolloReactHooks.QueryHookOptions<ProductsByCategoryId, ProductsByCategoryIdVariables>) {\n        return ApolloReactHooks.useQuery<ProductsByCategoryId, ProductsByCategoryIdVariables>(ProductsByCategoryIdDocument, baseOptions);\n      }\nexport function useProductsByCategoryIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProductsByCategoryId, ProductsByCategoryIdVariables>) {\n          return ApolloReactHooks.useLazyQuery<ProductsByCategoryId, ProductsByCategoryIdVariables>(ProductsByCategoryIdDocument, baseOptions);\n        }\nexport type ProductsByCategoryIdHookResult = ReturnType<typeof useProductsByCategoryId>;\nexport type ProductsByCategoryIdLazyQueryHookResult = ReturnType<typeof useProductsByCategoryIdLazyQuery>;\nexport type ProductsByCategoryIdQueryResult = ApolloReactCommon.QueryResult<ProductsByCategoryId, ProductsByCategoryIdVariables>;","import React, { useState } from \"react\"\nimport { Modal } from \"antd\"\nimport { connect } from \"react-redux\"\nimport { editProduct, setIsOpenEditProductModal } from \"../../actions\"\nimport { Product, ProductCatId } from \"../../__generated__apollo__/types-query\"\nimport { PropsProductsTable } from \"../Products/types\"\n\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\n\nimport ProductsTableAntd from \"./ProductsTableAntd\"\nimport { useProductsAll } from \"../Products/queries/__generated__/ProductsAll\"\nimport { useUpdateProduct } from \"../Products/mutations/__generated__/UpdateProduct\"\nimport { ProductsByCategoryIdDocument } from \"../Products/queries/__generated__/ProductsByCategoryId\"\n\nconst ProductsTable: React.FC<PropsProductsTable> = ({ editProduct, setIsOpenEditProductModal }) => {\n  const { loading, error, data } = useProductsAll()\n  const [updateProduct, {}] = useUpdateProduct(\n    {\n      refetchQueries: [{\n        query: ProductsByCategoryIdDocument,\n        variables: {\n          categoryId: REACT_APP_RECYCLE_BIN_ID\n        }\n      }]\n    }\n  )\n  const [isVisualDeleteModal, setIsVisualDeleteModal] = useState<Boolean>(false)\n  const [productDeleted, setProductDeleted] = useState<Product | any>({})\n  console.log(\"productDeleted\", productDeleted)\n  if (loading) {\n    return (<div>Loading...</div>)\n  }\n  if (error || !data) {\n    return (<div>Error...</div>)\n  }\n  const { productsAll } = data\n  // TODO:\n  // @ts-ignore\n  const productsAllWithoutRecycleBin = productsAll?.filter((prod: Product) => {\n    return prod?.category?.id !== REACT_APP_RECYCLE_BIN_ID\n  })\n\n  const handleEdit = (id: String): void => {\n    const prod = productsAllWithoutRecycleBin?.find((prod: Product) => prod.id === id)\n    editProduct(prod)\n    setIsOpenEditProductModal(true)\n  }\n\n  const handleDelete = (id: String): void => {\n    setIsVisualDeleteModal(true)\n    setProductDeleted(productsAllWithoutRecycleBin.find((prod: Product) => prod.id === id))\n  }\n\n  const handleOk = (productDeleted: ProductCatId | any): void => {\n    const { id, name, price, images, icon } = productDeleted\n    const categoryId = REACT_APP_RECYCLE_BIN_ID\n\n    updateProduct({\n      variables: {\n        id, name, price, categoryId, images, icon\n      }\n    }).then(m => console.log(\"updateProductMESSAGE:\", m))\n      .catch((e: Error) => console.log(\"updateProductERROR:\", e))\n\n    setIsVisualDeleteModal(false)\n  }\n\n  const handleCancel = () => {\n    setIsVisualDeleteModal(false)\n  }\n\n  return (\n    <>\n      <ProductsTableAntd productsAllWithoutRecycleBinProp={productsAllWithoutRecycleBin}\n                         handleEditProp={handleEdit}\n                         handleDeleteProp={handleDelete}/>\n      <Modal\n        title=\"Delete product in recycle bin?\"\n        visible={Boolean(isVisualDeleteModal)}\n        onOk={() => handleOk(productDeleted)}\n        onCancel={handleCancel}\n      >\n        <p>{productDeleted.id}</p>\n      </Modal>\n    </>\n  )\n}\n\nexport default connect<typeof ProductsTable>(null, {\n  setIsOpenEditProductModal,\n  editProduct\n})(ProductsTable)","import React, { useEffect, useState } from \"react\"\nimport { Button, Form, Input, Modal, Select } from \"antd\"\nimport PlusOutlined from \"@ant-design/icons/lib/icons/PlusOutlined\"\nimport MinusCircleOutlined from \"@ant-design/icons/lib/icons/MinusCircleOutlined\"\nimport { connect } from \"react-redux\"\nimport { clearEditProduct, setIsOpenEditProductModal } from \"../../actions\"\nimport { priceStringToIntCent } from \"../../utils/utils\"\nimport { Product, ProductCatId } from \"../../__generated__apollo__/types-query\"\nimport { RootState } from \"../../reducer\"\nimport { useUpdateProduct } from \"../Products/mutations/__generated__/UpdateProduct\"\nimport { useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\n\ninterface PropsProductEditForm {\n  edited_product: Product\n  clearEditProduct: () => void\n  setIsOpenEditProductModal: (isOpen: Boolean) => void\n  isOpenEditProductModal: Boolean\n}\n\nconst ProductEditForm: React.FC<PropsProductEditForm> = ({ clearEditProduct, edited_product, isOpenEditProductModal, setIsOpenEditProductModal }) => {\n  const [formEditProduct] = Form.useForm()\n  const [updateProduct, {}] = useUpdateProduct()\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const [values, setValues] = useState<ProductCatId | any>({})\n  useEffect(() => {\n    setValues(edited_product)\n  }, [edited_product])\n  useEffect(() => {\n    formEditProduct.setFieldsValue({\n      \"name\": edited_product.name,\n      \"price\": edited_product.price,\n      \"images\": edited_product.images,\n      \"icon\": edited_product.icon\n    })\n    return () => {\n      formEditProduct.resetFields()\n    }\n  }, [edited_product])\n  const onFinish = (valuefromformlist: ProductCatId) => {\n    const { name, categoryId, images, icon } = valuefromformlist\n    const id = String(values?.id)\n    const price = priceStringToIntCent(String(valuefromformlist.price))\n    updateProduct({\n      variables: {\n        id, name, price, categoryId: String(categoryId), images, icon\n      }\n    }).then(m => console.log(\"updateProductMESSAGE:\", m))\n      .catch(e => console.log(\"updateProductERROR:\", e))\n    setIsOpenEditProductModal(false)\n  }\n  const handleCancel = () => {\n    setIsOpenEditProductModal(false)\n    clearEditProduct()\n  }\n  const handleChange = (e: { target: HTMLInputElement }) => {\n    const { name, value } = e.target\n    setValues({ ...values, [name]: value })\n  }\n  if (cat_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (cat_error || !cat_data) {\n    return (<div>Error...</div>)\n  }\n  const { categoriesAll } = cat_data\n  const categoriesAllWithoutRecycleBin = categoriesAll?.filter((category) => {\n    return category?.id !== REACT_APP_RECYCLE_BIN_ID\n  })\n\n  return (\n    <Modal\n      title={`Product information id: ${values.id}`}\n      visible={Boolean(isOpenEditProductModal)}\n      footer={false}\n      onCancel={handleCancel}\n      // forceRender={true}\n      // destroyOnClose={false}\n    >\n\n      <Form\n        form={formEditProduct}\n        name=\"product\" {...formItemLayoutWithOutLabel}\n        // TODO:\n        // @ts-ignore\n        onFinish={onFinish}>\n\n        <Form.Item\n          label=\"Name product\"\n          name=\"name\"\n          // TODO:\n          // @ts-ignore\n          value={String(values?.name)}\n          rules={[{ required: true, message: \"Name product is required\" }]}\n        >\n          <Input\n\n            onChange={handleChange} placeholder=\"name product\"\n            style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n        <Form.Item\n          label=\"Price\"\n          name=\"price\"\n          // noStyle\n          rules={[{ required: true, message: \"Price is required\" }]}\n        >\n          <Input type=\"number\" placeholder=\"Price $\" style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n\n        <Form.Item\n          label=\"Category\"\n          name=\"categoryId\"\n          // TODO:\n          // @ts-ignore\n          onChange={handleChange}\n          rules={[{ required: true, message: \"Category is required\" }]}\n        >\n          <Select\n            placeholder=\"Select category\">\n            {categoriesAllWithoutRecycleBin?.map((category) =>\n              <Select.Option\n                key={String(category?.id)}\n                firstActiveValue=\"nike\"\n                value={String(category?.id)}\n              >{String(category?.name)}\n              </Select.Option>\n            )\n            }\n          </Select>\n        </Form.Item>\n\n        <Form.List name=\"images\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    label={index === 0 ? \"Images\" : \"\"}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      {...field}\n                      validateTrigger={[\"onChange\", \"onBlur\"]}\n                      rules={[\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"Please input image url or delete this field.\"\n                        }\n                      ]}\n                      noStyle\n                    >\n                      <Input value={values.images[index]} placeholder=\"image url\"\n                             style={{ width: \"90%\", marginRight: 8 }}/>\n                    </Form.Item>\n                    {fields.length > 1 ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => {\n                          remove(field.name)\n                        }}\n                      />\n                    ) : <span/>}\n                  </Form.Item>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => {\n                      add()\n                    }}\n                    style={{ width: \"80%\" }}\n                  >\n                    <PlusOutlined/> Add image url\n                  </Button>\n                </Form.Item>\n              </div>\n            )\n          }}\n        </Form.List>\n        <Form.Item\n          label=\"Icon\"\n          name=\"icon\"\n          // noStyle\n        >\n          <Input onChange={handleChange} placeholder=\"icon url\" style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form>\n\n    </Modal>\n  )\n}\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 4 }\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 20 }\n  }\n}\n\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: { span: 24, offset: 0 },\n    sm: { span: 20, offset: 4 }\n  }\n}\n\ninterface StateProps {\n  isOpenEditProductModal: Boolean\n  edited_product?: Product | {}\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  isOpenEditProductModal: state.edit_product_modal.isOpen,\n  edited_product: state.edit_product.product\n})\n\nexport default connect<typeof ProductEditForm>(\n  // TODO:\n// @ts-ignore\n  mapStateToProps,\n  { setIsOpenEditProductModal, clearEditProduct }\n)(ProductEditForm)","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type AddProductVariables = {\n  name: Types.Scalars['String'];\n  price: Types.Scalars['Float'];\n  categoryId: Types.Scalars['ID'];\n  images?: Types.Maybe<Array<Types.Maybe<Types.Scalars['String']>>>;\n  icon?: Types.Maybe<Types.Scalars['String']>;\n};\n\n\nexport type AddProduct = (\n  { __typename: 'Mutation' }\n  & { addProduct?: Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon'>\n    & { category?: Types.Maybe<(\n      { __typename: 'Category' }\n      & Pick<Types.Category, 'id' | 'name' | 'icons'>\n    )> }\n  )> }\n);\n\n\nexport const AddProductDocument = gql`\n    mutation AddProduct($name: String!, $price: Float!, $categoryId: ID!, $images: [String], $icon: String) {\n  addProduct(name: $name, price: $price, categoryId: $categoryId, images: $images, icon: $icon) {\n    id\n    name\n    price\n    images\n    icon\n    category {\n      id\n      name\n      icons\n    }\n  }\n}\n    `;\nexport type AddProductMutationFn = ApolloReactCommon.MutationFunction<AddProduct, AddProductVariables>;\n\n/**\n * __useAddProduct__\n *\n * To run a mutation, you first call `useAddProduct` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProduct` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProduct, { data, loading, error }] = useAddProduct({\n *   variables: {\n *      name: // value for 'name'\n *      price: // value for 'price'\n *      categoryId: // value for 'categoryId'\n *      images: // value for 'images'\n *      icon: // value for 'icon'\n *   },\n * });\n */\nexport function useAddProduct(baseOptions?: ApolloReactHooks.MutationHookOptions<AddProduct, AddProductVariables>) {\n        return ApolloReactHooks.useMutation<AddProduct, AddProductVariables>(AddProductDocument, baseOptions);\n      }\nexport type AddProductHookResult = ReturnType<typeof useAddProduct>;\nexport type AddProductMutationResult = ApolloReactCommon.MutationResult<AddProduct>;\nexport type AddProductMutationOptions = ApolloReactCommon.BaseMutationOptions<AddProduct, AddProductVariables>;","import React, { useState } from \"react\"\nimport { Button, Form, Input, Modal, Select } from \"antd\"\nimport PlusOutlined from \"@ant-design/icons/lib/icons/PlusOutlined\"\nimport MinusCircleOutlined from \"@ant-design/icons/lib/icons/MinusCircleOutlined\"\nimport { connect } from \"react-redux\"\nimport { setIsOpenAddProductModal } from \"../../actions\"\nimport { priceStringToIntCent } from \"../../utils/utils\"\nimport {\n  REACT_APP_NO_IMAGE_AVAILABLE, REACT_APP_RECYCLE_BIN_ID\n} from \"../../actions/types\"\nimport { RootState } from \"../../reducer\"\nimport { IProductsAll } from \"../Products/types\"\nimport { useAddProduct } from \"../Products/mutations/__generated__/AddProduct\"\nimport { ProductsAllDocument } from \"../Products/queries/__generated__/ProductsAll\"\nimport { ProductCatId } from \"../../__generated__apollo__/types-query\"\nimport { useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\n\ntype PropsProductAddForm = {\n  setIsOpenAddProductModal: (isOpen: Boolean) => void\n  isOpenAddProductModal: Boolean\n}\n\nconst ProductAddForm: React.FC<PropsProductAddForm> = ({ isOpenAddProductModal, setIsOpenAddProductModal }) => {\n  const [addProduct, {data: add_product_data}] = useAddProduct(\n    {\n      // TODO:\n      // @ts-ignore\n      update(cache, { data: { addProduct } }) {\n        const { productsAll } = cache.readQuery<IProductsAll>({ query: ProductsAllDocument })!.productsAll\n        cache.writeQuery({\n          query: ProductsAllDocument,\n          data: { productsAll: productsAll?.concat([addProduct]) }\n        })\n      },\n      refetchQueries: [{\n        query: ProductsAllDocument\n      }]\n    }\n  )\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const [values, setValues] = useState<ProductCatId | any>({})\n  console.log(\"values+++\", values)\n\n  const onFinish = (valuefromformlist: ProductCatId) => {\n    console.log(\"Received values of form:\", values)\n\n    const { name, categoryId, icon } = values\n    const price = priceStringToIntCent(values.price)\n    console.log(\"onFinish\")\n    addProduct({\n      variables: {\n        name,\n        price,\n        categoryId,\n        images: !valuefromformlist.images ? [REACT_APP_NO_IMAGE_AVAILABLE] : valuefromformlist.images,\n        icon\n      }\n    }).then(m => console.log(\"addProduct:\", m))\n      .catch(e => console.log(\"addProductERROR:\", e))\n\n    setIsOpenAddProductModal(false)\n  }\n\n  const handleCancel = () => {\n    setIsOpenAddProductModal(false)\n  }\n\n  const handleChange = (e: { target: HTMLInputElement }) => {\n    const { name, value } = e.target\n    console.log(\"target\", e.target)\n    setValues({ ...values, [name]: value })\n  }\n\n  const handleChangeSelect = (value: string) => {\n    setValues({ ...values, \"categoryId\": value })\n  }\n\n  if (cat_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (cat_error || !cat_data) {\n    return (<div>Error...</div>)\n  }\n  const { categoriesAll } = cat_data\n  const categoriesAllWithoutRecycleBin = categoriesAll?.filter((category) => {\n    return category?.id !== REACT_APP_RECYCLE_BIN_ID\n  })\n  console.log(\"isOpenAddProductModal\", isOpenAddProductModal)\n\n  return (\n    <Modal\n      title=\"Product information\"\n      visible={Boolean(isOpenAddProductModal)}\n      footer={false}\n      onCancel={handleCancel}\n      // forceRender={true}\n      // destroyOnClose={true}\n      // okButtonProps={{htmlType: \"submit\" }}\n      // cancelButtonProps={{ htmlType: \"submit\" }}\n    >\n      <Form\n        // onChange={handleChange}\n        name=\"product\" {...formItemLayoutWithOutLabel}\n        // @ts-ignore\n        onFinish={onFinish}>\n        <Form.Item\n          label=\"Name product\"\n          rules={[{ required: true, message: \"Name product is required\" }]}\n        >\n          <Input\n            name=\"name\"\n            onChange={handleChange} placeholder=\"name product\"\n            style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n        <Form.Item\n          label=\"Price\"\n          rules={[{ required: true, message: \"Price is required\" }]}\n        >\n          <Input\n            name=\"price\"\n            onChange={handleChange}\n            type=\"number\" placeholder=\"Price $\" style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n\n        <Form.Item\n          label=\"Category\"\n          name=\"categoryId\"\n          // noStyle\n          rules={[{ required: true, message: \"Category is required\" }]}\n        >\n          <Select\n            onChange={handleChangeSelect}\n            placeholder=\"Select category\">\n            {categoriesAllWithoutRecycleBin?.map((category) =>\n              <Select.Option\n                key={String(category?.id)}\n                value={String(category?.id)}\n                onChange={handleChange}\n              >{String(category?.name)}\n              </Select.Option>\n            )\n            }\n          </Select>\n        </Form.Item>\n\n        <Form.List name=\"images\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    label={index === 0 ? \"Images\" : \"\"}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      {...field}\n                      validateTrigger={[\"onChange\", \"onBlur\"]}\n                      rules={[\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"Please input image url or delete this field.\"\n                        }\n                      ]}\n                      noStyle\n                    >\n                      <Input\n                        style={{ width: \"90%\", marginRight: 8 }}/>\n                    </Form.Item>\n\n                    {(fields.length >= 1) ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => {\n                          remove(field.name)\n                        }}\n                      />\n                    ) : <span/>}\n                  </Form.Item>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => {\n                      add()\n                    }}\n                    style={{ width: \"80%\" }}\n                  >\n                    <PlusOutlined/> Add image url\n                  </Button>\n                </Form.Item>\n              </div>\n            )\n          }}\n        </Form.List>\n        <Form.Item\n          label=\"Icon\"\n          name=\"icon\"\n          // noStyle\n        >\n          <Input onChange={handleChange} placeholder=\"icon url\" style={{ width: \"100%\", marginRight: 8 }}/>\n        </Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form>\n\n    </Modal>\n  )\n}\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 4 }\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 20 }\n  }\n}\n\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: { span: 24, offset: 0 },\n    sm: { span: 20, offset: 4 }\n  }\n}\n\ninterface StateProps {\n  isOpenAddProductModal: Boolean\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  isOpenAddProductModal: state.add_product_modal.isOpen\n})\n\nexport default connect<typeof ProductAddForm>(\n  // TODO:\n// @ts-ignore\n  mapStateToProps,\n  { setIsOpenAddProductModal }\n)(ProductAddForm)","import React from \"react\"\nimport { Button, Tooltip } from \"antd\"\nimport { PlusOutlined } from \"@ant-design/icons\"\nimport ProductsTable from \"../ProductsTable\"\nimport ProductEditForm from \"../ProductEditForm\"\nimport ProductAddForm from \"../ProductAddForm\"\nimport { connect } from \"react-redux\"\nimport { clearEditProduct, setIsOpenAddProductModal } from \"../../actions\"\n\ninterface PropsProducts {\n  clearEditProduct: () => void\n  setIsOpenAddProductModal: (isOpen: Boolean) => void\n}\n\nconst Products: React.FC<PropsProducts> = ({ setIsOpenAddProductModal, clearEditProduct }) => {\n\n  const onClickHandler = () => {\n    clearEditProduct()\n    setIsOpenAddProductModal(true)\n  }\n\n  return (\n    <>\n      <h1>Products</h1>\n      <ProductsTable/>\n      <ProductEditForm/>\n      <ProductAddForm/>\n      <Tooltip title=\"Add Product\">\n        <Button onClick={onClickHandler} type=\"dashed\" shape=\"circle\"\n                style={{ position: \"fixed\", bottom: \"50px\", right: \"50px\", color: \"#08c\" }}\n        ><PlusOutlined\n          style={{ fontSize: \"22px\", color: \"#08c\" }}\n        /></Button>\n      </Tooltip>\n    </>\n  )\n}\n\nexport default connect<typeof Products>(null, { setIsOpenAddProductModal, clearEditProduct })(Products)","import React from \"react\"\nimport { CategoryRequireIcons } from \"../../actions/types\"\nimport { Product } from \"../../__generated__/types\"\n\ninterface PropsRecycleBinIcon {\n  categoryById: CategoryRequireIcons\n  productsByCategoryId: Product[]\n}\n\nconst RecycleBinIcon: React.FC<PropsRecycleBinIcon> = ({ categoryById, productsByCategoryId }): any => {\n  if (productsByCategoryId.length === 0) {\n    return <img src={String(categoryById.icons[0])} width={15} alt=\"recycle bin\"/>\n  } else if (productsByCategoryId.length > 0) {\n    return <img src={String(categoryById.icons[3])} width={15} alt=\"recycle bin\"/>\n  }\n}\n\nexport default RecycleBinIcon","import { gql } from \"apollo-boost\"\n\nexport const productsAllQuery = gql`\n    query productsAll{\n        productsAll{\n            id\n            name\n            price\n            images\n            icon\n            category{\n                id\n                name\n                icons\n            }\n        }\n    }\n`\nexport const productsByCategoryIdQuery = gql`\n    query productsByCategoryId($categoryId: ID!){\n        productsByCategoryId(categoryId: $categoryId){\n            id\n            name\n            price\n            images\n            icon\n            category{\n                id\n                name\n                icons\n            }\n        }\n    }\n`\n\n","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type DeleteProductVariables = {\n  id: Types.Scalars['ID'];\n};\n\n\nexport type DeleteProduct = (\n  { __typename: 'Mutation' }\n  & { deleteProduct?: Types.Maybe<(\n    { __typename: 'Product' }\n    & Pick<Types.Product, 'id' | 'name' | 'price' | 'images' | 'icon'>\n    & { category?: Types.Maybe<(\n      { __typename: 'Category' }\n      & Pick<Types.Category, 'id' | 'name' | 'icons'>\n    )> }\n  )> }\n);\n\n\nexport const DeleteProductDocument = gql`\n    mutation DeleteProduct($id: ID!) {\n  deleteProduct(id: $id) {\n    id\n    name\n    price\n    images\n    icon\n    category {\n      id\n      name\n      icons\n    }\n  }\n}\n    `;\nexport type DeleteProductMutationFn = ApolloReactCommon.MutationFunction<DeleteProduct, DeleteProductVariables>;\n\n/**\n * __useDeleteProduct__\n *\n * To run a mutation, you first call `useDeleteProduct` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProduct` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProduct, { data, loading, error }] = useDeleteProduct({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteProduct(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteProduct, DeleteProductVariables>) {\n        return ApolloReactHooks.useMutation<DeleteProduct, DeleteProductVariables>(DeleteProductDocument, baseOptions);\n      }\nexport type DeleteProductHookResult = ReturnType<typeof useDeleteProduct>;\nexport type DeleteProductMutationResult = ApolloReactCommon.MutationResult<DeleteProduct>;\nexport type DeleteProductMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteProduct, DeleteProductVariables>;","import React, { useState } from \"react\"\nimport { Button, Form, Modal, Select, Table, Tooltip } from \"antd\"\nimport { productsByCategoryIdQuery } from \"../Products/query\"\nimport { connect } from \"react-redux\"\nimport { clearEditProduct, editProduct } from \"../../actions\"\nimport { priceToDollars } from \"../../utils/utils\"\nimport { PropsUpdateProduct } from \"../Products/types\"\nimport {\n  Product,\n  ProductCatId\n} from \"../../__generated__apollo__/types-query\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\nimport { RootState } from \"../../reducer\"\nimport { useProductsByCategoryId } from \"../Products/queries/__generated__/ProductsByCategoryId\"\nimport { useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { useDeleteProduct } from \"../Products/mutations/__generated__/DeleteProduct\"\nimport { useUpdateProduct } from \"../Products/mutations/__generated__/UpdateProduct\"\nimport { MutationAddProductArgs } from \"../../__generated__/types\"\n\nconst styleImagesInTable = { width: \"50px\", height: \"100%\", marginRight: \"10px\" }\n\ninterface PropsRecycleBinProductsTable {\n  clearEditProduct: () => void\n  editProduct: (product: MutationAddProductArgs) => void\n  edited_product: MutationAddProductArgs\n}\n\nconst RecycleBinProductsTable: React.FC<PropsRecycleBinProductsTable> = ({\n                                                                           clearEditProduct,\n                                                                           editProduct,\n                                                                           edited_product\n                                                                         }) => {\n  const { loading: recycle_bin_prod_loading, error: recycle_bin_prod_error, data: recycle_bin_prod_data } = useProductsByCategoryId({\n    variables: {\n      categoryId: REACT_APP_RECYCLE_BIN_ID\n    }\n  })\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const [values, setValues] = useState({})\n  const [isVisualDeleteModal, setIsVisualDeleteModal] = useState(false)\n  const [isVisualRestoreModal, setIsVisualRestoreModal] = useState(false)\n  const [productDeleted, setProductDeleted] = useState<Product | any>({})\n  const [deleteProduct, {}] = useDeleteProduct({\n      refetchQueries: [{\n        query: productsByCategoryIdQuery,\n        variables: {\n          categoryId: REACT_APP_RECYCLE_BIN_ID\n        }\n      }]\n    }\n  )\n  const [updateProduct, {}] = useUpdateProduct({\n      refetchQueries: [{\n        query: productsByCategoryIdQuery,\n        variables: {\n          categoryId: REACT_APP_RECYCLE_BIN_ID\n        }\n      }]\n    }\n  )\n  if (cat_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (cat_error || !cat_data) {\n    return (<div>Error...</div>)\n  }\n  const { categoriesAll } = cat_data\n\n  const categoriesAllWithoutRecycleBin = categoriesAll?.filter((category) => {\n    return category?.id !== REACT_APP_RECYCLE_BIN_ID\n  })\n  console.log(\"productDeleted\", productDeleted)\n\n  if (recycle_bin_prod_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (recycle_bin_prod_error || !recycle_bin_prod_data) {\n    return (<div>Error...</div>)\n  }\n  const { productsByCategoryId } = recycle_bin_prod_data\n\n  console.log(\"productsByCategoryId\", recycle_bin_prod_data?.productsByCategoryId)\n  const onFinish = (valuefromformlist: ProductCatId) => {\n    console.log(\"Received values of form:\", values)\n\n    const { categoryId } = valuefromformlist\n\n    const { name, images, price, icon } = edited_product\n    // TODO:\n    // @ts-ignore\n    const id = String(edited_product.id)\n\n    console.log(\"onFinish\", valuefromformlist)\n    // TODO:\n    // @ts-ignore\n    updateProduct<PropsUpdateProduct>({\n      variables: {\n        id, name, price, categoryId, images, icon\n      }\n    }).then((m: String) => {\n        console.log(\"updateProductMESSAGE:\", m)\n      }\n    )\n      .catch((e: Error) => console.log(\"updateProductERROR:\", e))\n\n    setIsVisualRestoreModal(false)\n  }\n  const handleEdit = (id: String) => {\n    // TODO:\n    // @ts-ignore\n    editProduct(productsByCategoryId?.find((prod: Product) => prod.id === id))\n    setIsVisualRestoreModal(true)\n  }\n  const handleCancelRestore = () => {\n    clearEditProduct()\n    setIsVisualRestoreModal(false)\n  }\n\n  const handleDelete = (id: String) => {\n    setIsVisualDeleteModal(true)\n    // @ts-ignore\n    setProductDeleted(productsByCategoryId?.find((prod: Product) => prod.id === id))\n  }\n\n  const handleOk = (id: String) => {\n    console.log(\"productDeleted.id\", productDeleted.id)\n    deleteProduct({\n      variables: {\n        id: String(id)\n      }\n    }).then(mess => console.log(\"deleteProduct response:\", mess))\n    setIsVisualDeleteModal(false)\n  }\n\n  const handleCancel = () => {\n    setIsVisualDeleteModal(false)\n  }\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target\n    setValues({ ...values, [name]: value })\n  }\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\"\n    },\n    {\n      title: \"ID\",\n      dataIndex: \"id\",\n      key: \"id\"\n    },\n    {\n      title: \"Price\",\n      dataIndex: \"price\",\n      key: \"price\",\n      render: (price: Number) => {\n        return priceToDollars(price)\n      }\n    },\n    {\n      title: \"Images\",\n      dataIndex: \"images\",\n      key: \"images\",\n      render: (images: String[]) => {\n        return (images)\n          ? <div>\n            {\n              images\n                .map(image => <img\n                  key={String(image)}\n                  alt=\"img\"\n                  src={String(image)}\n                  style={styleImagesInTable}/>\n                )\n            }\n          </div>\n          : <span>no images</span>\n      }\n    },\n    {\n      title: \"Actions\",\n      dataIndex: \"id\",\n      key: \"id\",\n      render: (id: String) => <>\n        <Tooltip title=\"Recovery this product in any category\">\n          <Button onClick={() => handleEdit(id)} type=\"dashed\">\n            Recovery in category\n          </Button>\n        </Tooltip>\n        <Tooltip title=\"Delete forever\">\n          <Button onClick={() => handleDelete(id)} type=\"dashed\" danger>\n            Delete\n          </Button>\n        </Tooltip>\n      </>\n    }\n  ]\n\n  return (\n    <>\n      <Table\n        // TODO:\n        // @ts-ignore\n        dataSource={productsByCategoryId} columns={columns} rowKey=\"id\"/>\n      <Modal\n        title=\"Delete product?\"\n        visible={isVisualDeleteModal}\n        onOk={() => handleOk(productDeleted.id)}\n        onCancel={handleCancel}\n      >\n        <p>{productDeleted.name}</p>\n      </Modal>\n\n      <Modal\n        footer={false}\n        title=\"Restore in category?\"\n        visible={isVisualRestoreModal}\n        onCancel={handleCancelRestore}\n      >\n        <Form\n          name=\"restore\"\n          // TODO:\n          // @ts-ignore\n          onFinish={onFinish}>\n          <Form.Item\n            label=\"Category\"\n            name=\"categoryId\"\n            // TODO:\n            // @ts-ignore\n            onChange={handleChange}\n            rules={[{ required: true, message: \"Category is required\" }]}\n          >\n            <Select\n              placeholder=\"Select category\">\n              {categoriesAllWithoutRecycleBin?.map((category) =>\n                <Select.Option\n                  // TODO:\n                  // @ts-ignore\n                  key={category?.id}\n                >{category?.name}</Select.Option>\n              )\n              }\n            </Select>\n          </Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Restore\n          </Button>\n        </Form>\n      </Modal>\n    </>\n  )\n}\n\n\ninterface StateProps {\n  edited_product?: Product | {}\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  edited_product: state.edit_product.product\n})\n\nexport default connect<StateProps, typeof RecycleBinProductsTable>(\n  // TODO:\n  // @ts-ignore\n  mapStateToProps,\n  { editProduct, clearEditProduct })(RecycleBinProductsTable)\n","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type ClearRecycleBinVariables = {};\n\n\nexport type ClearRecycleBin = (\n  { __typename: 'Mutation' }\n  & { clearRecycleBin?: Types.Maybe<{ __typename: 'Product' }> }\n);\n\n\nexport const ClearRecycleBinDocument = gql`\n    mutation ClearRecycleBin {\n  clearRecycleBin {\n    __typename\n  }\n}\n    `;\nexport type ClearRecycleBinMutationFn = ApolloReactCommon.MutationFunction<ClearRecycleBin, ClearRecycleBinVariables>;\n\n/**\n * __useClearRecycleBin__\n *\n * To run a mutation, you first call `useClearRecycleBin` within a React component and pass it any options that fit your needs.\n * When your component renders, `useClearRecycleBin` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [clearRecycleBin, { data, loading, error }] = useClearRecycleBin({\n *   variables: {\n *   },\n * });\n */\nexport function useClearRecycleBin(baseOptions?: ApolloReactHooks.MutationHookOptions<ClearRecycleBin, ClearRecycleBinVariables>) {\n        return ApolloReactHooks.useMutation<ClearRecycleBin, ClearRecycleBinVariables>(ClearRecycleBinDocument, baseOptions);\n      }\nexport type ClearRecycleBinHookResult = ReturnType<typeof useClearRecycleBin>;\nexport type ClearRecycleBinMutationResult = ApolloReactCommon.MutationResult<ClearRecycleBin>;\nexport type ClearRecycleBinMutationOptions = ApolloReactCommon.BaseMutationOptions<ClearRecycleBin, ClearRecycleBinVariables>;","import React, { useState } from \"react\"\nimport RecycleBinProductsTable from \"../RecycleBinProductsTable\"\nimport { Button, Modal, Tooltip } from \"antd\"\nimport { DeleteOutlined } from \"@ant-design/icons\"\nimport { useClearRecycleBin } from \"../Products/mutations/__generated__/ClearRecycleBin\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\nimport { ProductsByCategoryIdDocument } from \"../Products/queries/__generated__/ProductsByCategoryId\"\n\nconst RecycleBin = () => {\n  const [isVisualDeleteModal, setIsVisualDeleteModal] = useState<Boolean>(false)\n  const [clearRecycleBin] = useClearRecycleBin(\n    {\n      refetchQueries: [{\n        query: ProductsByCategoryIdDocument,\n        variables: {\n          categoryId: REACT_APP_RECYCLE_BIN_ID\n        }\n      }]\n    }\n  )\n\n  const handleDelete = () => {\n    setIsVisualDeleteModal(true)\n  }\n  const handleOk = () => {\n    clearRecycleBin().then()\n    setIsVisualDeleteModal(false)\n  }\n\n  const handleCancel = () => {\n    setIsVisualDeleteModal(false)\n  }\n\n  return (\n    <>\n      <h1 style={{ display: \"inline-block\" }}>Recycle bin</h1>\n      <Tooltip title=\"Delete all products from recycle bin forever\">\n        <Button style={{ float: \"right\" }} onClick={handleDelete} type=\"dashed\" danger icon={<DeleteOutlined/>}>\n          Clear recycle bin\n        </Button>\n      </Tooltip>\n      <Modal\n        title=\"Clear recycle bin?\"\n        visible={Boolean(isVisualDeleteModal)}\n        onOk={handleOk}\n        onCancel={handleCancel}\n      >\n        <DeleteOutlined/>...\n      </Modal>\n      <RecycleBinProductsTable/>\n    </>\n  )\n}\n\nexport default RecycleBin","import * as Types from '../../../../__generated__/types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\nexport type CategoryByIdVariables = {\n  id?: Types.Maybe<Types.Scalars['ID']>;\n};\n\n\nexport type CategoryById = (\n  { __typename: 'Query' }\n  & { categoryById?: Types.Maybe<(\n    { __typename: 'Category' }\n    & Pick<Types.Category, 'id' | 'name' | 'icons'>\n  )> }\n);\n\n\nexport const CategoryByIdDocument = gql`\n    query CategoryById($id: ID) {\n  categoryById(id: $id) {\n    id\n    name\n    icons\n  }\n}\n    `;\n\n/**\n * __useCategoryById__\n *\n * To run a query within a React component, call `useCategoryById` and pass it any options that fit your needs.\n * When your component renders, `useCategoryById` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCategoryById({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useCategoryById(baseOptions?: ApolloReactHooks.QueryHookOptions<CategoryById, CategoryByIdVariables>) {\n        return ApolloReactHooks.useQuery<CategoryById, CategoryByIdVariables>(CategoryByIdDocument, baseOptions);\n      }\nexport function useCategoryByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CategoryById, CategoryByIdVariables>) {\n          return ApolloReactHooks.useLazyQuery<CategoryById, CategoryByIdVariables>(CategoryByIdDocument, baseOptions);\n        }\nexport type CategoryByIdHookResult = ReturnType<typeof useCategoryById>;\nexport type CategoryByIdLazyQueryHookResult = ReturnType<typeof useCategoryByIdLazyQuery>;\nexport type CategoryByIdQueryResult = ApolloReactCommon.QueryResult<CategoryById, CategoryByIdVariables>;","import React from \"react\"\nimport { Empty, Select, Tabs } from \"antd\"\nimport Categories from \"../Categories\"\nimport Products from \"../Products\"\nimport { Query } from \"react-apollo\"\nimport { useQuery } from \"@apollo/react-hooks\"\nimport { categoriesAllQuery, categoryByIdQuery } from \"../Categories/query\"\nimport { productsAllQuery, productsByCategoryIdQuery } from \"../Products/query\"\nimport AndroidOutlined from \"@ant-design/icons/lib/icons/AndroidOutlined\"\nimport RecycleBinIcon from \"../RecycleBinIcon\"\nimport RecycleBin from \"../RecycleBin\"\nimport { useProductsAll } from \"../Products/queries/__generated__/ProductsAll\"\nimport { useCategoriesAll } from \"../Categories/queries/__generated__/CategoriesAll\"\nimport { useProductsByCategoryId } from \"../Products/queries/__generated__/ProductsByCategoryId\"\nimport { REACT_APP_RECYCLE_BIN_ID } from \"../../actions/types\"\nimport { useCategoryById } from \"../Categories/queries/__generated__/CategoryById\"\n\nconst { TabPane } = Tabs\n\nfunction callback(key: any) {\n  console.log(key)\n}\n\nconst TabsContainer: React.FC = () => {\n  const { loading: cat_loading, error: cat_error, data: cat_data } = useCategoriesAll()\n  const { loading: prod_loading, error: prod_error, data: prod_data } = useProductsAll()\n  const { loading: recycle_bin_loading, error: recycle_bin_error, data: recycle_bin_data } = useProductsByCategoryId({\n    variables: {\n      categoryId: REACT_APP_RECYCLE_BIN_ID\n    }\n  })\n  const { loading: recycle_bin_prod_loading, error: recycle_bin_prod_error, data: recycle_bin_prod_data } = useProductsByCategoryId({\n    variables: {\n      categoryId: REACT_APP_RECYCLE_BIN_ID\n    }\n  })\n  const { loading: recycle_bin_cat_loading, error: recycle_bin_cat_error, data: recycle_bin_cat_data } = useCategoryById({\n    variables: {\n      id: REACT_APP_RECYCLE_BIN_ID\n    }\n  })\n  if (cat_loading || prod_loading || recycle_bin_prod_loading || recycle_bin_loading || recycle_bin_cat_loading) {\n    return (<div>Loading...</div>)\n  }\n  if (cat_error || prod_error || recycle_bin_error || recycle_bin_prod_error || recycle_bin_cat_error || !cat_data || !prod_data || !recycle_bin_prod_data || !recycle_bin_cat_data || !recycle_bin_data) {\n    return (<div>Error.</div>)\n  }\n\n  const { productsByCategoryId } = recycle_bin_prod_data\n  const { categoryById } = recycle_bin_cat_data\n\n  return (\n    <Tabs defaultActiveKey=\"1\" onChange={callback}>\n      <Tabs.TabPane tab=\"Products\" key=\"1\">\n        <Products/>\n      </Tabs.TabPane>\n      <TabPane tab=\"Categories\" key=\"2\">\n        <Categories/>\n      </TabPane>\n      <TabPane tab={\n        <span>\n          <RecycleBinIcon\n            // TODO:\n            // @ts-ignore\n            categoryById={categoryById} productsByCategoryId={productsByCategoryId}/>\n          Recycle bin\n        </span>\n      } key=\"3\">\n        {(productsByCategoryId?.length === 0) ? <Empty/> : <RecycleBin/>}\n      </TabPane>\n\n    </Tabs>\n  )\n}\n\nexport default TabsContainer","import React from \"react\"\nimport TabsContainer from \"./components/TabsContainer\"\nimport \"antd/dist/antd.css\"\nimport \"./App.css\"\n\nconst App: React.FC = () => {\n  console.log(\"app.tsx\")\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          <code>APP</code>\n        </p>\n        <a\n          className=\"App-link\"\n          href={process.env.REACT_APP_BASE_URL}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          BASE_URL\n        </a>\n      </header>\n      <TabsContainer/>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ApolloClient from \"apollo-boost\"\nimport { InMemoryCache } from \"apollo-cache-inmemory\"\n\nconst cache = new InMemoryCache();\n\nexport const client = new ApolloClient({\n  cache,\n  uri: process.env.REACT_APP_BASE_URL,\n})\n","import { EditProductModalState, IS_OPEN_EDIT_PRODUCT_MODAL, setIsOpenEditProductModalAction } from \"../actions/types\"\n\nconst initialState: EditProductModalState = {\n  isOpen: false\n}\n\nexport default (state = initialState, action: setIsOpenEditProductModalAction): EditProductModalState => {\n  switch (action.type) {\n    case IS_OPEN_EDIT_PRODUCT_MODAL:\n      return {\n        ...state,\n        isOpen: action.payload\n      }\n    default:\n      return state\n  }\n}","import { AddProductModalState, setIsOpenAddProductModalAction, IS_OPEN_ADD_PRODUCT_MODAL } from \"../actions/types\"\n\nconst initialState: AddProductModalState = {\n  isOpen: false\n}\n\nexport default (state = initialState, action: setIsOpenAddProductModalAction): AddProductModalState => {\n  switch (action.type) {\n    case IS_OPEN_ADD_PRODUCT_MODAL:\n      return {\n        ...state,\n        isOpen: action.payload\n      }\n    default:\n      return state\n  }\n}","import { EditCategoryModalState, IS_OPEN_EDIT_CATEGORY_MODAL, setIsOpenEditCategoryModalAction } from \"../actions/types\"\n\nconst initialState: EditCategoryModalState = {\n  isOpen: false\n}\n\nexport default (state = initialState, action: setIsOpenEditCategoryModalAction): EditCategoryModalState => {\n  switch (action.type) {\n    case IS_OPEN_EDIT_CATEGORY_MODAL:\n      return {\n        ...state,\n        isOpen: action.payload\n      }\n    default:\n      return state\n  }\n}","import { AddCategoryModalState, IS_OPEN_ADD_CATEGORY_MODAL, setIsOpenAddCategoryModalAction } from \"../actions/types\"\n\nconst initialState: AddCategoryModalState = {\n  isOpen: false\n}\n\nexport default (state = initialState, action: setIsOpenAddCategoryModalAction): AddCategoryModalState => {\n  switch (action.type) {\n    case IS_OPEN_ADD_CATEGORY_MODAL:\n      return {\n        ...state,\n        isOpen: action.payload\n      }\n    default:\n      return state\n  }\n}","import { CLEAR_EDIT_PRODUCT, EDIT_PRODUCT, editProductAction, EditProductState } from \"../actions/types\"\n\nconst initialState: EditProductState = {\n  product: {}\n}\n\nexport default (state = initialState, action: editProductAction): EditProductState => {\n  switch (action.type) {\n    case EDIT_PRODUCT:\n      return {\n        ...state,\n        product: action.payload\n      }\n      case CLEAR_EDIT_PRODUCT:\n      return {\n        ...initialState\n      }\n    default:\n      return state\n  }\n}","import { combineReducers } from \"redux\"\nimport edit_product_modal from \"./edit-prod-modal\"\nimport add_product_modal from \"./add-prod-modal\"\nimport edit_cat_modal from \"./edit-cat-modal\"\nimport add_cat_modal from \"./add-cat-modal\"\nimport edit_product from \"./edit-product\"\n\nexport const rootReducer = combineReducers({\n  add_cat_modal,\n  edit_cat_modal,\n  edit_product_modal,\n  add_product_modal,\n  edit_product\n})\n\nexport type RootState = ReturnType<typeof rootReducer>","import { createStore } from \"redux\";\nimport { rootReducer } from \"../reducer\"\nimport { composeWithDevTools } from \"redux-devtools-extension/logOnlyInProduction\"\n// const composeEnhancers =\n//   typeof window === \"object\" &&\n//   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n//     window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n//       // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n//     }) : compose;\n\nconst composeEnhancers = composeWithDevTools();\n\nconst store = createStore(rootReducer, {}, composeEnhancers);\n\nexport default store;","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport { ApolloProvider } from \"react-apollo\"\nimport { ApolloProvider as ApolloHooksProvider } from '@apollo/react-hooks'\n\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { client } from \"./store/apollo-client\"\nimport store from \"./store\"\n\nReactDOM.render(\n  <Provider store={store}>\n    <ApolloProvider client={client}>\n      <ApolloHooksProvider client={client}>\n      <App/>\n        </ApolloHooksProvider>\n    </ApolloProvider>\n  </Provider>, document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}